
NUCLEO-G474RE-AEI_Base_TP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a914  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000062c  0800aaf4  0800aaf4  0001aaf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b120  0800b120  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  0800b120  0800b120  0001b120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b128  0800b128  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b128  0800b128  0001b128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b12c  0800b12c  0001b12c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800b130  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  20000070  0800b1a0  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000046c  0800b1a0  0002046c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d050  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000381c  00000000  00000000  0003d0f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00040910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014c8  00000000  00000000  00041f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8f9  00000000  00000000  00043428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b5ac  00000000  00000000  0006dd21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113fee  00000000  00000000  000892cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019d2bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b78  00000000  00000000  0019d30c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800aadc 	.word	0x0800aadc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	0800aadc 	.word	0x0800aadc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b974 	b.w	8000e1c <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468e      	mov	lr, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14d      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4694      	mov	ip, r2
 8000b5e:	d969      	bls.n	8000c34 <__udivmoddi4+0xe8>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b152      	cbz	r2, 8000b7c <__udivmoddi4+0x30>
 8000b66:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6a:	f1c2 0120 	rsb	r1, r2, #32
 8000b6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b76:	ea41 0e03 	orr.w	lr, r1, r3
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b80:	0c21      	lsrs	r1, r4, #16
 8000b82:	fbbe f6f8 	udiv	r6, lr, r8
 8000b86:	fa1f f78c 	uxth.w	r7, ip
 8000b8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b92:	fb06 f107 	mul.w	r1, r6, r7
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ba2:	f080 811f 	bcs.w	8000de4 <__udivmoddi4+0x298>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 811c 	bls.w	8000de4 <__udivmoddi4+0x298>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc0:	fb00 f707 	mul.w	r7, r0, r7
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x92>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd0:	f080 810a 	bcs.w	8000de8 <__udivmoddi4+0x29c>
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	f240 8107 	bls.w	8000de8 <__udivmoddi4+0x29c>
 8000bda:	4464      	add	r4, ip
 8000bdc:	3802      	subs	r0, #2
 8000bde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be2:	1be4      	subs	r4, r4, r7
 8000be4:	2600      	movs	r6, #0
 8000be6:	b11d      	cbz	r5, 8000bf0 <__udivmoddi4+0xa4>
 8000be8:	40d4      	lsrs	r4, r2
 8000bea:	2300      	movs	r3, #0
 8000bec:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0xc2>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	f000 80ef 	beq.w	8000dde <__udivmoddi4+0x292>
 8000c00:	2600      	movs	r6, #0
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	4630      	mov	r0, r6
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	fab3 f683 	clz	r6, r3
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d14a      	bne.n	8000cac <__udivmoddi4+0x160>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xd4>
 8000c1a:	4282      	cmp	r2, r0
 8000c1c:	f200 80f9 	bhi.w	8000e12 <__udivmoddi4+0x2c6>
 8000c20:	1a84      	subs	r4, r0, r2
 8000c22:	eb61 0303 	sbc.w	r3, r1, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	469e      	mov	lr, r3
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d0e0      	beq.n	8000bf0 <__udivmoddi4+0xa4>
 8000c2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c32:	e7dd      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000c34:	b902      	cbnz	r2, 8000c38 <__udivmoddi4+0xec>
 8000c36:	deff      	udf	#255	; 0xff
 8000c38:	fab2 f282 	clz	r2, r2
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	f040 8092 	bne.w	8000d66 <__udivmoddi4+0x21a>
 8000c42:	eba1 010c 	sub.w	r1, r1, ip
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	2601      	movs	r6, #1
 8000c50:	0c20      	lsrs	r0, r4, #16
 8000c52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c56:	fb07 1113 	mls	r1, r7, r3, r1
 8000c5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c5e:	fb0e f003 	mul.w	r0, lr, r3
 8000c62:	4288      	cmp	r0, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x12c>
 8000c66:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x12a>
 8000c70:	4288      	cmp	r0, r1
 8000c72:	f200 80cb 	bhi.w	8000e0c <__udivmoddi4+0x2c0>
 8000c76:	4643      	mov	r3, r8
 8000c78:	1a09      	subs	r1, r1, r0
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c80:	fb07 1110 	mls	r1, r7, r0, r1
 8000c84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c88:	fb0e fe00 	mul.w	lr, lr, r0
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x156>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x154>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f200 80bb 	bhi.w	8000e16 <__udivmoddi4+0x2ca>
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000caa:	e79c      	b.n	8000be6 <__udivmoddi4+0x9a>
 8000cac:	f1c6 0720 	rsb	r7, r6, #32
 8000cb0:	40b3      	lsls	r3, r6
 8000cb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cba:	fa20 f407 	lsr.w	r4, r0, r7
 8000cbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc2:	431c      	orrs	r4, r3
 8000cc4:	40f9      	lsrs	r1, r7
 8000cc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cca:	fa00 f306 	lsl.w	r3, r0, r6
 8000cce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cd2:	0c20      	lsrs	r0, r4, #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0x1b8>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cf4:	f080 8088 	bcs.w	8000e08 <__udivmoddi4+0x2bc>
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	f240 8085 	bls.w	8000e08 <__udivmoddi4+0x2bc>
 8000cfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	458e      	cmp	lr, r1
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1e2>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d24:	d26c      	bcs.n	8000e00 <__udivmoddi4+0x2b4>
 8000d26:	458e      	cmp	lr, r1
 8000d28:	d96a      	bls.n	8000e00 <__udivmoddi4+0x2b4>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4461      	add	r1, ip
 8000d2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d32:	fba0 9402 	umull	r9, r4, r0, r2
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	42a1      	cmp	r1, r4
 8000d3c:	46c8      	mov	r8, r9
 8000d3e:	46a6      	mov	lr, r4
 8000d40:	d356      	bcc.n	8000df0 <__udivmoddi4+0x2a4>
 8000d42:	d053      	beq.n	8000dec <__udivmoddi4+0x2a0>
 8000d44:	b15d      	cbz	r5, 8000d5e <__udivmoddi4+0x212>
 8000d46:	ebb3 0208 	subs.w	r2, r3, r8
 8000d4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d52:	fa22 f306 	lsr.w	r3, r2, r6
 8000d56:	40f1      	lsrs	r1, r6
 8000d58:	431f      	orrs	r7, r3
 8000d5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d5e:	2600      	movs	r6, #0
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	f1c2 0320 	rsb	r3, r2, #32
 8000d6a:	40d8      	lsrs	r0, r3
 8000d6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d70:	fa21 f303 	lsr.w	r3, r1, r3
 8000d74:	4091      	lsls	r1, r2
 8000d76:	4301      	orrs	r1, r0
 8000d78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7c:	fa1f fe8c 	uxth.w	lr, ip
 8000d80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d84:	fb07 3610 	mls	r6, r7, r0, r3
 8000d88:	0c0b      	lsrs	r3, r1, #16
 8000d8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d92:	429e      	cmp	r6, r3
 8000d94:	fa04 f402 	lsl.w	r4, r4, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x260>
 8000d9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000da2:	d22f      	bcs.n	8000e04 <__udivmoddi4+0x2b8>
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d92d      	bls.n	8000e04 <__udivmoddi4+0x2b8>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	b289      	uxth	r1, r1
 8000db0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000db4:	fb07 3316 	mls	r3, r7, r6, r3
 8000db8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x28a>
 8000dc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dcc:	d216      	bcs.n	8000dfc <__udivmoddi4+0x2b0>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d914      	bls.n	8000dfc <__udivmoddi4+0x2b0>
 8000dd2:	3e02      	subs	r6, #2
 8000dd4:	4461      	add	r1, ip
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ddc:	e738      	b.n	8000c50 <__udivmoddi4+0x104>
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e705      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e3      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6f8      	b.n	8000bde <__udivmoddi4+0x92>
 8000dec:	454b      	cmp	r3, r9
 8000dee:	d2a9      	bcs.n	8000d44 <__udivmoddi4+0x1f8>
 8000df0:	ebb9 0802 	subs.w	r8, r9, r2
 8000df4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7a3      	b.n	8000d44 <__udivmoddi4+0x1f8>
 8000dfc:	4646      	mov	r6, r8
 8000dfe:	e7ea      	b.n	8000dd6 <__udivmoddi4+0x28a>
 8000e00:	4620      	mov	r0, r4
 8000e02:	e794      	b.n	8000d2e <__udivmoddi4+0x1e2>
 8000e04:	4640      	mov	r0, r8
 8000e06:	e7d1      	b.n	8000dac <__udivmoddi4+0x260>
 8000e08:	46d0      	mov	r8, sl
 8000e0a:	e77b      	b.n	8000d04 <__udivmoddi4+0x1b8>
 8000e0c:	3b02      	subs	r3, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	e732      	b.n	8000c78 <__udivmoddi4+0x12c>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e709      	b.n	8000c2a <__udivmoddi4+0xde>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e742      	b.n	8000ca2 <__udivmoddi4+0x156>

08000e1c <__aeabi_idiv0>:
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08c      	sub	sp, #48	; 0x30
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e32:	1d3b      	adds	r3, r7, #4
 8000e34:	2220      	movs	r2, #32
 8000e36:	2100      	movs	r1, #0
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f008 fb5d 	bl	80094f8 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e3e:	4b32      	ldr	r3, [pc, #200]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e46:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e48:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e4e:	4b2e      	ldr	r3, [pc, #184]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e54:	4b2c      	ldr	r3, [pc, #176]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e5a:	4b2b      	ldr	r3, [pc, #172]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e60:	4b29      	ldr	r3, [pc, #164]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e66:	4b28      	ldr	r3, [pc, #160]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e68:	2204      	movs	r2, #4
 8000e6a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e6c:	4b26      	ldr	r3, [pc, #152]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e72:	4b25      	ldr	r3, [pc, #148]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e78:	4b23      	ldr	r3, [pc, #140]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e7e:	4b22      	ldr	r3, [pc, #136]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e86:	4b20      	ldr	r3, [pc, #128]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e8c:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e9a:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000ea0:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea8:	4817      	ldr	r0, [pc, #92]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000eaa:	f001 fb5b 	bl	8002564 <HAL_ADC_Init>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d001      	beq.n	8000eb8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000eb4:	f000 fa06 	bl	80012c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4811      	ldr	r0, [pc, #68]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000ec4:	f002 fdfa 	bl	8003abc <HAL_ADCEx_MultiModeConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ece:	f000 f9f9 	bl	80012c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_ADC1_Init+0xec>)
 8000ed4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed6:	2306      	movs	r3, #6
 8000ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eda:	2300      	movs	r3, #0
 8000edc:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ede:	237f      	movs	r3, #127	; 0x7f
 8000ee0:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eea:	1d3b      	adds	r3, r7, #4
 8000eec:	4619      	mov	r1, r3
 8000eee:	4806      	ldr	r0, [pc, #24]	; (8000f08 <MX_ADC1_Init+0xe8>)
 8000ef0:	f002 f856 	bl	8002fa0 <HAL_ADC_ConfigChannel>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000efa:	f000 f9e3 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000efe:	bf00      	nop
 8000f00:	3730      	adds	r7, #48	; 0x30
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000008c 	.word	0x2000008c
 8000f0c:	04300002 	.word	0x04300002

08000f10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b09e      	sub	sp, #120	; 0x78
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]
 8000f20:	605a      	str	r2, [r3, #4]
 8000f22:	609a      	str	r2, [r3, #8]
 8000f24:	60da      	str	r2, [r3, #12]
 8000f26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	2254      	movs	r2, #84	; 0x54
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4618      	mov	r0, r3
 8000f32:	f008 fae1 	bl	80094f8 <memset>
  if(adcHandle->Instance==ADC1)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f3e:	d167      	bne.n	8001010 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f44:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f46:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000f4a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4c:	f107 0310 	add.w	r3, r7, #16
 8000f50:	4618      	mov	r0, r3
 8000f52:	f004 fabf 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f5c:	f000 f9b2 	bl	80012c4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f60:	4b2d      	ldr	r3, [pc, #180]	; (8001018 <HAL_ADC_MspInit+0x108>)
 8000f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f64:	4a2c      	ldr	r2, [pc, #176]	; (8001018 <HAL_ADC_MspInit+0x108>)
 8000f66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6c:	4b2a      	ldr	r3, [pc, #168]	; (8001018 <HAL_ADC_MspInit+0x108>)
 8000f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f78:	4b27      	ldr	r3, [pc, #156]	; (8001018 <HAL_ADC_MspInit+0x108>)
 8000f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7c:	4a26      	ldr	r2, [pc, #152]	; (8001018 <HAL_ADC_MspInit+0x108>)
 8000f7e:	f043 0301 	orr.w	r3, r3, #1
 8000f82:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f84:	4b24      	ldr	r3, [pc, #144]	; (8001018 <HAL_ADC_MspInit+0x108>)
 8000f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f90:	2301      	movs	r3, #1
 8000f92:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f94:	2303      	movs	r3, #3
 8000f96:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa6:	f003 faa3 	bl	80044f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000faa:	4b1c      	ldr	r3, [pc, #112]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000fac:	4a1c      	ldr	r2, [pc, #112]	; (8001020 <HAL_ADC_MspInit+0x110>)
 8000fae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000fb0:	4b1a      	ldr	r3, [pc, #104]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000fb2:	2205      	movs	r2, #5
 8000fb4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fb6:	4b19      	ldr	r3, [pc, #100]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000fc4:	2280      	movs	r2, #128	; 0x80
 8000fc6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fc8:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000fce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000fd2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fd6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000fda:	2220      	movs	r2, #32
 8000fdc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fe4:	480d      	ldr	r0, [pc, #52]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000fe6:	f002 ff51 	bl	8003e8c <HAL_DMA_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000ff0:	f000 f968 	bl	80012c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a09      	ldr	r2, [pc, #36]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000ff8:	655a      	str	r2, [r3, #84]	; 0x54
 8000ffa:	4a08      	ldr	r2, [pc, #32]	; (800101c <HAL_ADC_MspInit+0x10c>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2012      	movs	r0, #18
 8001006:	f002 ff19 	bl	8003e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800100a:	2012      	movs	r0, #18
 800100c:	f002 ff30 	bl	8003e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001010:	bf00      	nop
 8001012:	3778      	adds	r7, #120	; 0x78
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40021000 	.word	0x40021000
 800101c:	200000f8 	.word	0x200000f8
 8001020:	40020008 	.word	0x40020008

08001024 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800102a:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_DMA_Init+0x50>)
 800102c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800102e:	4a11      	ldr	r2, [pc, #68]	; (8001074 <MX_DMA_Init+0x50>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	6493      	str	r3, [r2, #72]	; 0x48
 8001036:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_DMA_Init+0x50>)
 8001038:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001042:	4b0c      	ldr	r3, [pc, #48]	; (8001074 <MX_DMA_Init+0x50>)
 8001044:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001046:	4a0b      	ldr	r2, [pc, #44]	; (8001074 <MX_DMA_Init+0x50>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6493      	str	r3, [r2, #72]	; 0x48
 800104e:	4b09      	ldr	r3, [pc, #36]	; (8001074 <MX_DMA_Init+0x50>)
 8001050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800105a:	2200      	movs	r2, #0
 800105c:	2100      	movs	r1, #0
 800105e:	200b      	movs	r0, #11
 8001060:	f002 feec 	bl	8003e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001064:	200b      	movs	r0, #11
 8001066:	f002 ff03 	bl	8003e70 <HAL_NVIC_EnableIRQ>

}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107e:	f107 030c 	add.w	r3, r7, #12
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]
 8001086:	605a      	str	r2, [r3, #4]
 8001088:	609a      	str	r2, [r3, #8]
 800108a:	60da      	str	r2, [r3, #12]
 800108c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800108e:	4b33      	ldr	r3, [pc, #204]	; (800115c <MX_GPIO_Init+0xe4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001092:	4a32      	ldr	r2, [pc, #200]	; (800115c <MX_GPIO_Init+0xe4>)
 8001094:	f043 0304 	orr.w	r3, r3, #4
 8001098:	64d3      	str	r3, [r2, #76]	; 0x4c
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <MX_GPIO_Init+0xe4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109e:	f003 0304 	and.w	r3, r3, #4
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_GPIO_Init+0xe4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a2c      	ldr	r2, [pc, #176]	; (800115c <MX_GPIO_Init+0xe4>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_GPIO_Init+0xe4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <MX_GPIO_Init+0xe4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a26      	ldr	r2, [pc, #152]	; (800115c <MX_GPIO_Init+0xe4>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <MX_GPIO_Init+0xe4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2108      	movs	r1, #8
 80010da:	4821      	ldr	r0, [pc, #132]	; (8001160 <MX_GPIO_Init+0xe8>)
 80010dc:	f003 fb8a 	bl	80047f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80010e0:	2200      	movs	r2, #0
 80010e2:	2120      	movs	r1, #32
 80010e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e8:	f003 fb84 	bl	80047f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80010ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	4619      	mov	r1, r3
 8001102:	4817      	ldr	r0, [pc, #92]	; (8001160 <MX_GPIO_Init+0xe8>)
 8001104:	f003 f9f4 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8001108:	2308      	movs	r3, #8
 800110a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800110c:	2301      	movs	r3, #1
 800110e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001114:	2300      	movs	r3, #0
 8001116:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8001118:	f107 030c 	add.w	r3, r7, #12
 800111c:	4619      	mov	r1, r3
 800111e:	4810      	ldr	r0, [pc, #64]	; (8001160 <MX_GPIO_Init+0xe8>)
 8001120:	f003 f9e6 	bl	80044f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001124:	2320      	movs	r3, #32
 8001126:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001128:	2301      	movs	r3, #1
 800112a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	4619      	mov	r1, r3
 800113a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800113e:	f003 f9d7 	bl	80044f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001142:	2200      	movs	r2, #0
 8001144:	2100      	movs	r1, #0
 8001146:	2028      	movs	r0, #40	; 0x28
 8001148:	f002 fe78 	bl	8003e3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800114c:	2028      	movs	r0, #40	; 0x28
 800114e:	f002 fe8f 	bl	8003e70 <HAL_NVIC_EnableIRQ>

}
 8001152:	bf00      	nop
 8001154:	3720      	adds	r7, #32
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40021000 	.word	0x40021000
 8001160:	48000800 	.word	0x48000800

08001164 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001168:	f000 ff5f 	bl	800202a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800116c:	f000 f84e 	bl	800120c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001170:	f7ff ff82 	bl	8001078 <MX_GPIO_Init>
  MX_DMA_Init();
 8001174:	f7ff ff56 	bl	8001024 <MX_DMA_Init>
  MX_TIM1_Init();
 8001178:	f000 fd48 	bl	8001c0c <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800117c:	f000 fe80 	bl	8001e80 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001180:	f7ff fe4e 	bl	8000e20 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001184:	2201      	movs	r2, #1
 8001186:	491a      	ldr	r1, [pc, #104]	; (80011f0 <main+0x8c>)
 8001188:	481a      	ldr	r0, [pc, #104]	; (80011f4 <main+0x90>)
 800118a:	f006 f9f7 	bl	800757c <HAL_UART_Receive_IT>
	HAL_Delay(1);
 800118e:	2001      	movs	r0, #1
 8001190:	f000 ff82 	bl	8002098 <HAL_Delay>
	shellInit();
 8001194:	f000 f902 	bl	800139c <shellInit>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001198:	2100      	movs	r1, #0
 800119a:	4817      	ldr	r0, [pc, #92]	; (80011f8 <main+0x94>)
 800119c:	f004 fd1a 	bl	8005bd4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011a0:	2104      	movs	r1, #4
 80011a2:	4815      	ldr	r0, [pc, #84]	; (80011f8 <main+0x94>)
 80011a4:	f004 fd16 	bl	8005bd4 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80011a8:	2100      	movs	r1, #0
 80011aa:	4813      	ldr	r0, [pc, #76]	; (80011f8 <main+0x94>)
 80011ac:	f005 fe8a 	bl	8006ec4 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80011b0:	2104      	movs	r1, #4
 80011b2:	4811      	ldr	r0, [pc, #68]	; (80011f8 <main+0x94>)
 80011b4:	f005 fe86 	bl	8006ec4 <HAL_TIMEx_PWMN_Start>
	HAL_ADC_Init(&hadc);
 80011b8:	4810      	ldr	r0, [pc, #64]	; (80011fc <main+0x98>)
 80011ba:	f001 f9d3 	bl	8002564 <HAL_ADC_Init>
	HAL_DMA_Init(&hdma);
 80011be:	4810      	ldr	r0, [pc, #64]	; (8001200 <main+0x9c>)
 80011c0:	f002 fe64 	bl	8003e8c <HAL_DMA_Init>

	HAL_ADC_Start_DMA(&hadc, adc_values, 10);
 80011c4:	220a      	movs	r2, #10
 80011c6:	490f      	ldr	r1, [pc, #60]	; (8001204 <main+0xa0>)
 80011c8:	480c      	ldr	r0, [pc, #48]	; (80011fc <main+0x98>)
 80011ca:	f001 fb8d 	bl	80028e8 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		// SuperLoop inside the while(1), only flag changed from interrupt could launch functions
		if(uartRxReceived){
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <main+0xa4>)
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0fb      	beq.n	80011ce <main+0x6a>
			if(shellGetChar()){
 80011d6:	f000 f919 	bl	800140c <shellGetChar>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <main+0x84>
				shellExec();
 80011e0:	f000 f98a 	bl	80014f8 <shellExec>
				shellPrompt();
 80011e4:	f000 f8f2 	bl	80013cc <shellPrompt>
			}
			uartRxReceived = 0;
 80011e8:	4b07      	ldr	r3, [pc, #28]	; (8001208 <main+0xa4>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	701a      	strb	r2, [r3, #0]
		if(uartRxReceived){
 80011ee:	e7ee      	b.n	80011ce <main+0x6a>
 80011f0:	20000380 	.word	0x20000380
 80011f4:	200003c8 	.word	0x200003c8
 80011f8:	20000330 	.word	0x20000330
 80011fc:	20000158 	.word	0x20000158
 8001200:	200001c4 	.word	0x200001c4
 8001204:	20000224 	.word	0x20000224
 8001208:	2000037c 	.word	0x2000037c

0800120c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b094      	sub	sp, #80	; 0x50
 8001210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001212:	f107 0318 	add.w	r3, r7, #24
 8001216:	2238      	movs	r2, #56	; 0x38
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f008 f96c 	bl	80094f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
 8001226:	605a      	str	r2, [r3, #4]
 8001228:	609a      	str	r2, [r3, #8]
 800122a:	60da      	str	r2, [r3, #12]
 800122c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800122e:	2000      	movs	r0, #0
 8001230:	f003 fb36 	bl	80048a0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001238:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800123c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800123e:	2302      	movs	r3, #2
 8001240:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001242:	2303      	movs	r3, #3
 8001244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001246:	2306      	movs	r3, #6
 8001248:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800124a:	2355      	movs	r3, #85	; 0x55
 800124c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800124e:	2302      	movs	r3, #2
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001252:	2302      	movs	r3, #2
 8001254:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001256:	2302      	movs	r3, #2
 8001258:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800125a:	f107 0318 	add.w	r3, r7, #24
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fbd2 	bl	8004a08 <HAL_RCC_OscConfig>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800126a:	f000 f82b 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800126e:	230f      	movs	r3, #15
 8001270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001272:	2303      	movs	r3, #3
 8001274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001282:	1d3b      	adds	r3, r7, #4
 8001284:	2104      	movs	r1, #4
 8001286:	4618      	mov	r0, r3
 8001288:	f003 fed6 	bl	8005038 <HAL_RCC_ClockConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001292:	f000 f817 	bl	80012c4 <Error_Handler>
  }
}
 8001296:	bf00      	nop
 8001298:	3750      	adds	r7, #80	; 0x50
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b2:	f000 fed3 	bl	800205c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40001000 	.word	0x40001000

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>
	...

080012d0 <motorPowerOn>:
/**
  * @brief  Switch on the motor driver
  * @note Activates the chopper's reset signal, situated on its 33rd pin
  * @retval None
  */
void motorPowerOn(void){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_SET);
 80012d6:	2201      	movs	r2, #1
 80012d8:	2108      	movs	r1, #8
 80012da:	480a      	ldr	r0, [pc, #40]	; (8001304 <motorPowerOn+0x34>)
 80012dc:	f003 fa8a 	bl	80047f4 <HAL_GPIO_WritePin>
	int i;
	for (i=0;i<30; i++)
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
 80012e4:	e002      	b.n	80012ec <motorPowerOn+0x1c>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	3301      	adds	r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b1d      	cmp	r3, #29
 80012f0:	ddf9      	ble.n	80012e6 <motorPowerOn+0x16>
	{
	}
	HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80012f2:	2200      	movs	r2, #0
 80012f4:	2108      	movs	r1, #8
 80012f6:	4803      	ldr	r0, [pc, #12]	; (8001304 <motorPowerOn+0x34>)
 80012f8:	f003 fa7c 	bl	80047f4 <HAL_GPIO_WritePin>
}
 80012fc:	bf00      	nop
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	48000800 	.word	0x48000800

08001308 <motorPowerOff>:

/**
  * @brief  Switch off the motor driver
  * @retval None
  */
void motorPowerOff(void){
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 800130c:	2120      	movs	r1, #32
 800130e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001312:	f003 fa87 	bl	8004824 <HAL_GPIO_TogglePin>
}
 8001316:	bf00      	nop
 8001318:	bd80      	pop	{r7, pc}
	...

0800131c <setdutycycle>:
/**
 * @brief Set the PWM duty cycle
 * @param alpha
 */
void setdutycycle(int alpha)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
		if (alpha < 0 || alpha > 100){
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2b00      	cmp	r3, #0
 8001328:	db20      	blt.n	800136c <setdutycycle+0x50>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b64      	cmp	r3, #100	; 0x64
 800132e:	dc1d      	bgt.n	800136c <setdutycycle+0x50>
			        return;
		}
	TIM1->CCR1=(alpha*5312)/100;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	4a0f      	ldr	r2, [pc, #60]	; (8001378 <setdutycycle+0x5c>)
 800133c:	fb82 1203 	smull	r1, r2, r2, r3
 8001340:	1152      	asrs	r2, r2, #5
 8001342:	17db      	asrs	r3, r3, #31
 8001344:	1ad2      	subs	r2, r2, r3
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <setdutycycle+0x60>)
 8001348:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CCR2=5311-(alpha*5312)/100;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001350:	fb02 f303 	mul.w	r3, r2, r3
 8001354:	4a08      	ldr	r2, [pc, #32]	; (8001378 <setdutycycle+0x5c>)
 8001356:	fb82 1203 	smull	r1, r2, r2, r3
 800135a:	1152      	asrs	r2, r2, #5
 800135c:	17db      	asrs	r3, r3, #31
 800135e:	1a9b      	subs	r3, r3, r2
 8001360:	f503 53a5 	add.w	r3, r3, #5280	; 0x14a0
 8001364:	331f      	adds	r3, #31
 8001366:	4a05      	ldr	r2, [pc, #20]	; (800137c <setdutycycle+0x60>)
 8001368:	6393      	str	r3, [r2, #56]	; 0x38
 800136a:	e000      	b.n	800136e <setdutycycle+0x52>
			        return;
 800136c:	bf00      	nop
}
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	51eb851f 	.word	0x51eb851f
 800137c:	40012c00 	.word	0x40012c00

08001380 <motorSetSpeed>:
/**
  * @brief  Set the motor speed
  * @param  speed : target speed of the motor
  * @retval None
  */
void motorSetSpeed(int speed){
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin); // just for test, you can delete it
 8001388:	2120      	movs	r1, #32
 800138a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138e:	f003 fa49 	bl	8004824 <HAL_GPIO_TogglePin>
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
	...

0800139c <shellInit>:

/**
  * @brief  Send a stating message
  * @retval None
  */
void shellInit(void){
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	226c      	movs	r2, #108	; 0x6c
 80013a6:	4906      	ldr	r1, [pc, #24]	; (80013c0 <shellInit+0x24>)
 80013a8:	4806      	ldr	r0, [pc, #24]	; (80013c4 <shellInit+0x28>)
 80013aa:	f006 f850 	bl	800744e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80013ae:	f04f 33ff 	mov.w	r3, #4294967295
 80013b2:	221a      	movs	r2, #26
 80013b4:	4904      	ldr	r1, [pc, #16]	; (80013c8 <shellInit+0x2c>)
 80013b6:	4803      	ldr	r0, [pc, #12]	; (80013c4 <shellInit+0x28>)
 80013b8:	f006 f849 	bl	800744e <HAL_UART_Transmit>
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	0800ab90 	.word	0x0800ab90
 80013c4:	200003c8 	.word	0x200003c8
 80013c8:	0800ab74 	.word	0x0800ab74

080013cc <shellPrompt>:

/**
  * @brief  Send the prompt
  * @retval None
  */
void shellPrompt(void){
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80013d0:	f04f 33ff 	mov.w	r3, #4294967295
 80013d4:	221a      	movs	r2, #26
 80013d6:	4903      	ldr	r1, [pc, #12]	; (80013e4 <shellPrompt+0x18>)
 80013d8:	4803      	ldr	r0, [pc, #12]	; (80013e8 <shellPrompt+0x1c>)
 80013da:	f006 f838 	bl	800744e <HAL_UART_Transmit>
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	0800ab74 	.word	0x0800ab74
 80013e8:	200003c8 	.word	0x200003c8

080013ec <shellCmdNotFound>:

/**
  * @brief  Send the default message if the command is not found
  * @retval None
  */
void shellCmdNotFound(void){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80013f0:	f04f 33ff 	mov.w	r3, #4294967295
 80013f4:	2214      	movs	r2, #20
 80013f6:	4903      	ldr	r1, [pc, #12]	; (8001404 <shellCmdNotFound+0x18>)
 80013f8:	4803      	ldr	r0, [pc, #12]	; (8001408 <shellCmdNotFound+0x1c>)
 80013fa:	f006 f828 	bl	800744e <HAL_UART_Transmit>
}
 80013fe:	bf00      	nop
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	0800ae70 	.word	0x0800ae70
 8001408:	200003c8 	.word	0x200003c8

0800140c <shellGetChar>:

/**
  * @brief  Function called for saving the new character and call and setup argc and argv variable if ENTER is pressed
  * @retval 1 if a new command is available, 0 if not.
  */
uint8_t shellGetChar(void){
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
	uint8_t newCmdReady = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	71fb      	strb	r3, [r7, #7]
	char* token;

	switch(uartRxBuffer[0]){
 8001416:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <shellGetChar+0xc8>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b08      	cmp	r3, #8
 800141c:	d030      	beq.n	8001480 <shellGetChar+0x74>
 800141e:	2b0d      	cmp	r3, #13
 8001420:	d140      	bne.n	80014a4 <shellGetChar+0x98>
		// If Enter, update argc and argv
	case ASCII_CR:
		HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	2203      	movs	r2, #3
 8001428:	492b      	ldr	r1, [pc, #172]	; (80014d8 <shellGetChar+0xcc>)
 800142a:	482c      	ldr	r0, [pc, #176]	; (80014dc <shellGetChar+0xd0>)
 800142c:	f006 f80f 	bl	800744e <HAL_UART_Transmit>
		cmdBuffer[idxCmd] = '\0';
 8001430:	4b2b      	ldr	r3, [pc, #172]	; (80014e0 <shellGetChar+0xd4>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	4b2b      	ldr	r3, [pc, #172]	; (80014e4 <shellGetChar+0xd8>)
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]
		argc = 0;
 800143c:	4b2a      	ldr	r3, [pc, #168]	; (80014e8 <shellGetChar+0xdc>)
 800143e:	2200      	movs	r2, #0
 8001440:	701a      	strb	r2, [r3, #0]
		token = (char*)strtok(cmdBuffer, " ");
 8001442:	492a      	ldr	r1, [pc, #168]	; (80014ec <shellGetChar+0xe0>)
 8001444:	4827      	ldr	r0, [pc, #156]	; (80014e4 <shellGetChar+0xd8>)
 8001446:	f008 f8ab 	bl	80095a0 <strtok>
 800144a:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 800144c:	e00f      	b.n	800146e <shellGetChar+0x62>
			argv[argc++] = token;
 800144e:	4b26      	ldr	r3, [pc, #152]	; (80014e8 <shellGetChar+0xdc>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	b2d1      	uxtb	r1, r2
 8001456:	4a24      	ldr	r2, [pc, #144]	; (80014e8 <shellGetChar+0xdc>)
 8001458:	7011      	strb	r1, [r2, #0]
 800145a:	4619      	mov	r1, r3
 800145c:	4a24      	ldr	r2, [pc, #144]	; (80014f0 <shellGetChar+0xe4>)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			token = (char*)strtok(NULL, " ");
 8001464:	4921      	ldr	r1, [pc, #132]	; (80014ec <shellGetChar+0xe0>)
 8001466:	2000      	movs	r0, #0
 8001468:	f008 f89a 	bl	80095a0 <strtok>
 800146c:	6038      	str	r0, [r7, #0]
		while(token!=NULL){
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ec      	bne.n	800144e <shellGetChar+0x42>
		}

		idxCmd = 0;
 8001474:	4b1a      	ldr	r3, [pc, #104]	; (80014e0 <shellGetChar+0xd4>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
		newCmdReady = 1;
 800147a:	2301      	movs	r3, #1
 800147c:	71fb      	strb	r3, [r7, #7]
		break;
 800147e:	e023      	b.n	80014c8 <shellGetChar+0xbc>
		// Delete last character if "return" is pressed
	case ASCII_BS:
		cmdBuffer[idxCmd--] = '\0';
 8001480:	4b17      	ldr	r3, [pc, #92]	; (80014e0 <shellGetChar+0xd4>)
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	b2d1      	uxtb	r1, r2
 8001488:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <shellGetChar+0xd4>)
 800148a:	7011      	strb	r1, [r2, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <shellGetChar+0xd8>)
 8001490:	2100      	movs	r1, #0
 8001492:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 8001494:	f04f 33ff 	mov.w	r3, #4294967295
 8001498:	2201      	movs	r2, #1
 800149a:	490e      	ldr	r1, [pc, #56]	; (80014d4 <shellGetChar+0xc8>)
 800149c:	480f      	ldr	r0, [pc, #60]	; (80014dc <shellGetChar+0xd0>)
 800149e:	f005 ffd6 	bl	800744e <HAL_UART_Transmit>
		break;
 80014a2:	e011      	b.n	80014c8 <shellGetChar+0xbc>
		// Default state : add new character to the command buffer
	default:
		cmdBuffer[idxCmd++] = uartRxBuffer[0];
 80014a4:	4b0e      	ldr	r3, [pc, #56]	; (80014e0 <shellGetChar+0xd4>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	1c5a      	adds	r2, r3, #1
 80014aa:	b2d1      	uxtb	r1, r2
 80014ac:	4a0c      	ldr	r2, [pc, #48]	; (80014e0 <shellGetChar+0xd4>)
 80014ae:	7011      	strb	r1, [r2, #0]
 80014b0:	461a      	mov	r2, r3
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <shellGetChar+0xc8>)
 80014b4:	7819      	ldrb	r1, [r3, #0]
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <shellGetChar+0xd8>)
 80014b8:	5499      	strb	r1, [r3, r2]
		HAL_UART_Transmit(&huart2, uartRxBuffer, 1, HAL_MAX_DELAY);
 80014ba:	f04f 33ff 	mov.w	r3, #4294967295
 80014be:	2201      	movs	r2, #1
 80014c0:	4904      	ldr	r1, [pc, #16]	; (80014d4 <shellGetChar+0xc8>)
 80014c2:	4806      	ldr	r0, [pc, #24]	; (80014dc <shellGetChar+0xd0>)
 80014c4:	f005 ffc3 	bl	800744e <HAL_UART_Transmit>
	}

	return newCmdReady;
 80014c8:	79fb      	ldrb	r3, [r7, #7]
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000380 	.word	0x20000380
 80014d8:	0800abfc 	.word	0x0800abfc
 80014dc:	200003c8 	.word	0x200003c8
 80014e0:	20000278 	.word	0x20000278
 80014e4:	20000238 	.word	0x20000238
 80014e8:	200002a0 	.word	0x200002a0
 80014ec:	0800aaf4 	.word	0x0800aaf4
 80014f0:	2000027c 	.word	0x2000027c
 80014f4:	00000000 	.word	0x00000000

080014f8 <shellExec>:

/**
  * @brief  Call function depends of the value of argc and argv
  * @retval None
  */
void shellExec(void){
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
	if(strcmp(argv[0],"set")==0){
 80014fe:	4b7e      	ldr	r3, [pc, #504]	; (80016f8 <shellExec+0x200>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	497e      	ldr	r1, [pc, #504]	; (80016fc <shellExec+0x204>)
 8001504:	4618      	mov	r0, r3
 8001506:	f7fe fe8b 	bl	8000220 <strcmp>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d16f      	bne.n	80015f0 <shellExec+0xf8>
		if(strcmp(argv[1],"PA5")==0 && ((strcmp(argv[2],"0")==0)||(strcmp(argv[2],"1")==0)) ){
 8001510:	4b79      	ldr	r3, [pc, #484]	; (80016f8 <shellExec+0x200>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	497a      	ldr	r1, [pc, #488]	; (8001700 <shellExec+0x208>)
 8001516:	4618      	mov	r0, r3
 8001518:	f7fe fe82 	bl	8000220 <strcmp>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d137      	bne.n	8001592 <shellExec+0x9a>
 8001522:	4b75      	ldr	r3, [pc, #468]	; (80016f8 <shellExec+0x200>)
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	4977      	ldr	r1, [pc, #476]	; (8001704 <shellExec+0x20c>)
 8001528:	4618      	mov	r0, r3
 800152a:	f7fe fe79 	bl	8000220 <strcmp>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <shellExec+0x4e>
 8001534:	4b70      	ldr	r3, [pc, #448]	; (80016f8 <shellExec+0x200>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4973      	ldr	r1, [pc, #460]	; (8001708 <shellExec+0x210>)
 800153a:	4618      	mov	r0, r3
 800153c:	f7fe fe70 	bl	8000220 <strcmp>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d125      	bne.n	8001592 <shellExec+0x9a>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, atoi(argv[2]));
 8001546:	4b6c      	ldr	r3, [pc, #432]	; (80016f8 <shellExec+0x200>)
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	4618      	mov	r0, r3
 800154c:	f007 ffa6 	bl	800949c <atoi>
 8001550:	4603      	mov	r3, r0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	461a      	mov	r2, r3
 8001556:	2120      	movs	r1, #32
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f003 f94a 	bl	80047f4 <HAL_GPIO_WritePin>
			stringSize = snprintf((char*)uartTxBuffer,UART_TX_BUFFER_SIZE,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8001560:	4b65      	ldr	r3, [pc, #404]	; (80016f8 <shellExec+0x200>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	4618      	mov	r0, r3
 8001566:	f007 ff99 	bl	800949c <atoi>
 800156a:	4603      	mov	r3, r0
 800156c:	4a67      	ldr	r2, [pc, #412]	; (800170c <shellExec+0x214>)
 800156e:	2140      	movs	r1, #64	; 0x40
 8001570:	4867      	ldr	r0, [pc, #412]	; (8001710 <shellExec+0x218>)
 8001572:	f007 ffe1 	bl	8009538 <sniprintf>
 8001576:	4603      	mov	r3, r0
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b66      	ldr	r3, [pc, #408]	; (8001714 <shellExec+0x21c>)
 800157c:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, stringSize, HAL_MAX_DELAY);
 800157e:	4b65      	ldr	r3, [pc, #404]	; (8001714 <shellExec+0x21c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	b29a      	uxth	r2, r3
 8001584:	f04f 33ff 	mov.w	r3, #4294967295
 8001588:	4961      	ldr	r1, [pc, #388]	; (8001710 <shellExec+0x218>)
 800158a:	4863      	ldr	r0, [pc, #396]	; (8001718 <shellExec+0x220>)
 800158c:	f005 ff5f 	bl	800744e <HAL_UART_Transmit>
 8001590:	e148      	b.n	8001824 <shellExec+0x32c>
		}
		else if(strcmp(argv[1],"speed")==0){
 8001592:	4b59      	ldr	r3, [pc, #356]	; (80016f8 <shellExec+0x200>)
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	4961      	ldr	r1, [pc, #388]	; (800171c <shellExec+0x224>)
 8001598:	4618      	mov	r0, r3
 800159a:	f7fe fe41 	bl	8000220 <strcmp>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d122      	bne.n	80015ea <shellExec+0xf2>
			if(atoi(argv[2])==0 && strcmp(argv[2],"0")!=0){
 80015a4:	4b54      	ldr	r3, [pc, #336]	; (80016f8 <shellExec+0x200>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f007 ff77 	bl	800949c <atoi>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d110      	bne.n	80015d6 <shellExec+0xde>
 80015b4:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <shellExec+0x200>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4952      	ldr	r1, [pc, #328]	; (8001704 <shellExec+0x20c>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f7fe fe30 	bl	8000220 <strcmp>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <shellExec+0xde>
				HAL_UART_Transmit(&huart2, motorSpeedInst, sizeof(motorSpeedInst), HAL_MAX_DELAY);
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	2230      	movs	r2, #48	; 0x30
 80015cc:	4954      	ldr	r1, [pc, #336]	; (8001720 <shellExec+0x228>)
 80015ce:	4852      	ldr	r0, [pc, #328]	; (8001718 <shellExec+0x220>)
 80015d0:	f005 ff3d 	bl	800744e <HAL_UART_Transmit>
 80015d4:	e126      	b.n	8001824 <shellExec+0x32c>
			}
			else{
				motorSetSpeed(atoi(argv[2]));
 80015d6:	4b48      	ldr	r3, [pc, #288]	; (80016f8 <shellExec+0x200>)
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	4618      	mov	r0, r3
 80015dc:	f007 ff5e 	bl	800949c <atoi>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff fecc 	bl	8001380 <motorSetSpeed>


	else{
		shellCmdNotFound();
	}
}
 80015e8:	e11c      	b.n	8001824 <shellExec+0x32c>
			shellCmdNotFound();
 80015ea:	f7ff feff 	bl	80013ec <shellCmdNotFound>
}
 80015ee:	e119      	b.n	8001824 <shellExec+0x32c>
	else if(strcmp(argv[0],"help")==0)
 80015f0:	4b41      	ldr	r3, [pc, #260]	; (80016f8 <shellExec+0x200>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	494b      	ldr	r1, [pc, #300]	; (8001724 <shellExec+0x22c>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fe12 	bl	8000220 <strcmp>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d108      	bne.n	8001614 <shellExec+0x11c>
		HAL_UART_Transmit(&huart2, help, sizeof(help), HAL_MAX_DELAY);
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	f44f 7281 	mov.w	r2, #258	; 0x102
 800160a:	4947      	ldr	r1, [pc, #284]	; (8001728 <shellExec+0x230>)
 800160c:	4842      	ldr	r0, [pc, #264]	; (8001718 <shellExec+0x220>)
 800160e:	f005 ff1e 	bl	800744e <HAL_UART_Transmit>
}
 8001612:	e107      	b.n	8001824 <shellExec+0x32c>
	else if(strcmp(argv[0],"pinout")==0)
 8001614:	4b38      	ldr	r3, [pc, #224]	; (80016f8 <shellExec+0x200>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4944      	ldr	r1, [pc, #272]	; (800172c <shellExec+0x234>)
 800161a:	4618      	mov	r0, r3
 800161c:	f7fe fe00 	bl	8000220 <strcmp>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d108      	bne.n	8001638 <shellExec+0x140>
		HAL_UART_Transmit(&huart2, pinout, sizeof(pinout), HAL_MAX_DELAY);
 8001626:	f04f 33ff 	mov.w	r3, #4294967295
 800162a:	f44f 7281 	mov.w	r2, #258	; 0x102
 800162e:	4940      	ldr	r1, [pc, #256]	; (8001730 <shellExec+0x238>)
 8001630:	4839      	ldr	r0, [pc, #228]	; (8001718 <shellExec+0x220>)
 8001632:	f005 ff0c 	bl	800744e <HAL_UART_Transmit>
}
 8001636:	e0f5      	b.n	8001824 <shellExec+0x32c>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"on")==0))
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <shellExec+0x200>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	493d      	ldr	r1, [pc, #244]	; (8001734 <shellExec+0x23c>)
 800163e:	4618      	mov	r0, r3
 8001640:	f7fe fdee 	bl	8000220 <strcmp>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d112      	bne.n	8001670 <shellExec+0x178>
 800164a:	4b2b      	ldr	r3, [pc, #172]	; (80016f8 <shellExec+0x200>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	493a      	ldr	r1, [pc, #232]	; (8001738 <shellExec+0x240>)
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe fde5 	bl	8000220 <strcmp>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d109      	bne.n	8001670 <shellExec+0x178>
		HAL_UART_Transmit(&huart2, powerOn, sizeof(powerOn), HAL_MAX_DELAY);
 800165c:	f04f 33ff 	mov.w	r3, #4294967295
 8001660:	221a      	movs	r2, #26
 8001662:	4936      	ldr	r1, [pc, #216]	; (800173c <shellExec+0x244>)
 8001664:	482c      	ldr	r0, [pc, #176]	; (8001718 <shellExec+0x220>)
 8001666:	f005 fef2 	bl	800744e <HAL_UART_Transmit>
		motorPowerOn();
 800166a:	f7ff fe31 	bl	80012d0 <motorPowerOn>
 800166e:	e0d9      	b.n	8001824 <shellExec+0x32c>
	else if((strcmp(argv[0],"power")==0)&&(strcmp(argv[1],"off")==0))
 8001670:	4b21      	ldr	r3, [pc, #132]	; (80016f8 <shellExec+0x200>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	492f      	ldr	r1, [pc, #188]	; (8001734 <shellExec+0x23c>)
 8001676:	4618      	mov	r0, r3
 8001678:	f7fe fdd2 	bl	8000220 <strcmp>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d112      	bne.n	80016a8 <shellExec+0x1b0>
 8001682:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <shellExec+0x200>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	492e      	ldr	r1, [pc, #184]	; (8001740 <shellExec+0x248>)
 8001688:	4618      	mov	r0, r3
 800168a:	f7fe fdc9 	bl	8000220 <strcmp>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d109      	bne.n	80016a8 <shellExec+0x1b0>
		HAL_UART_Transmit(&huart2, powerOff, sizeof(powerOff), HAL_MAX_DELAY);
 8001694:	f04f 33ff 	mov.w	r3, #4294967295
 8001698:	221b      	movs	r2, #27
 800169a:	492a      	ldr	r1, [pc, #168]	; (8001744 <shellExec+0x24c>)
 800169c:	481e      	ldr	r0, [pc, #120]	; (8001718 <shellExec+0x220>)
 800169e:	f005 fed6 	bl	800744e <HAL_UART_Transmit>
		motorPowerOff();
 80016a2:	f7ff fe31 	bl	8001308 <motorPowerOff>
 80016a6:	e0bd      	b.n	8001824 <shellExec+0x32c>
	else if((strcmp(argv[0],"alpha")==0))
 80016a8:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <shellExec+0x200>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4926      	ldr	r1, [pc, #152]	; (8001748 <shellExec+0x250>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	f7fe fdb6 	bl	8000220 <strcmp>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d110      	bne.n	80016dc <shellExec+0x1e4>
		HAL_UART_Transmit(&huart2, alpha, sizeof(alpha), HAL_MAX_DELAY);
 80016ba:	f04f 33ff 	mov.w	r3, #4294967295
 80016be:	2210      	movs	r2, #16
 80016c0:	4922      	ldr	r1, [pc, #136]	; (800174c <shellExec+0x254>)
 80016c2:	4815      	ldr	r0, [pc, #84]	; (8001718 <shellExec+0x220>)
 80016c4:	f005 fec3 	bl	800744e <HAL_UART_Transmit>
		setdutycycle(atoi(argv[1]));
 80016c8:	4b0b      	ldr	r3, [pc, #44]	; (80016f8 <shellExec+0x200>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f007 fee5 	bl	800949c <atoi>
 80016d2:	4603      	mov	r3, r0
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff fe21 	bl	800131c <setdutycycle>
}
 80016da:	e0a3      	b.n	8001824 <shellExec+0x32c>
	else if((strcmp(argv[0],"mesure")==0))
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <shellExec+0x200>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	491b      	ldr	r1, [pc, #108]	; (8001750 <shellExec+0x258>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f7fe fd9c 	bl	8000220 <strcmp>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f040 8097 	bne.w	800181e <shellExec+0x326>
		for(int i=0; i<10;i++){
 80016f0:	2300      	movs	r3, #0
 80016f2:	607b      	str	r3, [r7, #4]
 80016f4:	e03b      	b.n	800176e <shellExec+0x276>
 80016f6:	bf00      	nop
 80016f8:	2000027c 	.word	0x2000027c
 80016fc:	0800aaf8 	.word	0x0800aaf8
 8001700:	0800aafc 	.word	0x0800aafc
 8001704:	0800ab00 	.word	0x0800ab00
 8001708:	0800ab04 	.word	0x0800ab04
 800170c:	0800ab08 	.word	0x0800ab08
 8001710:	20000384 	.word	0x20000384
 8001714:	200003c4 	.word	0x200003c4
 8001718:	200003c8 	.word	0x200003c8
 800171c:	0800ab24 	.word	0x0800ab24
 8001720:	0800ae40 	.word	0x0800ae40
 8001724:	0800ab2c 	.word	0x0800ab2c
 8001728:	0800ac00 	.word	0x0800ac00
 800172c:	0800ab34 	.word	0x0800ab34
 8001730:	0800ad04 	.word	0x0800ad04
 8001734:	0800ab3c 	.word	0x0800ab3c
 8001738:	0800ab44 	.word	0x0800ab44
 800173c:	0800ae08 	.word	0x0800ae08
 8001740:	0800ab48 	.word	0x0800ab48
 8001744:	0800ae24 	.word	0x0800ae24
 8001748:	0800ab4c 	.word	0x0800ab4c
 800174c:	0800ae84 	.word	0x0800ae84
 8001750:	0800ab54 	.word	0x0800ab54
			sum=sum+adc_values[i];
 8001754:	4a38      	ldr	r2, [pc, #224]	; (8001838 <shellExec+0x340>)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800175c:	4b37      	ldr	r3, [pc, #220]	; (800183c <shellExec+0x344>)
 800175e:	881b      	ldrh	r3, [r3, #0]
 8001760:	4413      	add	r3, r2
 8001762:	b29a      	uxth	r2, r3
 8001764:	4b35      	ldr	r3, [pc, #212]	; (800183c <shellExec+0x344>)
 8001766:	801a      	strh	r2, [r3, #0]
		for(int i=0; i<10;i++){
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3301      	adds	r3, #1
 800176c:	607b      	str	r3, [r7, #4]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b09      	cmp	r3, #9
 8001772:	ddef      	ble.n	8001754 <shellExec+0x25c>
		mesure_moyenne = sum/10;
 8001774:	4b31      	ldr	r3, [pc, #196]	; (800183c <shellExec+0x344>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	4a31      	ldr	r2, [pc, #196]	; (8001840 <shellExec+0x348>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	08db      	lsrs	r3, r3, #3
 8001780:	b29b      	uxth	r3, r3
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fefe 	bl	8000584 <__aeabi_i2d>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	492d      	ldr	r1, [pc, #180]	; (8001844 <shellExec+0x34c>)
 800178e:	e9c1 2300 	strd	r2, r3, [r1]
		mesure_voltage =((double)mesure_moyenne*3.3)/4096.0;
 8001792:	4b2c      	ldr	r3, [pc, #176]	; (8001844 <shellExec+0x34c>)
 8001794:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001798:	a325      	add	r3, pc, #148	; (adr r3, 8001830 <shellExec+0x338>)
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	f7fe ff5b 	bl	8000658 <__aeabi_dmul>
 80017a2:	4602      	mov	r2, r0
 80017a4:	460b      	mov	r3, r1
 80017a6:	4610      	mov	r0, r2
 80017a8:	4619      	mov	r1, r3
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	4b26      	ldr	r3, [pc, #152]	; (8001848 <shellExec+0x350>)
 80017b0:	f7ff f87c 	bl	80008ac <__aeabi_ddiv>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4924      	ldr	r1, [pc, #144]	; (800184c <shellExec+0x354>)
 80017ba:	e9c1 2300 	strd	r2, r3, [r1]
		Imoyen =(mesure_voltage-2.5)*12;
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <shellExec+0x354>)
 80017c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <shellExec+0x358>)
 80017ca:	f7fe fd8d 	bl	80002e8 <__aeabi_dsub>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	4610      	mov	r0, r2
 80017d4:	4619      	mov	r1, r3
 80017d6:	f04f 0200 	mov.w	r2, #0
 80017da:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <shellExec+0x35c>)
 80017dc:	f7fe ff3c 	bl	8000658 <__aeabi_dmul>
 80017e0:	4602      	mov	r2, r0
 80017e2:	460b      	mov	r3, r1
 80017e4:	4610      	mov	r0, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	f7ff f948 	bl	8000a7c <__aeabi_d2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <shellExec+0x360>)
 80017f0:	6013      	str	r3, [r2, #0]
		printf(chaine,"le courant vaut %f \r\n",Imoyen);
 80017f2:	4b19      	ldr	r3, [pc, #100]	; (8001858 <shellExec+0x360>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7fe fed6 	bl	80005a8 <__aeabi_f2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4916      	ldr	r1, [pc, #88]	; (800185c <shellExec+0x364>)
 8001802:	4817      	ldr	r0, [pc, #92]	; (8001860 <shellExec+0x368>)
 8001804:	f007 fe80 	bl	8009508 <iprintf>
		HAL_UART_Transmit(&huart2, chaine,  sizeof(chaine),HAL_MAX_DELAY);
 8001808:	f04f 33ff 	mov.w	r3, #4294967295
 800180c:	221e      	movs	r2, #30
 800180e:	4914      	ldr	r1, [pc, #80]	; (8001860 <shellExec+0x368>)
 8001810:	4814      	ldr	r0, [pc, #80]	; (8001864 <shellExec+0x36c>)
 8001812:	f005 fe1c 	bl	800744e <HAL_UART_Transmit>
		sum = 0;
 8001816:	4b09      	ldr	r3, [pc, #36]	; (800183c <shellExec+0x344>)
 8001818:	2200      	movs	r2, #0
 800181a:	801a      	strh	r2, [r3, #0]
}
 800181c:	e002      	b.n	8001824 <shellExec+0x32c>
		shellCmdNotFound();
 800181e:	f7ff fde5 	bl	80013ec <shellCmdNotFound>
}
 8001822:	e7ff      	b.n	8001824 <shellExec+0x32c>
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	f3af 8000 	nop.w
 8001830:	66666666 	.word	0x66666666
 8001834:	400a6666 	.word	0x400a6666
 8001838:	20000224 	.word	0x20000224
 800183c:	200002dc 	.word	0x200002dc
 8001840:	cccccccd 	.word	0xcccccccd
 8001844:	200002c8 	.word	0x200002c8
 8001848:	40b00000 	.word	0x40b00000
 800184c:	200002d0 	.word	0x200002d0
 8001850:	40040000 	.word	0x40040000
 8001854:	40280000 	.word	0x40280000
 8001858:	200002d8 	.word	0x200002d8
 800185c:	0800ab5c 	.word	0x0800ab5c
 8001860:	200002a4 	.word	0x200002a4
 8001864:	200003c8 	.word	0x200003c8

08001868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186e:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_MspInit+0x44>)
 8001870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001872:	4a0e      	ldr	r2, [pc, #56]	; (80018ac <HAL_MspInit+0x44>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6613      	str	r3, [r2, #96]	; 0x60
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_MspInit+0x44>)
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	607b      	str	r3, [r7, #4]
 8001884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001886:	4b09      	ldr	r3, [pc, #36]	; (80018ac <HAL_MspInit+0x44>)
 8001888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800188a:	4a08      	ldr	r2, [pc, #32]	; (80018ac <HAL_MspInit+0x44>)
 800188c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001890:	6593      	str	r3, [r2, #88]	; 0x58
 8001892:	4b06      	ldr	r3, [pc, #24]	; (80018ac <HAL_MspInit+0x44>)
 8001894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800189a:	603b      	str	r3, [r7, #0]
 800189c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800189e:	f003 f8a3 	bl	80049e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08c      	sub	sp, #48	; 0x30
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80018c0:	2300      	movs	r3, #0
 80018c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018c6:	4b2d      	ldr	r3, [pc, #180]	; (800197c <HAL_InitTick+0xcc>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ca:	4a2c      	ldr	r2, [pc, #176]	; (800197c <HAL_InitTick+0xcc>)
 80018cc:	f043 0310 	orr.w	r3, r3, #16
 80018d0:	6593      	str	r3, [r2, #88]	; 0x58
 80018d2:	4b2a      	ldr	r3, [pc, #168]	; (800197c <HAL_InitTick+0xcc>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	60bb      	str	r3, [r7, #8]
 80018dc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018de:	f107 020c 	add.w	r2, r7, #12
 80018e2:	f107 0310 	add.w	r3, r7, #16
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 fd7b 	bl	80053e4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018ee:	f003 fd4d 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 80018f2:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	4a22      	ldr	r2, [pc, #136]	; (8001980 <HAL_InitTick+0xd0>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	0c9b      	lsrs	r3, r3, #18
 80018fe:	3b01      	subs	r3, #1
 8001900:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001902:	4b20      	ldr	r3, [pc, #128]	; (8001984 <HAL_InitTick+0xd4>)
 8001904:	4a20      	ldr	r2, [pc, #128]	; (8001988 <HAL_InitTick+0xd8>)
 8001906:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <HAL_InitTick+0xd4>)
 800190a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800190e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001910:	4a1c      	ldr	r2, [pc, #112]	; (8001984 <HAL_InitTick+0xd4>)
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_InitTick+0xd4>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <HAL_InitTick+0xd4>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001922:	4818      	ldr	r0, [pc, #96]	; (8001984 <HAL_InitTick+0xd4>)
 8001924:	f004 f824 	bl	8005970 <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800192e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11b      	bne.n	800196e <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001936:	4813      	ldr	r0, [pc, #76]	; (8001984 <HAL_InitTick+0xd4>)
 8001938:	f004 f872 	bl	8005a20 <HAL_TIM_Base_Start_IT>
 800193c:	4603      	mov	r3, r0
 800193e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001942:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001946:	2b00      	cmp	r3, #0
 8001948:	d111      	bne.n	800196e <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800194a:	2036      	movs	r0, #54	; 0x36
 800194c:	f002 fa90 	bl	8003e70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2b0f      	cmp	r3, #15
 8001954:	d808      	bhi.n	8001968 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001956:	2200      	movs	r2, #0
 8001958:	6879      	ldr	r1, [r7, #4]
 800195a:	2036      	movs	r0, #54	; 0x36
 800195c:	f002 fa6e 	bl	8003e3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001960:	4a0a      	ldr	r2, [pc, #40]	; (800198c <HAL_InitTick+0xdc>)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6013      	str	r3, [r2, #0]
 8001966:	e002      	b.n	800196e <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800196e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001972:	4618      	mov	r0, r3
 8001974:	3730      	adds	r7, #48	; 0x30
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000
 8001980:	431bde83 	.word	0x431bde83
 8001984:	200002e0 	.word	0x200002e0
 8001988:	40001000 	.word	0x40001000
 800198c:	20000004 	.word	0x20000004

08001990 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <NMI_Handler+0x4>

08001996 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800199a:	e7fe      	b.n	800199a <HardFault_Handler+0x4>

0800199c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019a0:	e7fe      	b.n	80019a0 <MemManage_Handler+0x4>

080019a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019a6:	e7fe      	b.n	80019a6 <BusFault_Handler+0x4>

080019a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019ac:	e7fe      	b.n	80019ac <UsageFault_Handler+0x4>

080019ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ba:	4770      	bx	lr

080019bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ca:	b480      	push	{r7}
 80019cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ce:	bf00      	nop
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019dc:	bf00      	nop
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
	...

080019e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019ec:	4802      	ldr	r0, [pc, #8]	; (80019f8 <DMA1_Channel1_IRQHandler+0x10>)
 80019ee:	f002 fc30 	bl	8004252 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019f2:	bf00      	nop
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	200000f8 	.word	0x200000f8

080019fc <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001a00:	4802      	ldr	r0, [pc, #8]	; (8001a0c <ADC1_2_IRQHandler+0x10>)
 8001a02:	f001 f845 	bl	8002a90 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	2000008c 	.word	0x2000008c

08001a10 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */


  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <TIM1_CC_IRQHandler+0x10>)
 8001a16:	f004 f9ef 	bl	8005df8 <HAL_TIM_IRQHandler>
         HAL_ADC_Start_IT(&hadc2);// start the ADC conversion
         uint32_t adc_value = HAL_ADC_GetValue(&hadc2);  // read the conversion value
         amperage = ((adc_value/4096)-2.5)*12;  // do something with the value (e.g. update a variable or send it over a communication interface)
       }*/
  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000330 	.word	0x20000330

08001a24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a28:	4802      	ldr	r0, [pc, #8]	; (8001a34 <USART2_IRQHandler+0x10>)
 8001a2a:	f005 fdfd 	bl	8007628 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a2e:	bf00      	nop
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200003c8 	.word	0x200003c8

08001a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUTTON_Pin);
 8001a3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a40:	f002 ff0a 	bl	8004858 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a4c:	4802      	ldr	r0, [pc, #8]	; (8001a58 <TIM6_DAC_IRQHandler+0x10>)
 8001a4e:	f004 f9d3 	bl	8005df8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200002e0 	.word	0x200002e0

08001a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
	return 1;
 8001a60:	2301      	movs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_kill>:

int _kill(int pid, int sig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001a76:	f007 fd15 	bl	80094a4 <__errno>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2216      	movs	r2, #22
 8001a7e:	601a      	str	r2, [r3, #0]
	return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_exit>:

void _exit (int status)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffe7 	bl	8001a6c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001a9e:	e7fe      	b.n	8001a9e <_exit+0x12>

08001aa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	60f8      	str	r0, [r7, #12]
 8001aa8:	60b9      	str	r1, [r7, #8]
 8001aaa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	e00a      	b.n	8001ac8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ab2:	f3af 8000 	nop.w
 8001ab6:	4601      	mov	r1, r0
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	1c5a      	adds	r2, r3, #1
 8001abc:	60ba      	str	r2, [r7, #8]
 8001abe:	b2ca      	uxtb	r2, r1
 8001ac0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	dbf0      	blt.n	8001ab2 <_read+0x12>
	}

return len;
 8001ad0:	687b      	ldr	r3, [r7, #4]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	e009      	b.n	8001b00 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	1c5a      	adds	r2, r3, #1
 8001af0:	60ba      	str	r2, [r7, #8]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	dbf1      	blt.n	8001aec <_write+0x12>
	}
	return len;
 8001b08:	687b      	ldr	r3, [r7, #4]
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <_close>:

int _close(int file)
{
 8001b12:	b480      	push	{r7}
 8001b14:	b083      	sub	sp, #12
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	6078      	str	r0, [r7, #4]
	return -1;
 8001b1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
 8001b32:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b3a:	605a      	str	r2, [r3, #4]
	return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	370c      	adds	r7, #12
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr

08001b4a <_isatty>:

int _isatty(int file)
{
 8001b4a:	b480      	push	{r7}
 8001b4c:	b083      	sub	sp, #12
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
	return 1;
 8001b52:	2301      	movs	r3, #1
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr

08001b60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
	return 0;
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b84:	4a14      	ldr	r2, [pc, #80]	; (8001bd8 <_sbrk+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <_sbrk+0x60>)
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	4b13      	ldr	r3, [pc, #76]	; (8001be0 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b98:	4b11      	ldr	r3, [pc, #68]	; (8001be0 <_sbrk+0x64>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	; (8001be4 <_sbrk+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4b10      	ldr	r3, [pc, #64]	; (8001be0 <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d207      	bcs.n	8001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bac:	f007 fc7a 	bl	80094a4 <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	e009      	b.n	8001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	; (8001be0 <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	; (8001be0 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a05      	ldr	r2, [pc, #20]	; (8001be0 <_sbrk+0x64>)
 8001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20020000 	.word	0x20020000
 8001bdc:	00000400 	.word	0x00000400
 8001be0:	2000032c 	.word	0x2000032c
 8001be4:	20000470 	.word	0x20000470

08001be8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	; (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b09c      	sub	sp, #112	; 0x70
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c30:	2200      	movs	r2, #0
 8001c32:	601a      	str	r2, [r3, #0]
 8001c34:	605a      	str	r2, [r3, #4]
 8001c36:	609a      	str	r2, [r3, #8]
 8001c38:	60da      	str	r2, [r3, #12]
 8001c3a:	611a      	str	r2, [r3, #16]
 8001c3c:	615a      	str	r2, [r3, #20]
 8001c3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2234      	movs	r2, #52	; 0x34
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 fc56 	bl	80094f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c4c:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001c4e:	4a51      	ldr	r2, [pc, #324]	; (8001d94 <MX_TIM1_Init+0x188>)
 8001c50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c52:	4b4f      	ldr	r3, [pc, #316]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001c58:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5312;
 8001c5e:	4b4c      	ldr	r3, [pc, #304]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001c60:	f44f 52a6 	mov.w	r2, #5312	; 0x14c0
 8001c64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c66:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c6c:	4b48      	ldr	r3, [pc, #288]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001c74:	2280      	movs	r2, #128	; 0x80
 8001c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c78:	4845      	ldr	r0, [pc, #276]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001c7a:	f003 fe79 	bl	8005970 <HAL_TIM_Base_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c84:	f7ff fb1e 	bl	80012c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c8c:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c8e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001c92:	4619      	mov	r1, r3
 8001c94:	483e      	ldr	r0, [pc, #248]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001c96:	f004 fb43 	bl	8006320 <HAL_TIM_ConfigClockSource>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001ca0:	f7ff fb10 	bl	80012c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001ca4:	483a      	ldr	r0, [pc, #232]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001ca6:	f003 ff33 	bl	8005b10 <HAL_TIM_PWM_Init>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001cb0:	f7ff fb08 	bl	80012c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001cc0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4832      	ldr	r0, [pc, #200]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001cc8:	f005 f9be 	bl	8007048 <HAL_TIMEx_MasterConfigSynchronization>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001cd2:	f7ff faf7 	bl	80012c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cd6:	2360      	movs	r3, #96	; 0x60
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2656;
 8001cda:	f44f 6326 	mov.w	r3, #2656	; 0xa60
 8001cde:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cf4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4824      	ldr	r0, [pc, #144]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001cfe:	f004 f9fb 	bl	80060f8 <HAL_TIM_PWM_ConfigChannel>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001d08:	f7ff fadc 	bl	80012c4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim1, TIM_CHANNEL_1);
 8001d0c:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	699a      	ldr	r2, [r3, #24]
 8001d12:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f022 0208 	bic.w	r2, r2, #8
 8001d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d20:	2204      	movs	r2, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	481a      	ldr	r0, [pc, #104]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001d26:	f004 f9e7 	bl	80060f8 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8001d30:	f7ff fac8 	bl	80012c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 205;
 8001d40:	23cd      	movs	r3, #205	; 0xcd
 8001d42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d60:	2300      	movs	r3, #0
 8001d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d64:	2300      	movs	r3, #0
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d6c:	1d3b      	adds	r3, r7, #4
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4807      	ldr	r0, [pc, #28]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001d72:	f005 f9ff 	bl	8007174 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d76:	4603      	mov	r3, r0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d001      	beq.n	8001d80 <MX_TIM1_Init+0x174>
  {
    Error_Handler();
 8001d7c:	f7ff faa2 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d80:	4803      	ldr	r0, [pc, #12]	; (8001d90 <MX_TIM1_Init+0x184>)
 8001d82:	f000 f82f 	bl	8001de4 <HAL_TIM_MspPostInit>

}
 8001d86:	bf00      	nop
 8001d88:	3770      	adds	r7, #112	; 0x70
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000330 	.word	0x20000330
 8001d94:	40012c00 	.word	0x40012c00

08001d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <HAL_TIM_Base_MspInit+0x44>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d113      	bne.n	8001dd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_TIM_Base_MspInit+0x48>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	4a0c      	ldr	r2, [pc, #48]	; (8001de0 <HAL_TIM_Base_MspInit+0x48>)
 8001db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001db4:	6613      	str	r3, [r2, #96]	; 0x60
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_TIM_Base_MspInit+0x48>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	201b      	movs	r0, #27
 8001dc8:	f002 f838 	bl	8003e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001dcc:	201b      	movs	r0, #27
 8001dce:	f002 f84f 	bl	8003e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40012c00 	.word	0x40012c00
 8001de0:	40021000 	.word	0x40021000

08001de4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b088      	sub	sp, #32
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	f107 030c 	add.w	r3, r7, #12
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]
 8001df4:	605a      	str	r2, [r3, #4]
 8001df6:	609a      	str	r2, [r3, #8]
 8001df8:	60da      	str	r2, [r3, #12]
 8001dfa:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a12      	ldr	r2, [pc, #72]	; (8001e4c <HAL_TIM_MspPostInit+0x68>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d11d      	bne.n	8001e42 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e06:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_TIM_MspPostInit+0x6c>)
 8001e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e0a:	4a11      	ldr	r2, [pc, #68]	; (8001e50 <HAL_TIM_MspPostInit+0x6c>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e12:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <HAL_TIM_MspPostInit+0x6c>)
 8001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60bb      	str	r3, [r7, #8]
 8001e1c:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001e1e:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001e22:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e24:	2302      	movs	r3, #2
 8001e26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e30:	2306      	movs	r3, #6
 8001e32:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e34:	f107 030c 	add.w	r3, r7, #12
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e3e:	f002 fb57 	bl	80044f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001e42:	bf00      	nop
 8001e44:	3720      	adds	r7, #32
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40012c00 	.word	0x40012c00
 8001e50:	40021000 	.word	0x40021000

08001e54 <HAL_UART_RxCpltCallback>:

/**
  * @brief  Function called at each new character received
  * @retval None
  */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <HAL_UART_RxCpltCallback+0x20>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001e62:	2201      	movs	r2, #1
 8001e64:	4904      	ldr	r1, [pc, #16]	; (8001e78 <HAL_UART_RxCpltCallback+0x24>)
 8001e66:	4805      	ldr	r0, [pc, #20]	; (8001e7c <HAL_UART_RxCpltCallback+0x28>)
 8001e68:	f005 fb88 	bl	800757c <HAL_UART_Receive_IT>
}
 8001e6c:	bf00      	nop
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	2000037c 	.word	0x2000037c
 8001e78:	20000380 	.word	0x20000380
 8001e7c:	200003c8 	.word	0x200003c8

08001e80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e84:	4b22      	ldr	r3, [pc, #136]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001e86:	4a23      	ldr	r2, [pc, #140]	; (8001f14 <MX_USART2_UART_Init+0x94>)
 8001e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e8a:	4b21      	ldr	r3, [pc, #132]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001e8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e92:	4b1f      	ldr	r3, [pc, #124]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e98:	4b1d      	ldr	r3, [pc, #116]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e9e:	4b1c      	ldr	r3, [pc, #112]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	4b1a      	ldr	r3, [pc, #104]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001ea6:	220c      	movs	r2, #12
 8001ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eaa:	4b19      	ldr	r3, [pc, #100]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001eb0:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb6:	4b16      	ldr	r3, [pc, #88]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ebc:	4b14      	ldr	r3, [pc, #80]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ec2:	4b13      	ldr	r3, [pc, #76]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ec8:	4811      	ldr	r0, [pc, #68]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001eca:	f005 fa70 	bl	80073ae <HAL_UART_Init>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ed4:	f7ff f9f6 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ed8:	2100      	movs	r1, #0
 8001eda:	480d      	ldr	r0, [pc, #52]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001edc:	f007 fa13 	bl	8009306 <HAL_UARTEx_SetTxFifoThreshold>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ee6:	f7ff f9ed 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eea:	2100      	movs	r1, #0
 8001eec:	4808      	ldr	r0, [pc, #32]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001eee:	f007 fa48 	bl	8009382 <HAL_UARTEx_SetRxFifoThreshold>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001ef8:	f7ff f9e4 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001efc:	4804      	ldr	r0, [pc, #16]	; (8001f10 <MX_USART2_UART_Init+0x90>)
 8001efe:	f007 f9c9 	bl	8009294 <HAL_UARTEx_DisableFifoMode>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f08:	f7ff f9dc 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f0c:	bf00      	nop
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	200003c8 	.word	0x200003c8
 8001f14:	40004400 	.word	0x40004400

08001f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b09e      	sub	sp, #120	; 0x78
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f30:	f107 0310 	add.w	r3, r7, #16
 8001f34:	2254      	movs	r2, #84	; 0x54
 8001f36:	2100      	movs	r1, #0
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f007 fadd 	bl	80094f8 <memset>
  if(uartHandle->Instance==USART2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a23      	ldr	r2, [pc, #140]	; (8001fd0 <HAL_UART_MspInit+0xb8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d13e      	bne.n	8001fc6 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fabd 	bl	80054d4 <HAL_RCCEx_PeriphCLKConfig>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d001      	beq.n	8001f64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001f60:	f7ff f9b0 	bl	80012c4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f64:	4b1b      	ldr	r3, [pc, #108]	; (8001fd4 <HAL_UART_MspInit+0xbc>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f68:	4a1a      	ldr	r2, [pc, #104]	; (8001fd4 <HAL_UART_MspInit+0xbc>)
 8001f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f70:	4b18      	ldr	r3, [pc, #96]	; (8001fd4 <HAL_UART_MspInit+0xbc>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f7c:	4b15      	ldr	r3, [pc, #84]	; (8001fd4 <HAL_UART_MspInit+0xbc>)
 8001f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f80:	4a14      	ldr	r2, [pc, #80]	; (8001fd4 <HAL_UART_MspInit+0xbc>)
 8001f82:	f043 0301 	orr.w	r3, r3, #1
 8001f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f88:	4b12      	ldr	r3, [pc, #72]	; (8001fd4 <HAL_UART_MspInit+0xbc>)
 8001f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f8c:	f003 0301 	and.w	r3, r3, #1
 8001f90:	60bb      	str	r3, [r7, #8]
 8001f92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f94:	230c      	movs	r3, #12
 8001f96:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f98:	2302      	movs	r3, #2
 8001f9a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001fa4:	2307      	movs	r3, #7
 8001fa6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fa8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001fac:	4619      	mov	r1, r3
 8001fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fb2:	f002 fa9d 	bl	80044f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2026      	movs	r0, #38	; 0x26
 8001fbc:	f001 ff3e 	bl	8003e3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001fc0:	2026      	movs	r0, #38	; 0x26
 8001fc2:	f001 ff55 	bl	8003e70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001fc6:	bf00      	nop
 8001fc8:	3778      	adds	r7, #120	; 0x78
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	40004400 	.word	0x40004400
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <Reset_Handler>:
 8001fd8:	480d      	ldr	r0, [pc, #52]	; (8002010 <LoopForever+0x2>)
 8001fda:	4685      	mov	sp, r0
 8001fdc:	480d      	ldr	r0, [pc, #52]	; (8002014 <LoopForever+0x6>)
 8001fde:	490e      	ldr	r1, [pc, #56]	; (8002018 <LoopForever+0xa>)
 8001fe0:	4a0e      	ldr	r2, [pc, #56]	; (800201c <LoopForever+0xe>)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:
 8001fe6:	58d4      	ldr	r4, [r2, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:
 8001fec:	18c4      	adds	r4, r0, r3
 8001fee:	428c      	cmp	r4, r1
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	; (8002020 <LoopForever+0x12>)
 8001ff4:	4c0b      	ldr	r4, [pc, #44]	; (8002024 <LoopForever+0x16>)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:
 8001ffa:	6013      	str	r3, [r2, #0]
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:
 8001ffe:	42a2      	cmp	r2, r4
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>
 8002002:	f7ff fdf1 	bl	8001be8 <SystemInit>
 8002006:	f007 fa53 	bl	80094b0 <__libc_init_array>
 800200a:	f7ff f8ab 	bl	8001164 <main>

0800200e <LoopForever>:
 800200e:	e7fe      	b.n	800200e <LoopForever>
 8002010:	20020000 	.word	0x20020000
 8002014:	20000000 	.word	0x20000000
 8002018:	20000070 	.word	0x20000070
 800201c:	0800b130 	.word	0x0800b130
 8002020:	20000070 	.word	0x20000070
 8002024:	2000046c 	.word	0x2000046c

08002028 <ADC3_IRQHandler>:
 8002028:	e7fe      	b.n	8002028 <ADC3_IRQHandler>

0800202a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	b082      	sub	sp, #8
 800202e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002034:	2003      	movs	r0, #3
 8002036:	f001 fef6 	bl	8003e26 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800203a:	200f      	movs	r0, #15
 800203c:	f7ff fc38 	bl	80018b0 <HAL_InitTick>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d002      	beq.n	800204c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	71fb      	strb	r3, [r7, #7]
 800204a:	e001      	b.n	8002050 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800204c:	f7ff fc0c 	bl	8001868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002050:	79fb      	ldrb	r3, [r7, #7]

}
 8002052:	4618      	mov	r0, r3
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
	...

0800205c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002060:	4b05      	ldr	r3, [pc, #20]	; (8002078 <HAL_IncTick+0x1c>)
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b05      	ldr	r3, [pc, #20]	; (800207c <HAL_IncTick+0x20>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4413      	add	r3, r2
 800206a:	4a03      	ldr	r2, [pc, #12]	; (8002078 <HAL_IncTick+0x1c>)
 800206c:	6013      	str	r3, [r2, #0]
}
 800206e:	bf00      	nop
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	20000458 	.word	0x20000458
 800207c:	20000008 	.word	0x20000008

08002080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return uwTick;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_GetTick+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000458 	.word	0x20000458

08002098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020a0:	f7ff ffee 	bl	8002080 <HAL_GetTick>
 80020a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020b0:	d004      	beq.n	80020bc <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80020b2:	4b09      	ldr	r3, [pc, #36]	; (80020d8 <HAL_Delay+0x40>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	4413      	add	r3, r2
 80020ba:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020bc:	bf00      	nop
 80020be:	f7ff ffdf 	bl	8002080 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d8f7      	bhi.n	80020be <HAL_Delay+0x26>
  {
  }
}
 80020ce:	bf00      	nop
 80020d0:	bf00      	nop
 80020d2:	3710      	adds	r7, #16
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000008 	.word	0x20000008

080020dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]
}
 80020f6:	bf00      	nop
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	431a      	orrs	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	609a      	str	r2, [r3, #8]
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002138:	4618      	mov	r0, r3
 800213a:	370c      	adds	r7, #12
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr

08002144 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	60b9      	str	r1, [r7, #8]
 800214e:	607a      	str	r2, [r7, #4]
 8002150:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	3360      	adds	r3, #96	; 0x60
 8002156:	461a      	mov	r2, r3
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <LL_ADC_SetOffset+0x44>)
 8002166:	4013      	ands	r3, r2
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	430a      	orrs	r2, r1
 8002172:	4313      	orrs	r3, r2
 8002174:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr
 8002188:	03fff000 	.word	0x03fff000

0800218c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800218c:	b480      	push	{r7}
 800218e:	b085      	sub	sp, #20
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3360      	adds	r3, #96	; 0x60
 800219a:	461a      	mov	r2, r3
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	3360      	adds	r3, #96	; 0x60
 80021c8:	461a      	mov	r2, r3
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	431a      	orrs	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021e2:	bf00      	nop
 80021e4:	371c      	adds	r7, #28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b087      	sub	sp, #28
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	60f8      	str	r0, [r7, #12]
 80021f6:	60b9      	str	r1, [r7, #8]
 80021f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3360      	adds	r3, #96	; 0x60
 80021fe:	461a      	mov	r2, r3
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	431a      	orrs	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002218:	bf00      	nop
 800221a:	371c      	adds	r7, #28
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002224:	b480      	push	{r7}
 8002226:	b087      	sub	sp, #28
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	3360      	adds	r3, #96	; 0x60
 8002234:	461a      	mov	r2, r3
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	431a      	orrs	r2, r3
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr

0800225a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
 8002262:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	431a      	orrs	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	615a      	str	r2, [r3, #20]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b087      	sub	sp, #28
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	60f8      	str	r0, [r7, #12]
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	3330      	adds	r3, #48	; 0x30
 80022b6:	461a      	mov	r2, r3
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	0a1b      	lsrs	r3, r3, #8
 80022bc:	009b      	lsls	r3, r3, #2
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	4413      	add	r3, r2
 80022c4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	211f      	movs	r1, #31
 80022d2:	fa01 f303 	lsl.w	r3, r1, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	401a      	ands	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	0e9b      	lsrs	r3, r3, #26
 80022de:	f003 011f 	and.w	r1, r3, #31
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	f003 031f 	and.w	r3, r3, #31
 80022e8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ec:	431a      	orrs	r2, r3
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80022f2:	bf00      	nop
 80022f4:	371c      	adds	r7, #28
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr

080022fe <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002312:	2301      	movs	r3, #1
 8002314:	e000      	b.n	8002318 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002316:	2300      	movs	r3, #0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3314      	adds	r3, #20
 8002334:	461a      	mov	r2, r3
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	0e5b      	lsrs	r3, r3, #25
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	4413      	add	r3, r2
 8002342:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0d1b      	lsrs	r3, r3, #20
 800234c:	f003 031f 	and.w	r3, r3, #31
 8002350:	2107      	movs	r1, #7
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43db      	mvns	r3, r3
 8002358:	401a      	ands	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	0d1b      	lsrs	r3, r3, #20
 800235e:	f003 031f 	and.w	r3, r3, #31
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	fa01 f303 	lsl.w	r3, r1, r3
 8002368:	431a      	orrs	r2, r3
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800236e:	bf00      	nop
 8002370:	371c      	adds	r7, #28
 8002372:	46bd      	mov	sp, r7
 8002374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002378:	4770      	bx	lr
	...

0800237c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800237c:	b480      	push	{r7}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	4a0f      	ldr	r2, [pc, #60]	; (80023c8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d10a      	bne.n	80023a6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800239c:	431a      	orrs	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80023a4:	e00a      	b.n	80023bc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b2:	43db      	mvns	r3, r3
 80023b4:	401a      	ands	r2, r3
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80023bc:	bf00      	nop
 80023be:	3714      	adds	r7, #20
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	407f0000 	.word	0x407f0000

080023cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f003 031f 	and.w	r3, r3, #31
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002404:	b480      	push	{r7}
 8002406:	b083      	sub	sp, #12
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002414:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	6093      	str	r3, [r2, #8]
}
 800241c:	bf00      	nop
 800241e:	370c      	adds	r7, #12
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800243c:	d101      	bne.n	8002442 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002460:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002464:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002488:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800248c:	d101      	bne.n	8002492 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024b4:	f043 0201 	orr.w	r2, r3, #1
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0301 	and.w	r3, r3, #1
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <LL_ADC_IsEnabled+0x18>
 80024dc:	2301      	movs	r3, #1
 80024de:	e000      	b.n	80024e2 <LL_ADC_IsEnabled+0x1a>
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr

080024ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b083      	sub	sp, #12
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002502:	f043 0204 	orr.w	r2, r3, #4
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800250a:	bf00      	nop
 800250c:	370c      	adds	r7, #12
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr

08002516 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d101      	bne.n	800252e <LL_ADC_REG_IsConversionOngoing+0x18>
 800252a:	2301      	movs	r3, #1
 800252c:	e000      	b.n	8002530 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b08      	cmp	r3, #8
 800254e:	d101      	bne.n	8002554 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002564:	b590      	push	{r4, r7, lr}
 8002566:	b089      	sub	sp, #36	; 0x24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002570:	2300      	movs	r3, #0
 8002572:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e1af      	b.n	80028de <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7fe fcbf 	bl	8000f10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff3f 	bl	8002428 <LL_ADC_IsDeepPowerDownEnabled>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d004      	beq.n	80025ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff ff25 	bl	8002404 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7ff ff5a 	bl	8002478 <LL_ADC_IsInternalRegulatorEnabled>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d115      	bne.n	80025f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff3e 	bl	8002450 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025d4:	4b9f      	ldr	r3, [pc, #636]	; (8002854 <HAL_ADC_Init+0x2f0>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	099b      	lsrs	r3, r3, #6
 80025da:	4a9f      	ldr	r2, [pc, #636]	; (8002858 <HAL_ADC_Init+0x2f4>)
 80025dc:	fba2 2303 	umull	r2, r3, r2, r3
 80025e0:	099b      	lsrs	r3, r3, #6
 80025e2:	3301      	adds	r3, #1
 80025e4:	005b      	lsls	r3, r3, #1
 80025e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025e8:	e002      	b.n	80025f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f9      	bne.n	80025ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff3c 	bl	8002478 <LL_ADC_IsInternalRegulatorEnabled>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10d      	bne.n	8002622 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260a:	f043 0210 	orr.w	r2, r3, #16
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002616:	f043 0201 	orr.w	r2, r3, #1
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff75 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 800262c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	2b00      	cmp	r3, #0
 8002638:	f040 8148 	bne.w	80028cc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b00      	cmp	r3, #0
 8002640:	f040 8144 	bne.w	80028cc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800264c:	f043 0202 	orr.w	r2, r3, #2
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff ff35 	bl	80024c8 <LL_ADC_IsEnabled>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d141      	bne.n	80026e8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800266c:	d004      	beq.n	8002678 <HAL_ADC_Init+0x114>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a7a      	ldr	r2, [pc, #488]	; (800285c <HAL_ADC_Init+0x2f8>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d10f      	bne.n	8002698 <HAL_ADC_Init+0x134>
 8002678:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800267c:	f7ff ff24 	bl	80024c8 <LL_ADC_IsEnabled>
 8002680:	4604      	mov	r4, r0
 8002682:	4876      	ldr	r0, [pc, #472]	; (800285c <HAL_ADC_Init+0x2f8>)
 8002684:	f7ff ff20 	bl	80024c8 <LL_ADC_IsEnabled>
 8002688:	4603      	mov	r3, r0
 800268a:	4323      	orrs	r3, r4
 800268c:	2b00      	cmp	r3, #0
 800268e:	bf0c      	ite	eq
 8002690:	2301      	moveq	r3, #1
 8002692:	2300      	movne	r3, #0
 8002694:	b2db      	uxtb	r3, r3
 8002696:	e012      	b.n	80026be <HAL_ADC_Init+0x15a>
 8002698:	4871      	ldr	r0, [pc, #452]	; (8002860 <HAL_ADC_Init+0x2fc>)
 800269a:	f7ff ff15 	bl	80024c8 <LL_ADC_IsEnabled>
 800269e:	4604      	mov	r4, r0
 80026a0:	4870      	ldr	r0, [pc, #448]	; (8002864 <HAL_ADC_Init+0x300>)
 80026a2:	f7ff ff11 	bl	80024c8 <LL_ADC_IsEnabled>
 80026a6:	4603      	mov	r3, r0
 80026a8:	431c      	orrs	r4, r3
 80026aa:	486f      	ldr	r0, [pc, #444]	; (8002868 <HAL_ADC_Init+0x304>)
 80026ac:	f7ff ff0c 	bl	80024c8 <LL_ADC_IsEnabled>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4323      	orrs	r3, r4
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf0c      	ite	eq
 80026b8:	2301      	moveq	r3, #1
 80026ba:	2300      	movne	r3, #0
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d012      	beq.n	80026e8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026ca:	d004      	beq.n	80026d6 <HAL_ADC_Init+0x172>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a62      	ldr	r2, [pc, #392]	; (800285c <HAL_ADC_Init+0x2f8>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d101      	bne.n	80026da <HAL_ADC_Init+0x176>
 80026d6:	4a65      	ldr	r2, [pc, #404]	; (800286c <HAL_ADC_Init+0x308>)
 80026d8:	e000      	b.n	80026dc <HAL_ADC_Init+0x178>
 80026da:	4a65      	ldr	r2, [pc, #404]	; (8002870 <HAL_ADC_Init+0x30c>)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	4619      	mov	r1, r3
 80026e2:	4610      	mov	r0, r2
 80026e4:	f7ff fcfa 	bl	80020dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7f5b      	ldrb	r3, [r3, #29]
 80026ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80026fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002706:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002708:	4313      	orrs	r3, r2
 800270a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002712:	2b01      	cmp	r3, #1
 8002714:	d106      	bne.n	8002724 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800271a:	3b01      	subs	r3, #1
 800271c:	045b      	lsls	r3, r3, #17
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d009      	beq.n	8002740 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002730:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68da      	ldr	r2, [r3, #12]
 8002746:	4b4b      	ldr	r3, [pc, #300]	; (8002874 <HAL_ADC_Init+0x310>)
 8002748:	4013      	ands	r3, r2
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	69b9      	ldr	r1, [r7, #24]
 8002750:	430b      	orrs	r3, r1
 8002752:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff fed1 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002774:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff fede 	bl	800253c <LL_ADC_INJ_IsConversionOngoing>
 8002780:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d17f      	bne.n	8002888 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d17c      	bne.n	8002888 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002792:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800279a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800279c:	4313      	orrs	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027aa:	f023 0302 	bic.w	r3, r3, #2
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	6812      	ldr	r2, [r2, #0]
 80027b2:	69b9      	ldr	r1, [r7, #24]
 80027b4:	430b      	orrs	r3, r1
 80027b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d017      	beq.n	80027f0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80027d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80027dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6911      	ldr	r1, [r2, #16]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	430b      	orrs	r3, r1
 80027ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80027ee:	e013      	b.n	8002818 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	691a      	ldr	r2, [r3, #16]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80027fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6812      	ldr	r2, [r2, #0]
 800280c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002810:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002814:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800281e:	2b01      	cmp	r3, #1
 8002820:	d12a      	bne.n	8002878 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800282c:	f023 0304 	bic.w	r3, r3, #4
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002838:	4311      	orrs	r1, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800283e:	4311      	orrs	r1, r2
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002844:	430a      	orrs	r2, r1
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f042 0201 	orr.w	r2, r2, #1
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	e019      	b.n	8002888 <HAL_ADC_Init+0x324>
 8002854:	20000000 	.word	0x20000000
 8002858:	053e2d63 	.word	0x053e2d63
 800285c:	50000100 	.word	0x50000100
 8002860:	50000400 	.word	0x50000400
 8002864:	50000500 	.word	0x50000500
 8002868:	50000600 	.word	0x50000600
 800286c:	50000300 	.word	0x50000300
 8002870:	50000700 	.word	0x50000700
 8002874:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	691a      	ldr	r2, [r3, #16]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d10c      	bne.n	80028aa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002896:	f023 010f 	bic.w	r1, r3, #15
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	1e5a      	subs	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
 80028a8:	e007      	b.n	80028ba <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f022 020f 	bic.w	r2, r2, #15
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028be:	f023 0303 	bic.w	r3, r3, #3
 80028c2:	f043 0201 	orr.w	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80028ca:	e007      	b.n	80028dc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d0:	f043 0210 	orr.w	r2, r3, #16
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3724      	adds	r7, #36	; 0x24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	bf00      	nop

080028e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b086      	sub	sp, #24
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028fc:	d004      	beq.n	8002908 <HAL_ADC_Start_DMA+0x20>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a5a      	ldr	r2, [pc, #360]	; (8002a6c <HAL_ADC_Start_DMA+0x184>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d101      	bne.n	800290c <HAL_ADC_Start_DMA+0x24>
 8002908:	4b59      	ldr	r3, [pc, #356]	; (8002a70 <HAL_ADC_Start_DMA+0x188>)
 800290a:	e000      	b.n	800290e <HAL_ADC_Start_DMA+0x26>
 800290c:	4b59      	ldr	r3, [pc, #356]	; (8002a74 <HAL_ADC_Start_DMA+0x18c>)
 800290e:	4618      	mov	r0, r3
 8002910:	f7ff fd5c 	bl	80023cc <LL_ADC_GetMultimode>
 8002914:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fdfb 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	f040 809b 	bne.w	8002a5e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_ADC_Start_DMA+0x4e>
 8002932:	2302      	movs	r3, #2
 8002934:	e096      	b.n	8002a64 <HAL_ADC_Start_DMA+0x17c>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2201      	movs	r2, #1
 800293a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a4d      	ldr	r2, [pc, #308]	; (8002a78 <HAL_ADC_Start_DMA+0x190>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d008      	beq.n	800295a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b05      	cmp	r3, #5
 8002952:	d002      	beq.n	800295a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b09      	cmp	r3, #9
 8002958:	d17a      	bne.n	8002a50 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800295a:	68f8      	ldr	r0, [r7, #12]
 800295c:	f000 ff60 	bl	8003820 <ADC_Enable>
 8002960:	4603      	mov	r3, r0
 8002962:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002964:	7dfb      	ldrb	r3, [r7, #23]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d16d      	bne.n	8002a46 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a3a      	ldr	r2, [pc, #232]	; (8002a6c <HAL_ADC_Start_DMA+0x184>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d009      	beq.n	800299c <HAL_ADC_Start_DMA+0xb4>
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a3b      	ldr	r2, [pc, #236]	; (8002a7c <HAL_ADC_Start_DMA+0x194>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d002      	beq.n	8002998 <HAL_ADC_Start_DMA+0xb0>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	e003      	b.n	80029a0 <HAL_ADC_Start_DMA+0xb8>
 8002998:	4b39      	ldr	r3, [pc, #228]	; (8002a80 <HAL_ADC_Start_DMA+0x198>)
 800299a:	e001      	b.n	80029a0 <HAL_ADC_Start_DMA+0xb8>
 800299c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	6812      	ldr	r2, [r2, #0]
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d002      	beq.n	80029ae <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d105      	bne.n	80029ba <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d006      	beq.n	80029d4 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80029ca:	f023 0206 	bic.w	r2, r3, #6
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	661a      	str	r2, [r3, #96]	; 0x60
 80029d2:	e002      	b.n	80029da <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029de:	4a29      	ldr	r2, [pc, #164]	; (8002a84 <HAL_ADC_Start_DMA+0x19c>)
 80029e0:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e6:	4a28      	ldr	r2, [pc, #160]	; (8002a88 <HAL_ADC_Start_DMA+0x1a0>)
 80029e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	4a27      	ldr	r2, [pc, #156]	; (8002a8c <HAL_ADC_Start_DMA+0x1a4>)
 80029f0:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	221c      	movs	r2, #28
 80029f8:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	2200      	movs	r2, #0
 80029fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f042 0210 	orr.w	r2, r2, #16
 8002a10:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68da      	ldr	r2, [r3, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0201 	orr.w	r2, r2, #1
 8002a20:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3340      	adds	r3, #64	; 0x40
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	68ba      	ldr	r2, [r7, #8]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f001 fad3 	bl	8003fdc <HAL_DMA_Start_IT>
 8002a36:	4603      	mov	r3, r0
 8002a38:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff fd55 	bl	80024ee <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002a44:	e00d      	b.n	8002a62 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8002a4e:	e008      	b.n	8002a62 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002a5c:	e001      	b.n	8002a62 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a5e:	2302      	movs	r3, #2
 8002a60:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	50000100 	.word	0x50000100
 8002a70:	50000300 	.word	0x50000300
 8002a74:	50000700 	.word	0x50000700
 8002a78:	50000600 	.word	0x50000600
 8002a7c:	50000500 	.word	0x50000500
 8002a80:	50000400 	.word	0x50000400
 8002a84:	080038e5 	.word	0x080038e5
 8002a88:	080039bd 	.word	0x080039bd
 8002a8c:	080039d9 	.word	0x080039d9

08002a90 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002a98:	2300      	movs	r3, #0
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab4:	d004      	beq.n	8002ac0 <HAL_ADC_IRQHandler+0x30>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a8e      	ldr	r2, [pc, #568]	; (8002cf4 <HAL_ADC_IRQHandler+0x264>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d101      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0x34>
 8002ac0:	4b8d      	ldr	r3, [pc, #564]	; (8002cf8 <HAL_ADC_IRQHandler+0x268>)
 8002ac2:	e000      	b.n	8002ac6 <HAL_ADC_IRQHandler+0x36>
 8002ac4:	4b8d      	ldr	r3, [pc, #564]	; (8002cfc <HAL_ADC_IRQHandler+0x26c>)
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f7ff fc80 	bl	80023cc <LL_ADC_GetMultimode>
 8002acc:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d017      	beq.n	8002b08 <HAL_ADC_IRQHandler+0x78>
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d012      	beq.n	8002b08 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae6:	f003 0310 	and.w	r3, r3, #16
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af2:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 ffd4 	bl	8003aa8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2202      	movs	r2, #2
 8002b06:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d004      	beq.n	8002b1c <HAL_ADC_IRQHandler+0x8c>
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	f003 0304 	and.w	r3, r3, #4
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10b      	bne.n	8002b34 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	f000 8094 	beq.w	8002c50 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	f003 0308 	and.w	r3, r3, #8
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 808e 	beq.w	8002c50 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	f003 0310 	and.w	r3, r3, #16
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fb95 	bl	8002280 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d072      	beq.n	8002c42 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a64      	ldr	r2, [pc, #400]	; (8002cf4 <HAL_ADC_IRQHandler+0x264>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d009      	beq.n	8002b7a <HAL_ADC_IRQHandler+0xea>
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a65      	ldr	r2, [pc, #404]	; (8002d00 <HAL_ADC_IRQHandler+0x270>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d002      	beq.n	8002b76 <HAL_ADC_IRQHandler+0xe6>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	e003      	b.n	8002b7e <HAL_ADC_IRQHandler+0xee>
 8002b76:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <HAL_ADC_IRQHandler+0x274>)
 8002b78:	e001      	b.n	8002b7e <HAL_ADC_IRQHandler+0xee>
 8002b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b7e:	687a      	ldr	r2, [r7, #4]
 8002b80:	6812      	ldr	r2, [r2, #0]
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d008      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	2b05      	cmp	r3, #5
 8002b90:	d002      	beq.n	8002b98 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2b09      	cmp	r3, #9
 8002b96:	d104      	bne.n	8002ba2 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	623b      	str	r3, [r7, #32]
 8002ba0:	e014      	b.n	8002bcc <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a53      	ldr	r2, [pc, #332]	; (8002cf4 <HAL_ADC_IRQHandler+0x264>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_ADC_IRQHandler+0x130>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a53      	ldr	r2, [pc, #332]	; (8002d00 <HAL_ADC_IRQHandler+0x270>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d002      	beq.n	8002bbc <HAL_ADC_IRQHandler+0x12c>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	e003      	b.n	8002bc4 <HAL_ADC_IRQHandler+0x134>
 8002bbc:	4b51      	ldr	r3, [pc, #324]	; (8002d04 <HAL_ADC_IRQHandler+0x274>)
 8002bbe:	e001      	b.n	8002bc4 <HAL_ADC_IRQHandler+0x134>
 8002bc0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002bc4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d135      	bne.n	8002c42 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0308 	and.w	r3, r3, #8
 8002be0:	2b08      	cmp	r3, #8
 8002be2:	d12e      	bne.n	8002c42 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff fc94 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d11a      	bne.n	8002c2a <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 020c 	bic.w	r2, r2, #12
 8002c02:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d112      	bne.n	8002c42 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	f043 0201 	orr.w	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c28:	e00b      	b.n	8002c42 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2e:	f043 0210 	orr.w	r2, r3, #16
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c3a:	f043 0201 	orr.w	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f984 	bl	8002f50 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	220c      	movs	r2, #12
 8002c4e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c50:	69fb      	ldr	r3, [r7, #28]
 8002c52:	f003 0320 	and.w	r3, r3, #32
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d004      	beq.n	8002c64 <HAL_ADC_IRQHandler+0x1d4>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d10b      	bne.n	8002c7c <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80b3 	beq.w	8002dd6 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80ad 	beq.w	8002dd6 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c80:	f003 0310 	and.w	r3, r3, #16
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d105      	bne.n	8002c94 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fb30 	bl	80022fe <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c9e:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff faeb 	bl	8002280 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002caa:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a10      	ldr	r2, [pc, #64]	; (8002cf4 <HAL_ADC_IRQHandler+0x264>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d009      	beq.n	8002cca <HAL_ADC_IRQHandler+0x23a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a11      	ldr	r2, [pc, #68]	; (8002d00 <HAL_ADC_IRQHandler+0x270>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d002      	beq.n	8002cc6 <HAL_ADC_IRQHandler+0x236>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	e003      	b.n	8002cce <HAL_ADC_IRQHandler+0x23e>
 8002cc6:	4b0f      	ldr	r3, [pc, #60]	; (8002d04 <HAL_ADC_IRQHandler+0x274>)
 8002cc8:	e001      	b.n	8002cce <HAL_ADC_IRQHandler+0x23e>
 8002cca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6812      	ldr	r2, [r2, #0]
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d008      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d005      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	2b06      	cmp	r3, #6
 8002ce0:	d002      	beq.n	8002ce8 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	2b07      	cmp	r3, #7
 8002ce6:	d10f      	bne.n	8002d08 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	623b      	str	r3, [r7, #32]
 8002cf0:	e01f      	b.n	8002d32 <HAL_ADC_IRQHandler+0x2a2>
 8002cf2:	bf00      	nop
 8002cf4:	50000100 	.word	0x50000100
 8002cf8:	50000300 	.word	0x50000300
 8002cfc:	50000700 	.word	0x50000700
 8002d00:	50000500 	.word	0x50000500
 8002d04:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a8b      	ldr	r2, [pc, #556]	; (8002f3c <HAL_ADC_IRQHandler+0x4ac>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d009      	beq.n	8002d26 <HAL_ADC_IRQHandler+0x296>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a8a      	ldr	r2, [pc, #552]	; (8002f40 <HAL_ADC_IRQHandler+0x4b0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d002      	beq.n	8002d22 <HAL_ADC_IRQHandler+0x292>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	e003      	b.n	8002d2a <HAL_ADC_IRQHandler+0x29a>
 8002d22:	4b88      	ldr	r3, [pc, #544]	; (8002f44 <HAL_ADC_IRQHandler+0x4b4>)
 8002d24:	e001      	b.n	8002d2a <HAL_ADC_IRQHandler+0x29a>
 8002d26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d2a:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d047      	beq.n	8002dc8 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d007      	beq.n	8002d52 <HAL_ADC_IRQHandler+0x2c2>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d03f      	beq.n	8002dc8 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002d48:	6a3b      	ldr	r3, [r7, #32]
 8002d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d13a      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d133      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d12e      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7ff fbe4 	bl	800253c <LL_ADC_INJ_IsConversionOngoing>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d11a      	bne.n	8002db0 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d88:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d112      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	f043 0201 	orr.w	r2, r3, #1
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	65da      	str	r2, [r3, #92]	; 0x5c
 8002dae:	e00b      	b.n	8002dc8 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	f043 0210 	orr.w	r2, r3, #16
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc0:	f043 0201 	orr.w	r2, r3, #1
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 fe45 	bl	8003a58 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2260      	movs	r2, #96	; 0x60
 8002dd4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d011      	beq.n	8002e04 <HAL_ADC_IRQHandler+0x374>
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00c      	beq.n	8002e04 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f8be 	bl	8002f78 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2280      	movs	r2, #128	; 0x80
 8002e02:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d012      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x3a4>
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d00d      	beq.n	8002e34 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fe2b 	bl	8003a80 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e32:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d012      	beq.n	8002e64 <HAL_ADC_IRQHandler+0x3d4>
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00d      	beq.n	8002e64 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 fe1d 	bl	8003a94 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e62:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	f003 0310 	and.w	r3, r3, #16
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d043      	beq.n	8002ef6 <HAL_ADC_IRQHandler+0x466>
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	f003 0310 	and.w	r3, r3, #16
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d03e      	beq.n	8002ef6 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002e80:	2301      	movs	r3, #1
 8002e82:	627b      	str	r3, [r7, #36]	; 0x24
 8002e84:	e021      	b.n	8002eca <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002e94:	d004      	beq.n	8002ea0 <HAL_ADC_IRQHandler+0x410>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a28      	ldr	r2, [pc, #160]	; (8002f3c <HAL_ADC_IRQHandler+0x4ac>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d101      	bne.n	8002ea4 <HAL_ADC_IRQHandler+0x414>
 8002ea0:	4b29      	ldr	r3, [pc, #164]	; (8002f48 <HAL_ADC_IRQHandler+0x4b8>)
 8002ea2:	e000      	b.n	8002ea6 <HAL_ADC_IRQHandler+0x416>
 8002ea4:	4b29      	ldr	r3, [pc, #164]	; (8002f4c <HAL_ADC_IRQHandler+0x4bc>)
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7ff fa9e 	bl	80023e8 <LL_ADC_GetMultiDMATransfer>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00b      	beq.n	8002eca <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002eb6:	e008      	b.n	8002eca <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d10e      	bne.n	8002eee <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee0:	f043 0202 	orr.w	r2, r3, #2
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f84f 	bl	8002f8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2210      	movs	r2, #16
 8002ef4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d018      	beq.n	8002f32 <HAL_ADC_IRQHandler+0x4a2>
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d013      	beq.n	8002f32 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f0e:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f1a:	f043 0208 	orr.w	r2, r3, #8
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f2a:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 fd9d 	bl	8003a6c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002f32:	bf00      	nop
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	50000100 	.word	0x50000100
 8002f40:	50000500 	.word	0x50000500
 8002f44:	50000400 	.word	0x50000400
 8002f48:	50000300 	.word	0x50000300
 8002f4c:	50000700 	.word	0x50000700

08002f50 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b0b6      	sub	sp, #216	; 0xd8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d102      	bne.n	8002fc4 <HAL_ADC_ConfigChannel+0x24>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	f000 bc13 	b.w	80037ea <HAL_ADC_ConfigChannel+0x84a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff faa0 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	f040 83f3 	bne.w	80037c4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6818      	ldr	r0, [r3, #0]
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	6859      	ldr	r1, [r3, #4]
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f7ff f95b 	bl	80022a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7ff fa8e 	bl	8002516 <LL_ADC_REG_IsConversionOngoing>
 8002ffa:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fa9a 	bl	800253c <LL_ADC_INJ_IsConversionOngoing>
 8003008:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800300c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003010:	2b00      	cmp	r3, #0
 8003012:	f040 81d9 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003016:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800301a:	2b00      	cmp	r3, #0
 800301c:	f040 81d4 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003028:	d10f      	bne.n	800304a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6818      	ldr	r0, [r3, #0]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2200      	movs	r2, #0
 8003034:	4619      	mov	r1, r3
 8003036:	f7ff f975 	bl	8002324 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff f909 	bl	800225a <LL_ADC_SetSamplingTimeCommonConfig>
 8003048:	e00e      	b.n	8003068 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6818      	ldr	r0, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	6819      	ldr	r1, [r3, #0]
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	461a      	mov	r2, r3
 8003058:	f7ff f964 	bl	8002324 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2100      	movs	r1, #0
 8003062:	4618      	mov	r0, r3
 8003064:	f7ff f8f9 	bl	800225a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	695a      	ldr	r2, [r3, #20]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	08db      	lsrs	r3, r3, #3
 8003074:	f003 0303 	and.w	r3, r3, #3
 8003078:	005b      	lsls	r3, r3, #1
 800307a:	fa02 f303 	lsl.w	r3, r2, r3
 800307e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b04      	cmp	r3, #4
 8003088:	d022      	beq.n	80030d0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6818      	ldr	r0, [r3, #0]
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	6919      	ldr	r1, [r3, #16]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800309a:	f7ff f853 	bl	8002144 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	6919      	ldr	r1, [r3, #16]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	699b      	ldr	r3, [r3, #24]
 80030aa:	461a      	mov	r2, r3
 80030ac:	f7ff f89f 	bl	80021ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6818      	ldr	r0, [r3, #0]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	6919      	ldr	r1, [r3, #16]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	7f1b      	ldrb	r3, [r3, #28]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d102      	bne.n	80030c6 <HAL_ADC_ConfigChannel+0x126>
 80030c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030c4:	e000      	b.n	80030c8 <HAL_ADC_ConfigChannel+0x128>
 80030c6:	2300      	movs	r3, #0
 80030c8:	461a      	mov	r2, r3
 80030ca:	f7ff f8ab 	bl	8002224 <LL_ADC_SetOffsetSaturation>
 80030ce:	e17b      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2100      	movs	r1, #0
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7ff f858 	bl	800218c <LL_ADC_GetOffsetChannel>
 80030dc:	4603      	mov	r3, r0
 80030de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d10a      	bne.n	80030fc <HAL_ADC_ConfigChannel+0x15c>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7ff f84d 	bl	800218c <LL_ADC_GetOffsetChannel>
 80030f2:	4603      	mov	r3, r0
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	f003 021f 	and.w	r2, r3, #31
 80030fa:	e01e      	b.n	800313a <HAL_ADC_ConfigChannel+0x19a>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2100      	movs	r1, #0
 8003102:	4618      	mov	r0, r3
 8003104:	f7ff f842 	bl	800218c <LL_ADC_GetOffsetChannel>
 8003108:	4603      	mov	r3, r0
 800310a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003112:	fa93 f3a3 	rbit	r3, r3
 8003116:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800311a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800311e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003122:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d101      	bne.n	800312e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800312a:	2320      	movs	r3, #32
 800312c:	e004      	b.n	8003138 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800312e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003132:	fab3 f383 	clz	r3, r3
 8003136:	b2db      	uxtb	r3, r3
 8003138:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003142:	2b00      	cmp	r3, #0
 8003144:	d105      	bne.n	8003152 <HAL_ADC_ConfigChannel+0x1b2>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	f003 031f 	and.w	r3, r3, #31
 8003150:	e018      	b.n	8003184 <HAL_ADC_ConfigChannel+0x1e4>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003166:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800316a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800316e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003176:	2320      	movs	r3, #32
 8003178:	e004      	b.n	8003184 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800317a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003184:	429a      	cmp	r2, r3
 8003186:	d106      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2200      	movs	r2, #0
 800318e:	2100      	movs	r1, #0
 8003190:	4618      	mov	r0, r3
 8003192:	f7ff f811 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2101      	movs	r1, #1
 800319c:	4618      	mov	r0, r3
 800319e:	f7fe fff5 	bl	800218c <LL_ADC_GetOffsetChannel>
 80031a2:	4603      	mov	r3, r0
 80031a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <HAL_ADC_ConfigChannel+0x222>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2101      	movs	r1, #1
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe ffea 	bl	800218c <LL_ADC_GetOffsetChannel>
 80031b8:	4603      	mov	r3, r0
 80031ba:	0e9b      	lsrs	r3, r3, #26
 80031bc:	f003 021f 	and.w	r2, r3, #31
 80031c0:	e01e      	b.n	8003200 <HAL_ADC_ConfigChannel+0x260>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2101      	movs	r1, #1
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe ffdf 	bl	800218c <LL_ADC_GetOffsetChannel>
 80031ce:	4603      	mov	r3, r0
 80031d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80031d8:	fa93 f3a3 	rbit	r3, r3
 80031dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80031e0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80031e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80031f0:	2320      	movs	r3, #32
 80031f2:	e004      	b.n	80031fe <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80031f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80031f8:	fab3 f383 	clz	r3, r3
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003208:	2b00      	cmp	r3, #0
 800320a:	d105      	bne.n	8003218 <HAL_ADC_ConfigChannel+0x278>
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	0e9b      	lsrs	r3, r3, #26
 8003212:	f003 031f 	and.w	r3, r3, #31
 8003216:	e018      	b.n	800324a <HAL_ADC_ConfigChannel+0x2aa>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003220:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003224:	fa93 f3a3 	rbit	r3, r3
 8003228:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800322c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003230:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003234:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800323c:	2320      	movs	r3, #32
 800323e:	e004      	b.n	800324a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003244:	fab3 f383 	clz	r3, r3
 8003248:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800324a:	429a      	cmp	r2, r3
 800324c:	d106      	bne.n	800325c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	2101      	movs	r1, #1
 8003256:	4618      	mov	r0, r3
 8003258:	f7fe ffae 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2102      	movs	r1, #2
 8003262:	4618      	mov	r0, r3
 8003264:	f7fe ff92 	bl	800218c <LL_ADC_GetOffsetChannel>
 8003268:	4603      	mov	r3, r0
 800326a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800326e:	2b00      	cmp	r3, #0
 8003270:	d10a      	bne.n	8003288 <HAL_ADC_ConfigChannel+0x2e8>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2102      	movs	r1, #2
 8003278:	4618      	mov	r0, r3
 800327a:	f7fe ff87 	bl	800218c <LL_ADC_GetOffsetChannel>
 800327e:	4603      	mov	r3, r0
 8003280:	0e9b      	lsrs	r3, r3, #26
 8003282:	f003 021f 	and.w	r2, r3, #31
 8003286:	e01e      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x326>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2102      	movs	r1, #2
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe ff7c 	bl	800218c <LL_ADC_GetOffsetChannel>
 8003294:	4603      	mov	r3, r0
 8003296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80032a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80032ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80032b6:	2320      	movs	r3, #32
 80032b8:	e004      	b.n	80032c4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80032ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032be:	fab3 f383 	clz	r3, r3
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d105      	bne.n	80032de <HAL_ADC_ConfigChannel+0x33e>
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	0e9b      	lsrs	r3, r3, #26
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	e016      	b.n	800330c <HAL_ADC_ConfigChannel+0x36c>
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80032ea:	fa93 f3a3 	rbit	r3, r3
 80032ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80032f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80032f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80032f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d101      	bne.n	8003302 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80032fe:	2320      	movs	r3, #32
 8003300:	e004      	b.n	800330c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003302:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800330c:	429a      	cmp	r2, r3
 800330e:	d106      	bne.n	800331e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2200      	movs	r2, #0
 8003316:	2102      	movs	r1, #2
 8003318:	4618      	mov	r0, r3
 800331a:	f7fe ff4d 	bl	80021b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2103      	movs	r1, #3
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe ff31 	bl	800218c <LL_ADC_GetOffsetChannel>
 800332a:	4603      	mov	r3, r0
 800332c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <HAL_ADC_ConfigChannel+0x3aa>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2103      	movs	r1, #3
 800333a:	4618      	mov	r0, r3
 800333c:	f7fe ff26 	bl	800218c <LL_ADC_GetOffsetChannel>
 8003340:	4603      	mov	r3, r0
 8003342:	0e9b      	lsrs	r3, r3, #26
 8003344:	f003 021f 	and.w	r2, r3, #31
 8003348:	e017      	b.n	800337a <HAL_ADC_ConfigChannel+0x3da>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2103      	movs	r1, #3
 8003350:	4618      	mov	r0, r3
 8003352:	f7fe ff1b 	bl	800218c <LL_ADC_GetOffsetChannel>
 8003356:	4603      	mov	r3, r0
 8003358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003364:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e003      	b.n	8003378 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003372:	fab3 f383 	clz	r3, r3
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003382:	2b00      	cmp	r3, #0
 8003384:	d105      	bne.n	8003392 <HAL_ADC_ConfigChannel+0x3f2>
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	0e9b      	lsrs	r3, r3, #26
 800338c:	f003 031f 	and.w	r3, r3, #31
 8003390:	e011      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x416>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033a2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80033a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e003      	b.n	80033b6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80033ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d106      	bne.n	80033c8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	2200      	movs	r2, #0
 80033c0:	2103      	movs	r1, #3
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fef8 	bl	80021b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff f87b 	bl	80024c8 <LL_ADC_IsEnabled>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f040 813d 	bne.w	8003654 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	6819      	ldr	r1, [r3, #0]
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	461a      	mov	r2, r3
 80033e8:	f7fe ffc8 	bl	800237c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	4aa2      	ldr	r2, [pc, #648]	; (800367c <HAL_ADC_ConfigChannel+0x6dc>)
 80033f2:	4293      	cmp	r3, r2
 80033f4:	f040 812e 	bne.w	8003654 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003404:	2b00      	cmp	r3, #0
 8003406:	d10b      	bne.n	8003420 <HAL_ADC_ConfigChannel+0x480>
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	0e9b      	lsrs	r3, r3, #26
 800340e:	3301      	adds	r3, #1
 8003410:	f003 031f 	and.w	r3, r3, #31
 8003414:	2b09      	cmp	r3, #9
 8003416:	bf94      	ite	ls
 8003418:	2301      	movls	r3, #1
 800341a:	2300      	movhi	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e019      	b.n	8003454 <HAL_ADC_ConfigChannel+0x4b4>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003428:	fa93 f3a3 	rbit	r3, r3
 800342c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800342e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003430:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003432:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003438:	2320      	movs	r3, #32
 800343a:	e003      	b.n	8003444 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800343c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800343e:	fab3 f383 	clz	r3, r3
 8003442:	b2db      	uxtb	r3, r3
 8003444:	3301      	adds	r3, #1
 8003446:	f003 031f 	and.w	r3, r3, #31
 800344a:	2b09      	cmp	r3, #9
 800344c:	bf94      	ite	ls
 800344e:	2301      	movls	r3, #1
 8003450:	2300      	movhi	r3, #0
 8003452:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003454:	2b00      	cmp	r3, #0
 8003456:	d079      	beq.n	800354c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003460:	2b00      	cmp	r3, #0
 8003462:	d107      	bne.n	8003474 <HAL_ADC_ConfigChannel+0x4d4>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	3301      	adds	r3, #1
 800346c:	069b      	lsls	r3, r3, #26
 800346e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003472:	e015      	b.n	80034a0 <HAL_ADC_ConfigChannel+0x500>
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800347a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800347c:	fa93 f3a3 	rbit	r3, r3
 8003480:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003482:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003484:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003486:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800348c:	2320      	movs	r3, #32
 800348e:	e003      	b.n	8003498 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003492:	fab3 f383 	clz	r3, r3
 8003496:	b2db      	uxtb	r3, r3
 8003498:	3301      	adds	r3, #1
 800349a:	069b      	lsls	r3, r3, #26
 800349c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x520>
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	0e9b      	lsrs	r3, r3, #26
 80034b2:	3301      	adds	r3, #1
 80034b4:	f003 031f 	and.w	r3, r3, #31
 80034b8:	2101      	movs	r1, #1
 80034ba:	fa01 f303 	lsl.w	r3, r1, r3
 80034be:	e017      	b.n	80034f0 <HAL_ADC_ConfigChannel+0x550>
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034c8:	fa93 f3a3 	rbit	r3, r3
 80034cc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80034ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80034d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80034d8:	2320      	movs	r3, #32
 80034da:	e003      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80034dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	3301      	adds	r3, #1
 80034e6:	f003 031f 	and.w	r3, r3, #31
 80034ea:	2101      	movs	r1, #1
 80034ec:	fa01 f303 	lsl.w	r3, r1, r3
 80034f0:	ea42 0103 	orr.w	r1, r2, r3
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10a      	bne.n	8003516 <HAL_ADC_ConfigChannel+0x576>
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	0e9b      	lsrs	r3, r3, #26
 8003506:	3301      	adds	r3, #1
 8003508:	f003 021f 	and.w	r2, r3, #31
 800350c:	4613      	mov	r3, r2
 800350e:	005b      	lsls	r3, r3, #1
 8003510:	4413      	add	r3, r2
 8003512:	051b      	lsls	r3, r3, #20
 8003514:	e018      	b.n	8003548 <HAL_ADC_ConfigChannel+0x5a8>
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800351c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800351e:	fa93 f3a3 	rbit	r3, r3
 8003522:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003526:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800352e:	2320      	movs	r3, #32
 8003530:	e003      	b.n	800353a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003534:	fab3 f383 	clz	r3, r3
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3301      	adds	r3, #1
 800353c:	f003 021f 	and.w	r2, r3, #31
 8003540:	4613      	mov	r3, r2
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4413      	add	r3, r2
 8003546:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003548:	430b      	orrs	r3, r1
 800354a:	e07e      	b.n	800364a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_ADC_ConfigChannel+0x5c8>
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	0e9b      	lsrs	r3, r3, #26
 800355e:	3301      	adds	r3, #1
 8003560:	069b      	lsls	r3, r3, #26
 8003562:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003566:	e015      	b.n	8003594 <HAL_ADC_ConfigChannel+0x5f4>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003570:	fa93 f3a3 	rbit	r3, r3
 8003574:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003578:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800357a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357c:	2b00      	cmp	r3, #0
 800357e:	d101      	bne.n	8003584 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003580:	2320      	movs	r3, #32
 8003582:	e003      	b.n	800358c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	fab3 f383 	clz	r3, r3
 800358a:	b2db      	uxtb	r3, r3
 800358c:	3301      	adds	r3, #1
 800358e:	069b      	lsls	r3, r3, #26
 8003590:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800359c:	2b00      	cmp	r3, #0
 800359e:	d109      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x614>
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	0e9b      	lsrs	r3, r3, #26
 80035a6:	3301      	adds	r3, #1
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2101      	movs	r1, #1
 80035ae:	fa01 f303 	lsl.w	r3, r1, r3
 80035b2:	e017      	b.n	80035e4 <HAL_ADC_ConfigChannel+0x644>
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ba:	6a3b      	ldr	r3, [r7, #32]
 80035bc:	fa93 f3a3 	rbit	r3, r3
 80035c0:	61fb      	str	r3, [r7, #28]
  return result;
 80035c2:	69fb      	ldr	r3, [r7, #28]
 80035c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d101      	bne.n	80035d0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80035cc:	2320      	movs	r3, #32
 80035ce:	e003      	b.n	80035d8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80035d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d2:	fab3 f383 	clz	r3, r3
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3301      	adds	r3, #1
 80035da:	f003 031f 	and.w	r3, r3, #31
 80035de:	2101      	movs	r1, #1
 80035e0:	fa01 f303 	lsl.w	r3, r1, r3
 80035e4:	ea42 0103 	orr.w	r1, r2, r3
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d10d      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x670>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	0e9b      	lsrs	r3, r3, #26
 80035fa:	3301      	adds	r3, #1
 80035fc:	f003 021f 	and.w	r2, r3, #31
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	3b1e      	subs	r3, #30
 8003608:	051b      	lsls	r3, r3, #20
 800360a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800360e:	e01b      	b.n	8003648 <HAL_ADC_ConfigChannel+0x6a8>
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003616:	697b      	ldr	r3, [r7, #20]
 8003618:	fa93 f3a3 	rbit	r3, r3
 800361c:	613b      	str	r3, [r7, #16]
  return result;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003622:	69bb      	ldr	r3, [r7, #24]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d101      	bne.n	800362c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003628:	2320      	movs	r3, #32
 800362a:	e003      	b.n	8003634 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	fab3 f383 	clz	r3, r3
 8003632:	b2db      	uxtb	r3, r3
 8003634:	3301      	adds	r3, #1
 8003636:	f003 021f 	and.w	r2, r3, #31
 800363a:	4613      	mov	r3, r2
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	4413      	add	r3, r2
 8003640:	3b1e      	subs	r3, #30
 8003642:	051b      	lsls	r3, r3, #20
 8003644:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003648:	430b      	orrs	r3, r1
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	6892      	ldr	r2, [r2, #8]
 800364e:	4619      	mov	r1, r3
 8003650:	f7fe fe68 	bl	8002324 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	4b09      	ldr	r3, [pc, #36]	; (8003680 <HAL_ADC_ConfigChannel+0x6e0>)
 800365a:	4013      	ands	r3, r2
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80be 	beq.w	80037de <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800366a:	d004      	beq.n	8003676 <HAL_ADC_ConfigChannel+0x6d6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a04      	ldr	r2, [pc, #16]	; (8003684 <HAL_ADC_ConfigChannel+0x6e4>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10a      	bne.n	800368c <HAL_ADC_ConfigChannel+0x6ec>
 8003676:	4b04      	ldr	r3, [pc, #16]	; (8003688 <HAL_ADC_ConfigChannel+0x6e8>)
 8003678:	e009      	b.n	800368e <HAL_ADC_ConfigChannel+0x6ee>
 800367a:	bf00      	nop
 800367c:	407f0000 	.word	0x407f0000
 8003680:	80080000 	.word	0x80080000
 8003684:	50000100 	.word	0x50000100
 8003688:	50000300 	.word	0x50000300
 800368c:	4b59      	ldr	r3, [pc, #356]	; (80037f4 <HAL_ADC_ConfigChannel+0x854>)
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fd4a 	bl	8002128 <LL_ADC_GetCommonPathInternalCh>
 8003694:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a56      	ldr	r2, [pc, #344]	; (80037f8 <HAL_ADC_ConfigChannel+0x858>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d004      	beq.n	80036ac <HAL_ADC_ConfigChannel+0x70c>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a55      	ldr	r2, [pc, #340]	; (80037fc <HAL_ADC_ConfigChannel+0x85c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d13a      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80036ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d134      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036c0:	d005      	beq.n	80036ce <HAL_ADC_ConfigChannel+0x72e>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a4e      	ldr	r2, [pc, #312]	; (8003800 <HAL_ADC_ConfigChannel+0x860>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	f040 8085 	bne.w	80037d8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80036d6:	d004      	beq.n	80036e2 <HAL_ADC_ConfigChannel+0x742>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a49      	ldr	r2, [pc, #292]	; (8003804 <HAL_ADC_ConfigChannel+0x864>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x746>
 80036e2:	4a49      	ldr	r2, [pc, #292]	; (8003808 <HAL_ADC_ConfigChannel+0x868>)
 80036e4:	e000      	b.n	80036e8 <HAL_ADC_ConfigChannel+0x748>
 80036e6:	4a43      	ldr	r2, [pc, #268]	; (80037f4 <HAL_ADC_ConfigChannel+0x854>)
 80036e8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80036ec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036f0:	4619      	mov	r1, r3
 80036f2:	4610      	mov	r0, r2
 80036f4:	f7fe fd05 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80036f8:	4b44      	ldr	r3, [pc, #272]	; (800380c <HAL_ADC_ConfigChannel+0x86c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	099b      	lsrs	r3, r3, #6
 80036fe:	4a44      	ldr	r2, [pc, #272]	; (8003810 <HAL_ADC_ConfigChannel+0x870>)
 8003700:	fba2 2303 	umull	r2, r3, r2, r3
 8003704:	099b      	lsrs	r3, r3, #6
 8003706:	1c5a      	adds	r2, r3, #1
 8003708:	4613      	mov	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	4413      	add	r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003712:	e002      	b.n	800371a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	3b01      	subs	r3, #1
 8003718:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f9      	bne.n	8003714 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003720:	e05a      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a3b      	ldr	r2, [pc, #236]	; (8003814 <HAL_ADC_ConfigChannel+0x874>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d125      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x7d8>
 800372c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003730:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d11f      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a31      	ldr	r2, [pc, #196]	; (8003804 <HAL_ADC_ConfigChannel+0x864>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d104      	bne.n	800374c <HAL_ADC_ConfigChannel+0x7ac>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a34      	ldr	r2, [pc, #208]	; (8003818 <HAL_ADC_ConfigChannel+0x878>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d047      	beq.n	80037dc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003754:	d004      	beq.n	8003760 <HAL_ADC_ConfigChannel+0x7c0>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a2a      	ldr	r2, [pc, #168]	; (8003804 <HAL_ADC_ConfigChannel+0x864>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d101      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x7c4>
 8003760:	4a29      	ldr	r2, [pc, #164]	; (8003808 <HAL_ADC_ConfigChannel+0x868>)
 8003762:	e000      	b.n	8003766 <HAL_ADC_ConfigChannel+0x7c6>
 8003764:	4a23      	ldr	r2, [pc, #140]	; (80037f4 <HAL_ADC_ConfigChannel+0x854>)
 8003766:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800376a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800376e:	4619      	mov	r1, r3
 8003770:	4610      	mov	r0, r2
 8003772:	f7fe fcc6 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003776:	e031      	b.n	80037dc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a27      	ldr	r2, [pc, #156]	; (800381c <HAL_ADC_ConfigChannel+0x87c>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d12d      	bne.n	80037de <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003782:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d127      	bne.n	80037de <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a1c      	ldr	r2, [pc, #112]	; (8003804 <HAL_ADC_ConfigChannel+0x864>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d022      	beq.n	80037de <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a0:	d004      	beq.n	80037ac <HAL_ADC_ConfigChannel+0x80c>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_ADC_ConfigChannel+0x864>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d101      	bne.n	80037b0 <HAL_ADC_ConfigChannel+0x810>
 80037ac:	4a16      	ldr	r2, [pc, #88]	; (8003808 <HAL_ADC_ConfigChannel+0x868>)
 80037ae:	e000      	b.n	80037b2 <HAL_ADC_ConfigChannel+0x812>
 80037b0:	4a10      	ldr	r2, [pc, #64]	; (80037f4 <HAL_ADC_ConfigChannel+0x854>)
 80037b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80037b6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037ba:	4619      	mov	r1, r3
 80037bc:	4610      	mov	r0, r2
 80037be:	f7fe fca0 	bl	8002102 <LL_ADC_SetCommonPathInternalCh>
 80037c2:	e00c      	b.n	80037de <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	f043 0220 	orr.w	r2, r3, #32
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80037d6:	e002      	b.n	80037de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80037dc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80037e6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	37d8      	adds	r7, #216	; 0xd8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	50000700 	.word	0x50000700
 80037f8:	c3210000 	.word	0xc3210000
 80037fc:	90c00010 	.word	0x90c00010
 8003800:	50000600 	.word	0x50000600
 8003804:	50000100 	.word	0x50000100
 8003808:	50000300 	.word	0x50000300
 800380c:	20000000 	.word	0x20000000
 8003810:	053e2d63 	.word	0x053e2d63
 8003814:	c7520000 	.word	0xc7520000
 8003818:	50000500 	.word	0x50000500
 800381c:	cb840000 	.word	0xcb840000

08003820 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fe fe4b 	bl	80024c8 <LL_ADC_IsEnabled>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d14d      	bne.n	80038d4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689a      	ldr	r2, [r3, #8]
 800383e:	4b28      	ldr	r3, [pc, #160]	; (80038e0 <ADC_Enable+0xc0>)
 8003840:	4013      	ands	r3, r2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00d      	beq.n	8003862 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384a:	f043 0210 	orr.w	r2, r3, #16
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003856:	f043 0201 	orr.w	r2, r3, #1
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e039      	b.n	80038d6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7fe fe1a 	bl	80024a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800386c:	f7fe fc08 	bl	8002080 <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003872:	e028      	b.n	80038c6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4618      	mov	r0, r3
 800387a:	f7fe fe25 	bl	80024c8 <LL_ADC_IsEnabled>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7fe fe09 	bl	80024a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800388e:	f7fe fbf7 	bl	8002080 <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b02      	cmp	r3, #2
 800389a:	d914      	bls.n	80038c6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d00d      	beq.n	80038c6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	f043 0210 	orr.w	r2, r3, #16
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038ba:	f043 0201 	orr.w	r2, r3, #1
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e007      	b.n	80038d6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d1cf      	bne.n	8003874 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	8000003f 	.word	0x8000003f

080038e4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d14b      	bne.n	8003996 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d021      	beq.n	800395c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f7fe fcaf 	bl	8002280 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d032      	beq.n	800398e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d12b      	bne.n	800398e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d11f      	bne.n	800398e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003952:	f043 0201 	orr.w	r2, r3, #1
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	65da      	str	r2, [r3, #92]	; 0x5c
 800395a:	e018      	b.n	800398e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	f003 0302 	and.w	r3, r3, #2
 8003966:	2b00      	cmp	r3, #0
 8003968:	d111      	bne.n	800398e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800396e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d105      	bne.n	800398e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003986:	f043 0201 	orr.w	r2, r3, #1
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff fade 	bl	8002f50 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003994:	e00e      	b.n	80039b4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d003      	beq.n	80039aa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f7ff faf2 	bl	8002f8c <HAL_ADC_ErrorCallback>
}
 80039a8:	e004      	b.n	80039b4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	4798      	blx	r3
}
 80039b4:	bf00      	nop
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff faca 	bl	8002f64 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039d0:	bf00      	nop
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039f6:	f043 0204 	orr.w	r2, r3, #4
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f7ff fac4 	bl	8002f8c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003a04:	bf00      	nop
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}

08003a0c <LL_ADC_IsEnabled>:
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b083      	sub	sp, #12
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d101      	bne.n	8003a24 <LL_ADC_IsEnabled+0x18>
 8003a20:	2301      	movs	r3, #1
 8003a22:	e000      	b.n	8003a26 <LL_ADC_IsEnabled+0x1a>
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	370c      	adds	r7, #12
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <LL_ADC_REG_IsConversionOngoing>:
{
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	689b      	ldr	r3, [r3, #8]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b04      	cmp	r3, #4
 8003a44:	d101      	bne.n	8003a4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	370c      	adds	r7, #12
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003a88:	bf00      	nop
 8003a8a:	370c      	adds	r7, #12
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr

08003a94 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b083      	sub	sp, #12
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003a9c:	bf00      	nop
 8003a9e:	370c      	adds	r7, #12
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa6:	4770      	bx	lr

08003aa8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b083      	sub	sp, #12
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003ab0:	bf00      	nop
 8003ab2:	370c      	adds	r7, #12
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr

08003abc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003abc:	b590      	push	{r4, r7, lr}
 8003abe:	b0a1      	sub	sp, #132	; 0x84
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d101      	bne.n	8003ada <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	e0e7      	b.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2201      	movs	r2, #1
 8003ade:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af2:	d102      	bne.n	8003afa <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003af4:	4b6f      	ldr	r3, [pc, #444]	; (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	e009      	b.n	8003b0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a6e      	ldr	r2, [pc, #440]	; (8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d102      	bne.n	8003b0a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003b04:	4b6d      	ldr	r3, [pc, #436]	; (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	e001      	b.n	8003b0e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10b      	bne.n	8003b2c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b18:	f043 0220 	orr.w	r2, r3, #32
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e0be      	b.n	8003caa <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	4618      	mov	r0, r3
 8003b30:	f7ff ff7f 	bl	8003a32 <LL_ADC_REG_IsConversionOngoing>
 8003b34:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff ff79 	bl	8003a32 <LL_ADC_REG_IsConversionOngoing>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	f040 80a0 	bne.w	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f040 809c 	bne.w	8003c88 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b58:	d004      	beq.n	8003b64 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a55      	ldr	r2, [pc, #340]	; (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d101      	bne.n	8003b68 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003b64:	4b56      	ldr	r3, [pc, #344]	; (8003cc0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003b66:	e000      	b.n	8003b6a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003b68:	4b56      	ldr	r3, [pc, #344]	; (8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003b6a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d04b      	beq.n	8003c0c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003b74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003b86:	035b      	lsls	r3, r3, #13
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b8e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003b98:	d004      	beq.n	8003ba4 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a45      	ldr	r2, [pc, #276]	; (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d10f      	bne.n	8003bc4 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003ba4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ba8:	f7ff ff30 	bl	8003a0c <LL_ADC_IsEnabled>
 8003bac:	4604      	mov	r4, r0
 8003bae:	4841      	ldr	r0, [pc, #260]	; (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003bb0:	f7ff ff2c 	bl	8003a0c <LL_ADC_IsEnabled>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	4323      	orrs	r3, r4
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	bf0c      	ite	eq
 8003bbc:	2301      	moveq	r3, #1
 8003bbe:	2300      	movne	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e012      	b.n	8003bea <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003bc4:	483c      	ldr	r0, [pc, #240]	; (8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003bc6:	f7ff ff21 	bl	8003a0c <LL_ADC_IsEnabled>
 8003bca:	4604      	mov	r4, r0
 8003bcc:	483b      	ldr	r0, [pc, #236]	; (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003bce:	f7ff ff1d 	bl	8003a0c <LL_ADC_IsEnabled>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	431c      	orrs	r4, r3
 8003bd6:	483c      	ldr	r0, [pc, #240]	; (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003bd8:	f7ff ff18 	bl	8003a0c <LL_ADC_IsEnabled>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	4323      	orrs	r3, r4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	bf0c      	ite	eq
 8003be4:	2301      	moveq	r3, #1
 8003be6:	2300      	movne	r3, #0
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d056      	beq.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003bf6:	f023 030f 	bic.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	6811      	ldr	r1, [r2, #0]
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	6892      	ldr	r2, [r2, #8]
 8003c02:	430a      	orrs	r2, r1
 8003c04:	431a      	orrs	r2, r3
 8003c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c08:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c0a:	e047      	b.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c16:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c20:	d004      	beq.n	8003c2c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a23      	ldr	r2, [pc, #140]	; (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d10f      	bne.n	8003c4c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003c2c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003c30:	f7ff feec 	bl	8003a0c <LL_ADC_IsEnabled>
 8003c34:	4604      	mov	r4, r0
 8003c36:	481f      	ldr	r0, [pc, #124]	; (8003cb4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003c38:	f7ff fee8 	bl	8003a0c <LL_ADC_IsEnabled>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4323      	orrs	r3, r4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	bf0c      	ite	eq
 8003c44:	2301      	moveq	r3, #1
 8003c46:	2300      	movne	r3, #0
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	e012      	b.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003c4c:	481a      	ldr	r0, [pc, #104]	; (8003cb8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003c4e:	f7ff fedd 	bl	8003a0c <LL_ADC_IsEnabled>
 8003c52:	4604      	mov	r4, r0
 8003c54:	4819      	ldr	r0, [pc, #100]	; (8003cbc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003c56:	f7ff fed9 	bl	8003a0c <LL_ADC_IsEnabled>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	431c      	orrs	r4, r3
 8003c5e:	481a      	ldr	r0, [pc, #104]	; (8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003c60:	f7ff fed4 	bl	8003a0c <LL_ADC_IsEnabled>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4323      	orrs	r3, r4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	bf0c      	ite	eq
 8003c6c:	2301      	moveq	r3, #1
 8003c6e:	2300      	movne	r3, #0
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d012      	beq.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003c7e:	f023 030f 	bic.w	r3, r3, #15
 8003c82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003c84:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c86:	e009      	b.n	8003c9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c8c:	f043 0220 	orr.w	r2, r3, #32
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003c94:	2301      	movs	r3, #1
 8003c96:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003c9a:	e000      	b.n	8003c9e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003c9c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003ca6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3784      	adds	r7, #132	; 0x84
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd90      	pop	{r4, r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	50000100 	.word	0x50000100
 8003cb8:	50000400 	.word	0x50000400
 8003cbc:	50000500 	.word	0x50000500
 8003cc0:	50000300 	.word	0x50000300
 8003cc4:	50000700 	.word	0x50000700
 8003cc8:	50000600 	.word	0x50000600

08003ccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f003 0307 	and.w	r3, r3, #7
 8003cda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cdc:	4b0c      	ldr	r3, [pc, #48]	; (8003d10 <__NVIC_SetPriorityGrouping+0x44>)
 8003cde:	68db      	ldr	r3, [r3, #12]
 8003ce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003ce8:	4013      	ands	r3, r2
 8003cea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003cf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cfe:	4a04      	ldr	r2, [pc, #16]	; (8003d10 <__NVIC_SetPriorityGrouping+0x44>)
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	60d3      	str	r3, [r2, #12]
}
 8003d04:	bf00      	nop
 8003d06:	3714      	adds	r7, #20
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0e:	4770      	bx	lr
 8003d10:	e000ed00 	.word	0xe000ed00

08003d14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003d14:	b480      	push	{r7}
 8003d16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d18:	4b04      	ldr	r3, [pc, #16]	; (8003d2c <__NVIC_GetPriorityGrouping+0x18>)
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	0a1b      	lsrs	r3, r3, #8
 8003d1e:	f003 0307 	and.w	r3, r3, #7
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	e000ed00 	.word	0xe000ed00

08003d30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	db0b      	blt.n	8003d5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d42:	79fb      	ldrb	r3, [r7, #7]
 8003d44:	f003 021f 	and.w	r2, r3, #31
 8003d48:	4907      	ldr	r1, [pc, #28]	; (8003d68 <__NVIC_EnableIRQ+0x38>)
 8003d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4e:	095b      	lsrs	r3, r3, #5
 8003d50:	2001      	movs	r0, #1
 8003d52:	fa00 f202 	lsl.w	r2, r0, r2
 8003d56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	e000e100 	.word	0xe000e100

08003d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	4603      	mov	r3, r0
 8003d74:	6039      	str	r1, [r7, #0]
 8003d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	db0a      	blt.n	8003d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	b2da      	uxtb	r2, r3
 8003d84:	490c      	ldr	r1, [pc, #48]	; (8003db8 <__NVIC_SetPriority+0x4c>)
 8003d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d8a:	0112      	lsls	r2, r2, #4
 8003d8c:	b2d2      	uxtb	r2, r2
 8003d8e:	440b      	add	r3, r1
 8003d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d94:	e00a      	b.n	8003dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	4908      	ldr	r1, [pc, #32]	; (8003dbc <__NVIC_SetPriority+0x50>)
 8003d9c:	79fb      	ldrb	r3, [r7, #7]
 8003d9e:	f003 030f 	and.w	r3, r3, #15
 8003da2:	3b04      	subs	r3, #4
 8003da4:	0112      	lsls	r2, r2, #4
 8003da6:	b2d2      	uxtb	r2, r2
 8003da8:	440b      	add	r3, r1
 8003daa:	761a      	strb	r2, [r3, #24]
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	e000e100 	.word	0xe000e100
 8003dbc:	e000ed00 	.word	0xe000ed00

08003dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b089      	sub	sp, #36	; 0x24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	60f8      	str	r0, [r7, #12]
 8003dc8:	60b9      	str	r1, [r7, #8]
 8003dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f003 0307 	and.w	r3, r3, #7
 8003dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f1c3 0307 	rsb	r3, r3, #7
 8003dda:	2b04      	cmp	r3, #4
 8003ddc:	bf28      	it	cs
 8003dde:	2304      	movcs	r3, #4
 8003de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	3304      	adds	r3, #4
 8003de6:	2b06      	cmp	r3, #6
 8003de8:	d902      	bls.n	8003df0 <NVIC_EncodePriority+0x30>
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	3b03      	subs	r3, #3
 8003dee:	e000      	b.n	8003df2 <NVIC_EncodePriority+0x32>
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003df4:	f04f 32ff 	mov.w	r2, #4294967295
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43da      	mvns	r2, r3
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	401a      	ands	r2, r3
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e08:	f04f 31ff 	mov.w	r1, #4294967295
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e12:	43d9      	mvns	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e18:	4313      	orrs	r3, r2
         );
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3724      	adds	r7, #36	; 0x24
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr

08003e26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e26:	b580      	push	{r7, lr}
 8003e28:	b082      	sub	sp, #8
 8003e2a:	af00      	add	r7, sp, #0
 8003e2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f7ff ff4c 	bl	8003ccc <__NVIC_SetPriorityGrouping>
}
 8003e34:	bf00      	nop
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	607a      	str	r2, [r7, #4]
 8003e48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003e4a:	f7ff ff63 	bl	8003d14 <__NVIC_GetPriorityGrouping>
 8003e4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	68b9      	ldr	r1, [r7, #8]
 8003e54:	6978      	ldr	r0, [r7, #20]
 8003e56:	f7ff ffb3 	bl	8003dc0 <NVIC_EncodePriority>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e60:	4611      	mov	r1, r2
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7ff ff82 	bl	8003d6c <__NVIC_SetPriority>
}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	4603      	mov	r3, r0
 8003e78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f7ff ff56 	bl	8003d30 <__NVIC_EnableIRQ>
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e08d      	b.n	8003fba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	4b47      	ldr	r3, [pc, #284]	; (8003fc4 <HAL_DMA_Init+0x138>)
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d80f      	bhi.n	8003eca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	4b45      	ldr	r3, [pc, #276]	; (8003fc8 <HAL_DMA_Init+0x13c>)
 8003eb2:	4413      	add	r3, r2
 8003eb4:	4a45      	ldr	r2, [pc, #276]	; (8003fcc <HAL_DMA_Init+0x140>)
 8003eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eba:	091b      	lsrs	r3, r3, #4
 8003ebc:	009a      	lsls	r2, r3, #2
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a42      	ldr	r2, [pc, #264]	; (8003fd0 <HAL_DMA_Init+0x144>)
 8003ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8003ec8:	e00e      	b.n	8003ee8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	461a      	mov	r2, r3
 8003ed0:	4b40      	ldr	r3, [pc, #256]	; (8003fd4 <HAL_DMA_Init+0x148>)
 8003ed2:	4413      	add	r3, r2
 8003ed4:	4a3d      	ldr	r2, [pc, #244]	; (8003fcc <HAL_DMA_Init+0x140>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	091b      	lsrs	r3, r3, #4
 8003edc:	009a      	lsls	r2, r3, #2
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a3c      	ldr	r2, [pc, #240]	; (8003fd8 <HAL_DMA_Init+0x14c>)
 8003ee6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003f0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003f18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003f24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 fa76 	bl	800442c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f48:	d102      	bne.n	8003f50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685a      	ldr	r2, [r3, #4]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f58:	b2d2      	uxtb	r2, r2
 8003f5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003f64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d010      	beq.n	8003f90 <HAL_DMA_Init+0x104>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d80c      	bhi.n	8003f90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa96 	bl	80044a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f80:	2200      	movs	r2, #0
 8003f82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	e008      	b.n	8003fa2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40020407 	.word	0x40020407
 8003fc8:	bffdfff8 	.word	0xbffdfff8
 8003fcc:	cccccccd 	.word	0xcccccccd
 8003fd0:	40020000 	.word	0x40020000
 8003fd4:	bffdfbf8 	.word	0xbffdfbf8
 8003fd8:	40020400 	.word	0x40020400

08003fdc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b086      	sub	sp, #24
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_DMA_Start_IT+0x20>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e066      	b.n	80040ca <HAL_DMA_Start_IT+0xee>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d155      	bne.n	80040bc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2202      	movs	r2, #2
 8004014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2200      	movs	r2, #0
 800401c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f022 0201 	bic.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	68b9      	ldr	r1, [r7, #8]
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 f9bb 	bl	80043b0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	2b00      	cmp	r3, #0
 8004040:	d008      	beq.n	8004054 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f042 020e 	orr.w	r2, r2, #14
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e00f      	b.n	8004074 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0204 	bic.w	r2, r2, #4
 8004062:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 020a 	orr.w	r2, r2, #10
 8004072:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d007      	beq.n	8004092 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004090:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004096:	2b00      	cmp	r3, #0
 8004098:	d007      	beq.n	80040aa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	601a      	str	r2, [r3, #0]
 80040ba:	e005      	b.n	80040c8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2200      	movs	r2, #0
 80040c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80040c4:	2302      	movs	r3, #2
 80040c6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80040c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040d2:	b480      	push	{r7}
 80040d4:	b085      	sub	sp, #20
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040da:	2300      	movs	r3, #0
 80040dc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d005      	beq.n	80040f6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2204      	movs	r2, #4
 80040ee:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	73fb      	strb	r3, [r7, #15]
 80040f4:	e037      	b.n	8004166 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f022 020e 	bic.w	r2, r2, #14
 8004104:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004110:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004114:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412a:	f003 021f 	and.w	r2, r3, #31
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	2101      	movs	r1, #1
 8004134:	fa01 f202 	lsl.w	r2, r1, r2
 8004138:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004142:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00c      	beq.n	8004166 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800415a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004164:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004176:	7bfb      	ldrb	r3, [r7, #15]
}
 8004178:	4618      	mov	r0, r3
 800417a:	3714      	adds	r7, #20
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d00d      	beq.n	80041b8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2204      	movs	r2, #4
 80041a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2201      	movs	r2, #1
 80041a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80041b2:	2301      	movs	r3, #1
 80041b4:	73fb      	strb	r3, [r7, #15]
 80041b6:	e047      	b.n	8004248 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 020e 	bic.w	r2, r2, #14
 80041c6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 0201 	bic.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ec:	f003 021f 	and.w	r2, r3, #31
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f4:	2101      	movs	r1, #1
 80041f6:	fa01 f202 	lsl.w	r2, r1, r2
 80041fa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004204:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00c      	beq.n	8004228 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004218:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800421c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004226:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2201      	movs	r2, #1
 800422c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	4798      	blx	r3
    }
  }
  return status;
 8004248:	7bfb      	ldrb	r3, [r7, #15]
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426e:	f003 031f 	and.w	r3, r3, #31
 8004272:	2204      	movs	r2, #4
 8004274:	409a      	lsls	r2, r3
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4013      	ands	r3, r2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d026      	beq.n	80042cc <HAL_DMA_IRQHandler+0x7a>
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	f003 0304 	and.w	r3, r3, #4
 8004284:	2b00      	cmp	r3, #0
 8004286:	d021      	beq.n	80042cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0320 	and.w	r3, r3, #32
 8004292:	2b00      	cmp	r3, #0
 8004294:	d107      	bne.n	80042a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f022 0204 	bic.w	r2, r2, #4
 80042a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	f003 021f 	and.w	r2, r3, #31
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b2:	2104      	movs	r1, #4
 80042b4:	fa01 f202 	lsl.w	r2, r1, r2
 80042b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d071      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	6878      	ldr	r0, [r7, #4]
 80042c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80042ca:	e06c      	b.n	80043a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d0:	f003 031f 	and.w	r3, r3, #31
 80042d4:	2202      	movs	r2, #2
 80042d6:	409a      	lsls	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4013      	ands	r3, r2
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d02e      	beq.n	800433e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d029      	beq.n	800433e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0320 	and.w	r3, r3, #32
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d10b      	bne.n	8004310 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f022 020a 	bic.w	r2, r2, #10
 8004306:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004314:	f003 021f 	and.w	r2, r3, #31
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431c:	2102      	movs	r1, #2
 800431e:	fa01 f202 	lsl.w	r2, r1, r2
 8004322:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004330:	2b00      	cmp	r3, #0
 8004332:	d038      	beq.n	80043a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800433c:	e033      	b.n	80043a6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	2208      	movs	r2, #8
 8004348:	409a      	lsls	r2, r3
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	4013      	ands	r3, r2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d02a      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 0308 	and.w	r3, r3, #8
 8004358:	2b00      	cmp	r3, #0
 800435a:	d025      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 020e 	bic.w	r2, r2, #14
 800436a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004370:	f003 021f 	and.w	r2, r3, #31
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004378:	2101      	movs	r1, #1
 800437a:	fa01 f202 	lsl.w	r2, r1, r2
 800437e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800439a:	2b00      	cmp	r3, #0
 800439c:	d004      	beq.n	80043a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043a6:	bf00      	nop
 80043a8:	bf00      	nop
}
 80043aa:	3710      	adds	r7, #16
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	607a      	str	r2, [r7, #4]
 80043bc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043c6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d004      	beq.n	80043da <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043d4:	68fa      	ldr	r2, [r7, #12]
 80043d6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043d8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043de:	f003 021f 	and.w	r2, r3, #31
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	2101      	movs	r1, #1
 80043e8:	fa01 f202 	lsl.w	r2, r1, r2
 80043ec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	683a      	ldr	r2, [r7, #0]
 80043f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	2b10      	cmp	r3, #16
 80043fc:	d108      	bne.n	8004410 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800440e:	e007      	b.n	8004420 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	60da      	str	r2, [r3, #12]
}
 8004420:	bf00      	nop
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	461a      	mov	r2, r3
 800443a:	4b16      	ldr	r3, [pc, #88]	; (8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800443c:	429a      	cmp	r2, r3
 800443e:	d802      	bhi.n	8004446 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004440:	4b15      	ldr	r3, [pc, #84]	; (8004498 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004442:	617b      	str	r3, [r7, #20]
 8004444:	e001      	b.n	800444a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004448:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	3b08      	subs	r3, #8
 8004456:	4a12      	ldr	r2, [pc, #72]	; (80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004458:	fba2 2303 	umull	r2, r3, r2, r3
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004464:	089b      	lsrs	r3, r3, #2
 8004466:	009a      	lsls	r2, r3, #2
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	4413      	add	r3, r2
 800446c:	461a      	mov	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a0b      	ldr	r2, [pc, #44]	; (80044a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004476:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f003 031f 	and.w	r3, r3, #31
 800447e:	2201      	movs	r2, #1
 8004480:	409a      	lsls	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004486:	bf00      	nop
 8004488:	371c      	adds	r7, #28
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	40020407 	.word	0x40020407
 8004498:	40020800 	.word	0x40020800
 800449c:	40020820 	.word	0x40020820
 80044a0:	cccccccd 	.word	0xcccccccd
 80044a4:	40020880 	.word	0x40020880

080044a8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044bc:	4413      	add	r3, r2
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	461a      	mov	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a08      	ldr	r2, [pc, #32]	; (80044ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80044ca:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	f003 031f 	and.w	r3, r3, #31
 80044d4:	2201      	movs	r2, #1
 80044d6:	409a      	lsls	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80044dc:	bf00      	nop
 80044de:	3714      	adds	r7, #20
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr
 80044e8:	1000823f 	.word	0x1000823f
 80044ec:	40020940 	.word	0x40020940

080044f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80044fa:	2300      	movs	r3, #0
 80044fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044fe:	e15a      	b.n	80047b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	2101      	movs	r1, #1
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	4013      	ands	r3, r2
 800450e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	f000 814c 	beq.w	80047b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	2b01      	cmp	r3, #1
 8004522:	d005      	beq.n	8004530 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	685b      	ldr	r3, [r3, #4]
 8004528:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800452c:	2b02      	cmp	r3, #2
 800452e:	d130      	bne.n	8004592 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	2203      	movs	r2, #3
 800453c:	fa02 f303 	lsl.w	r3, r2, r3
 8004540:	43db      	mvns	r3, r3
 8004542:	693a      	ldr	r2, [r7, #16]
 8004544:	4013      	ands	r3, r2
 8004546:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	68da      	ldr	r2, [r3, #12]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	fa02 f303 	lsl.w	r3, r2, r3
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	4313      	orrs	r3, r2
 8004558:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004566:	2201      	movs	r2, #1
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	fa02 f303 	lsl.w	r3, r2, r3
 800456e:	43db      	mvns	r3, r3
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	4013      	ands	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	091b      	lsrs	r3, r3, #4
 800457c:	f003 0201 	and.w	r2, r3, #1
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	fa02 f303 	lsl.w	r3, r2, r3
 8004586:	693a      	ldr	r2, [r7, #16]
 8004588:	4313      	orrs	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0303 	and.w	r3, r3, #3
 800459a:	2b03      	cmp	r3, #3
 800459c:	d017      	beq.n	80045ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	005b      	lsls	r3, r3, #1
 80045a8:	2203      	movs	r2, #3
 80045aa:	fa02 f303 	lsl.w	r3, r2, r3
 80045ae:	43db      	mvns	r3, r3
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4013      	ands	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689a      	ldr	r2, [r3, #8]
 80045ba:	697b      	ldr	r3, [r7, #20]
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	fa02 f303 	lsl.w	r3, r2, r3
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	693a      	ldr	r2, [r7, #16]
 80045cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f003 0303 	and.w	r3, r3, #3
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d123      	bne.n	8004622 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	08da      	lsrs	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	3208      	adds	r2, #8
 80045e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f003 0307 	and.w	r3, r3, #7
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	220f      	movs	r2, #15
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	4013      	ands	r3, r2
 80045fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	691a      	ldr	r2, [r3, #16]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f003 0307 	and.w	r3, r3, #7
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	fa02 f303 	lsl.w	r3, r2, r3
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	08da      	lsrs	r2, r3, #3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	3208      	adds	r2, #8
 800461c:	6939      	ldr	r1, [r7, #16]
 800461e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	2203      	movs	r2, #3
 800462e:	fa02 f303 	lsl.w	r3, r2, r3
 8004632:	43db      	mvns	r3, r3
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4013      	ands	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f003 0203 	and.w	r2, r3, #3
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800465e:	2b00      	cmp	r3, #0
 8004660:	f000 80a6 	beq.w	80047b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004664:	4b5b      	ldr	r3, [pc, #364]	; (80047d4 <HAL_GPIO_Init+0x2e4>)
 8004666:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004668:	4a5a      	ldr	r2, [pc, #360]	; (80047d4 <HAL_GPIO_Init+0x2e4>)
 800466a:	f043 0301 	orr.w	r3, r3, #1
 800466e:	6613      	str	r3, [r2, #96]	; 0x60
 8004670:	4b58      	ldr	r3, [pc, #352]	; (80047d4 <HAL_GPIO_Init+0x2e4>)
 8004672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	60bb      	str	r3, [r7, #8]
 800467a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800467c:	4a56      	ldr	r2, [pc, #344]	; (80047d8 <HAL_GPIO_Init+0x2e8>)
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	089b      	lsrs	r3, r3, #2
 8004682:	3302      	adds	r3, #2
 8004684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004688:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 0303 	and.w	r3, r3, #3
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	220f      	movs	r2, #15
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4013      	ands	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80046a6:	d01f      	beq.n	80046e8 <HAL_GPIO_Init+0x1f8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a4c      	ldr	r2, [pc, #304]	; (80047dc <HAL_GPIO_Init+0x2ec>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d019      	beq.n	80046e4 <HAL_GPIO_Init+0x1f4>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a4b      	ldr	r2, [pc, #300]	; (80047e0 <HAL_GPIO_Init+0x2f0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d013      	beq.n	80046e0 <HAL_GPIO_Init+0x1f0>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a4a      	ldr	r2, [pc, #296]	; (80047e4 <HAL_GPIO_Init+0x2f4>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d00d      	beq.n	80046dc <HAL_GPIO_Init+0x1ec>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	4a49      	ldr	r2, [pc, #292]	; (80047e8 <HAL_GPIO_Init+0x2f8>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d007      	beq.n	80046d8 <HAL_GPIO_Init+0x1e8>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	4a48      	ldr	r2, [pc, #288]	; (80047ec <HAL_GPIO_Init+0x2fc>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d101      	bne.n	80046d4 <HAL_GPIO_Init+0x1e4>
 80046d0:	2305      	movs	r3, #5
 80046d2:	e00a      	b.n	80046ea <HAL_GPIO_Init+0x1fa>
 80046d4:	2306      	movs	r3, #6
 80046d6:	e008      	b.n	80046ea <HAL_GPIO_Init+0x1fa>
 80046d8:	2304      	movs	r3, #4
 80046da:	e006      	b.n	80046ea <HAL_GPIO_Init+0x1fa>
 80046dc:	2303      	movs	r3, #3
 80046de:	e004      	b.n	80046ea <HAL_GPIO_Init+0x1fa>
 80046e0:	2302      	movs	r3, #2
 80046e2:	e002      	b.n	80046ea <HAL_GPIO_Init+0x1fa>
 80046e4:	2301      	movs	r3, #1
 80046e6:	e000      	b.n	80046ea <HAL_GPIO_Init+0x1fa>
 80046e8:	2300      	movs	r3, #0
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	f002 0203 	and.w	r2, r2, #3
 80046f0:	0092      	lsls	r2, r2, #2
 80046f2:	4093      	lsls	r3, r2
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046fa:	4937      	ldr	r1, [pc, #220]	; (80047d8 <HAL_GPIO_Init+0x2e8>)
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	089b      	lsrs	r3, r3, #2
 8004700:	3302      	adds	r3, #2
 8004702:	693a      	ldr	r2, [r7, #16]
 8004704:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004708:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <HAL_GPIO_Init+0x300>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	43db      	mvns	r3, r3
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	4013      	ands	r3, r2
 8004716:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004724:	693a      	ldr	r2, [r7, #16]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4313      	orrs	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800472c:	4a30      	ldr	r2, [pc, #192]	; (80047f0 <HAL_GPIO_Init+0x300>)
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004732:	4b2f      	ldr	r3, [pc, #188]	; (80047f0 <HAL_GPIO_Init+0x300>)
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	43db      	mvns	r3, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4013      	ands	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d003      	beq.n	8004756 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800474e:	693a      	ldr	r2, [r7, #16]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004756:	4a26      	ldr	r2, [pc, #152]	; (80047f0 <HAL_GPIO_Init+0x300>)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800475c:	4b24      	ldr	r3, [pc, #144]	; (80047f0 <HAL_GPIO_Init+0x300>)
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	43db      	mvns	r3, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004780:	4a1b      	ldr	r2, [pc, #108]	; (80047f0 <HAL_GPIO_Init+0x300>)
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004786:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <HAL_GPIO_Init+0x300>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	43db      	mvns	r3, r3
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4013      	ands	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80047aa:	4a11      	ldr	r2, [pc, #68]	; (80047f0 <HAL_GPIO_Init+0x300>)
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	3301      	adds	r3, #1
 80047b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	fa22 f303 	lsr.w	r3, r2, r3
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	f47f ae9d 	bne.w	8004500 <HAL_GPIO_Init+0x10>
  }
}
 80047c6:	bf00      	nop
 80047c8:	bf00      	nop
 80047ca:	371c      	adds	r7, #28
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr
 80047d4:	40021000 	.word	0x40021000
 80047d8:	40010000 	.word	0x40010000
 80047dc:	48000400 	.word	0x48000400
 80047e0:	48000800 	.word	0x48000800
 80047e4:	48000c00 	.word	0x48000c00
 80047e8:	48001000 	.word	0x48001000
 80047ec:	48001400 	.word	0x48001400
 80047f0:	40010400 	.word	0x40010400

080047f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	460b      	mov	r3, r1
 80047fe:	807b      	strh	r3, [r7, #2]
 8004800:	4613      	mov	r3, r2
 8004802:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004804:	787b      	ldrb	r3, [r7, #1]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800480a:	887a      	ldrh	r2, [r7, #2]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004810:	e002      	b.n	8004818 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004812:	887a      	ldrh	r2, [r7, #2]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004818:	bf00      	nop
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004824:	b480      	push	{r7}
 8004826:	b085      	sub	sp, #20
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	460b      	mov	r3, r1
 800482e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004836:	887a      	ldrh	r2, [r7, #2]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	4013      	ands	r3, r2
 800483c:	041a      	lsls	r2, r3, #16
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	43d9      	mvns	r1, r3
 8004842:	887b      	ldrh	r3, [r7, #2]
 8004844:	400b      	ands	r3, r1
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	619a      	str	r2, [r3, #24]
}
 800484c:	bf00      	nop
 800484e:	3714      	adds	r7, #20
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr

08004858 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	4603      	mov	r3, r0
 8004860:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004862:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d006      	beq.n	800487c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800486e:	4a05      	ldr	r2, [pc, #20]	; (8004884 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004870:	88fb      	ldrh	r3, [r7, #6]
 8004872:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004874:	88fb      	ldrh	r3, [r7, #6]
 8004876:	4618      	mov	r0, r3
 8004878:	f000 f806 	bl	8004888 <HAL_GPIO_EXTI_Callback>
  }
}
 800487c:	bf00      	nop
 800487e:	3708      	adds	r7, #8
 8004880:	46bd      	mov	sp, r7
 8004882:	bd80      	pop	{r7, pc}
 8004884:	40010400 	.word	0x40010400

08004888 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	4603      	mov	r3, r0
 8004890:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004892:	bf00      	nop
 8004894:	370c      	adds	r7, #12
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
	...

080048a0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b085      	sub	sp, #20
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d141      	bne.n	8004932 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80048ae:	4b4b      	ldr	r3, [pc, #300]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ba:	d131      	bne.n	8004920 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80048bc:	4b47      	ldr	r3, [pc, #284]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80048c2:	4a46      	ldr	r2, [pc, #280]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048cc:	4b43      	ldr	r3, [pc, #268]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048d4:	4a41      	ldr	r2, [pc, #260]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048da:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048dc:	4b40      	ldr	r3, [pc, #256]	; (80049e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2232      	movs	r2, #50	; 0x32
 80048e2:	fb02 f303 	mul.w	r3, r2, r3
 80048e6:	4a3f      	ldr	r2, [pc, #252]	; (80049e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80048e8:	fba2 2303 	umull	r2, r3, r2, r3
 80048ec:	0c9b      	lsrs	r3, r3, #18
 80048ee:	3301      	adds	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048f2:	e002      	b.n	80048fa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	3b01      	subs	r3, #1
 80048f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80048fa:	4b38      	ldr	r3, [pc, #224]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004902:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004906:	d102      	bne.n	800490e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1f2      	bne.n	80048f4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800490e:	4b33      	ldr	r3, [pc, #204]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800491a:	d158      	bne.n	80049ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e057      	b.n	80049d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004920:	4b2e      	ldr	r3, [pc, #184]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004922:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004926:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800492c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004930:	e04d      	b.n	80049ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004938:	d141      	bne.n	80049be <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800493a:	4b28      	ldr	r3, [pc, #160]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004946:	d131      	bne.n	80049ac <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004948:	4b24      	ldr	r3, [pc, #144]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800494a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800494e:	4a23      	ldr	r2, [pc, #140]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004950:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004954:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004958:	4b20      	ldr	r3, [pc, #128]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004960:	4a1e      	ldr	r2, [pc, #120]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004962:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004966:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004968:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2232      	movs	r2, #50	; 0x32
 800496e:	fb02 f303 	mul.w	r3, r2, r3
 8004972:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004974:	fba2 2303 	umull	r2, r3, r2, r3
 8004978:	0c9b      	lsrs	r3, r3, #18
 800497a:	3301      	adds	r3, #1
 800497c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800497e:	e002      	b.n	8004986 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	3b01      	subs	r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004986:	4b15      	ldr	r3, [pc, #84]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800498e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004992:	d102      	bne.n	800499a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1f2      	bne.n	8004980 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800499a:	4b10      	ldr	r3, [pc, #64]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800499c:	695b      	ldr	r3, [r3, #20]
 800499e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049a6:	d112      	bne.n	80049ce <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e011      	b.n	80049d0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049b2:	4a0a      	ldr	r2, [pc, #40]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80049bc:	e007      	b.n	80049ce <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80049be:	4b07      	ldr	r3, [pc, #28]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80049c6:	4a05      	ldr	r2, [pc, #20]	; (80049dc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80049c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80049cc:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr
 80049dc:	40007000 	.word	0x40007000
 80049e0:	20000000 	.word	0x20000000
 80049e4:	431bde83 	.word	0x431bde83

080049e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80049ec:	4b05      	ldr	r3, [pc, #20]	; (8004a04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	4a04      	ldr	r2, [pc, #16]	; (8004a04 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80049f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049f6:	6093      	str	r3, [r2, #8]
}
 80049f8:	bf00      	nop
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr
 8004a02:	bf00      	nop
 8004a04:	40007000 	.word	0x40007000

08004a08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b088      	sub	sp, #32
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e306      	b.n	8005028 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d075      	beq.n	8004b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a26:	4b97      	ldr	r3, [pc, #604]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004a28:	689b      	ldr	r3, [r3, #8]
 8004a2a:	f003 030c 	and.w	r3, r3, #12
 8004a2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a30:	4b94      	ldr	r3, [pc, #592]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f003 0303 	and.w	r3, r3, #3
 8004a38:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	2b0c      	cmp	r3, #12
 8004a3e:	d102      	bne.n	8004a46 <HAL_RCC_OscConfig+0x3e>
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d002      	beq.n	8004a4c <HAL_RCC_OscConfig+0x44>
 8004a46:	69bb      	ldr	r3, [r7, #24]
 8004a48:	2b08      	cmp	r3, #8
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a4c:	4b8d      	ldr	r3, [pc, #564]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d05b      	beq.n	8004b10 <HAL_RCC_OscConfig+0x108>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d157      	bne.n	8004b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a60:	2301      	movs	r3, #1
 8004a62:	e2e1      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a6c:	d106      	bne.n	8004a7c <HAL_RCC_OscConfig+0x74>
 8004a6e:	4b85      	ldr	r3, [pc, #532]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a84      	ldr	r2, [pc, #528]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a78:	6013      	str	r3, [r2, #0]
 8004a7a:	e01d      	b.n	8004ab8 <HAL_RCC_OscConfig+0xb0>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a84:	d10c      	bne.n	8004aa0 <HAL_RCC_OscConfig+0x98>
 8004a86:	4b7f      	ldr	r3, [pc, #508]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a7e      	ldr	r2, [pc, #504]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a90:	6013      	str	r3, [r2, #0]
 8004a92:	4b7c      	ldr	r3, [pc, #496]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a7b      	ldr	r2, [pc, #492]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	e00b      	b.n	8004ab8 <HAL_RCC_OscConfig+0xb0>
 8004aa0:	4b78      	ldr	r3, [pc, #480]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a77      	ldr	r2, [pc, #476]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aaa:	6013      	str	r3, [r2, #0]
 8004aac:	4b75      	ldr	r3, [pc, #468]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a74      	ldr	r2, [pc, #464]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d013      	beq.n	8004ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ac0:	f7fd fade 	bl	8002080 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac8:	f7fd fada 	bl	8002080 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b64      	cmp	r3, #100	; 0x64
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e2a6      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ada:	4b6a      	ldr	r3, [pc, #424]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0xc0>
 8004ae6:	e014      	b.n	8004b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae8:	f7fd faca 	bl	8002080 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004aee:	e008      	b.n	8004b02 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004af0:	f7fd fac6 	bl	8002080 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	2b64      	cmp	r3, #100	; 0x64
 8004afc:	d901      	bls.n	8004b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e292      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004b02:	4b60      	ldr	r3, [pc, #384]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d1f0      	bne.n	8004af0 <HAL_RCC_OscConfig+0xe8>
 8004b0e:	e000      	b.n	8004b12 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0302 	and.w	r3, r3, #2
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d075      	beq.n	8004c0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b1e:	4b59      	ldr	r3, [pc, #356]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f003 030c 	and.w	r3, r3, #12
 8004b26:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b28:	4b56      	ldr	r3, [pc, #344]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0303 	and.w	r3, r3, #3
 8004b30:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004b32:	69bb      	ldr	r3, [r7, #24]
 8004b34:	2b0c      	cmp	r3, #12
 8004b36:	d102      	bne.n	8004b3e <HAL_RCC_OscConfig+0x136>
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	2b02      	cmp	r3, #2
 8004b3c:	d002      	beq.n	8004b44 <HAL_RCC_OscConfig+0x13c>
 8004b3e:	69bb      	ldr	r3, [r7, #24]
 8004b40:	2b04      	cmp	r3, #4
 8004b42:	d11f      	bne.n	8004b84 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004b44:	4b4f      	ldr	r3, [pc, #316]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d005      	beq.n	8004b5c <HAL_RCC_OscConfig+0x154>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d101      	bne.n	8004b5c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004b58:	2301      	movs	r3, #1
 8004b5a:	e265      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b5c:	4b49      	ldr	r3, [pc, #292]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691b      	ldr	r3, [r3, #16]
 8004b68:	061b      	lsls	r3, r3, #24
 8004b6a:	4946      	ldr	r1, [pc, #280]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004b70:	4b45      	ldr	r3, [pc, #276]	; (8004c88 <HAL_RCC_OscConfig+0x280>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fc fe9b 	bl	80018b0 <HAL_InitTick>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d043      	beq.n	8004c08 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e251      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d023      	beq.n	8004bd4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b8c:	4b3d      	ldr	r3, [pc, #244]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a3c      	ldr	r2, [pc, #240]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b98:	f7fd fa72 	bl	8002080 <HAL_GetTick>
 8004b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba0:	f7fd fa6e 	bl	8002080 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e23a      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004bb2:	4b34      	ldr	r3, [pc, #208]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d0f0      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	061b      	lsls	r3, r3, #24
 8004bcc:	492d      	ldr	r1, [pc, #180]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	604b      	str	r3, [r1, #4]
 8004bd2:	e01a      	b.n	8004c0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd4:	4b2b      	ldr	r3, [pc, #172]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a2a      	ldr	r2, [pc, #168]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fd fa4e 	bl	8002080 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be8:	f7fd fa4a 	bl	8002080 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e216      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004bfa:	4b22      	ldr	r3, [pc, #136]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x1e0>
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f003 0308 	and.w	r3, r3, #8
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d041      	beq.n	8004c9a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d01c      	beq.n	8004c58 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c1e:	4b19      	ldr	r3, [pc, #100]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004c20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c24:	4a17      	ldr	r2, [pc, #92]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004c26:	f043 0301 	orr.w	r3, r3, #1
 8004c2a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2e:	f7fd fa27 	bl	8002080 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c34:	e008      	b.n	8004c48 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c36:	f7fd fa23 	bl	8002080 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	2b02      	cmp	r3, #2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e1ef      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c48:	4b0e      	ldr	r3, [pc, #56]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c4e:	f003 0302 	and.w	r3, r3, #2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d0ef      	beq.n	8004c36 <HAL_RCC_OscConfig+0x22e>
 8004c56:	e020      	b.n	8004c9a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c58:	4b0a      	ldr	r3, [pc, #40]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004c5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c5e:	4a09      	ldr	r2, [pc, #36]	; (8004c84 <HAL_RCC_OscConfig+0x27c>)
 8004c60:	f023 0301 	bic.w	r3, r3, #1
 8004c64:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c68:	f7fd fa0a 	bl	8002080 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c6e:	e00d      	b.n	8004c8c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c70:	f7fd fa06 	bl	8002080 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d906      	bls.n	8004c8c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e1d2      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
 8004c82:	bf00      	nop
 8004c84:	40021000 	.word	0x40021000
 8004c88:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004c8c:	4b8c      	ldr	r3, [pc, #560]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ea      	bne.n	8004c70 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 0304 	and.w	r3, r3, #4
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 80a6 	beq.w	8004df4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004cac:	4b84      	ldr	r3, [pc, #528]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d101      	bne.n	8004cbc <HAL_RCC_OscConfig+0x2b4>
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <HAL_RCC_OscConfig+0x2b6>
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00d      	beq.n	8004cde <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cc2:	4b7f      	ldr	r3, [pc, #508]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc6:	4a7e      	ldr	r2, [pc, #504]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ccc:	6593      	str	r3, [r2, #88]	; 0x58
 8004cce:	4b7c      	ldr	r3, [pc, #496]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cde:	4b79      	ldr	r3, [pc, #484]	; (8004ec4 <HAL_RCC_OscConfig+0x4bc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d118      	bne.n	8004d1c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cea:	4b76      	ldr	r3, [pc, #472]	; (8004ec4 <HAL_RCC_OscConfig+0x4bc>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a75      	ldr	r2, [pc, #468]	; (8004ec4 <HAL_RCC_OscConfig+0x4bc>)
 8004cf0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cf4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cf6:	f7fd f9c3 	bl	8002080 <HAL_GetTick>
 8004cfa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004cfc:	e008      	b.n	8004d10 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cfe:	f7fd f9bf 	bl	8002080 <HAL_GetTick>
 8004d02:	4602      	mov	r2, r0
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	1ad3      	subs	r3, r2, r3
 8004d08:	2b02      	cmp	r3, #2
 8004d0a:	d901      	bls.n	8004d10 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004d0c:	2303      	movs	r3, #3
 8004d0e:	e18b      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d10:	4b6c      	ldr	r3, [pc, #432]	; (8004ec4 <HAL_RCC_OscConfig+0x4bc>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d0f0      	beq.n	8004cfe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d108      	bne.n	8004d36 <HAL_RCC_OscConfig+0x32e>
 8004d24:	4b66      	ldr	r3, [pc, #408]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d2a:	4a65      	ldr	r2, [pc, #404]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004d2c:	f043 0301 	orr.w	r3, r3, #1
 8004d30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d34:	e024      	b.n	8004d80 <HAL_RCC_OscConfig+0x378>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b05      	cmp	r3, #5
 8004d3c:	d110      	bne.n	8004d60 <HAL_RCC_OscConfig+0x358>
 8004d3e:	4b60      	ldr	r3, [pc, #384]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	4a5e      	ldr	r2, [pc, #376]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004d46:	f043 0304 	orr.w	r3, r3, #4
 8004d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d4e:	4b5c      	ldr	r3, [pc, #368]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d54:	4a5a      	ldr	r2, [pc, #360]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d5e:	e00f      	b.n	8004d80 <HAL_RCC_OscConfig+0x378>
 8004d60:	4b57      	ldr	r3, [pc, #348]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d66:	4a56      	ldr	r2, [pc, #344]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004d68:	f023 0301 	bic.w	r3, r3, #1
 8004d6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004d70:	4b53      	ldr	r3, [pc, #332]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d76:	4a52      	ldr	r2, [pc, #328]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004d78:	f023 0304 	bic.w	r3, r3, #4
 8004d7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d016      	beq.n	8004db6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d88:	f7fd f97a 	bl	8002080 <HAL_GetTick>
 8004d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d8e:	e00a      	b.n	8004da6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d90:	f7fd f976 	bl	8002080 <HAL_GetTick>
 8004d94:	4602      	mov	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d901      	bls.n	8004da6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004da2:	2303      	movs	r3, #3
 8004da4:	e140      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004da6:	4b46      	ldr	r3, [pc, #280]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004da8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dac:	f003 0302 	and.w	r3, r3, #2
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0ed      	beq.n	8004d90 <HAL_RCC_OscConfig+0x388>
 8004db4:	e015      	b.n	8004de2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db6:	f7fd f963 	bl	8002080 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fd f95f 	bl	8002080 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e129      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004dd4:	4b3a      	ldr	r3, [pc, #232]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1ed      	bne.n	8004dbe <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004de2:	7ffb      	ldrb	r3, [r7, #31]
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d105      	bne.n	8004df4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004de8:	4b35      	ldr	r3, [pc, #212]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	4a34      	ldr	r2, [pc, #208]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004dee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004df2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0320 	and.w	r3, r3, #32
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d03c      	beq.n	8004e7a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01c      	beq.n	8004e42 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e08:	4b2d      	ldr	r3, [pc, #180]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004e0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e0e:	4a2c      	ldr	r2, [pc, #176]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e18:	f7fd f932 	bl	8002080 <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e20:	f7fd f92e 	bl	8002080 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e0fa      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e32:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004e34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e38:	f003 0302 	and.w	r3, r3, #2
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0ef      	beq.n	8004e20 <HAL_RCC_OscConfig+0x418>
 8004e40:	e01b      	b.n	8004e7a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004e42:	4b1f      	ldr	r3, [pc, #124]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004e44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e48:	4a1d      	ldr	r2, [pc, #116]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004e4a:	f023 0301 	bic.w	r3, r3, #1
 8004e4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e52:	f7fd f915 	bl	8002080 <HAL_GetTick>
 8004e56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e58:	e008      	b.n	8004e6c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e5a:	f7fd f911 	bl	8002080 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	2b02      	cmp	r3, #2
 8004e66:	d901      	bls.n	8004e6c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e0dd      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004e6c:	4b14      	ldr	r3, [pc, #80]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004e6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1ef      	bne.n	8004e5a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	69db      	ldr	r3, [r3, #28]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 80d1 	beq.w	8005026 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e84:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	f003 030c 	and.w	r3, r3, #12
 8004e8c:	2b0c      	cmp	r3, #12
 8004e8e:	f000 808b 	beq.w	8004fa8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	69db      	ldr	r3, [r3, #28]
 8004e96:	2b02      	cmp	r3, #2
 8004e98:	d15e      	bne.n	8004f58 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e9a:	4b09      	ldr	r3, [pc, #36]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <HAL_RCC_OscConfig+0x4b8>)
 8004ea0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fd f8eb 	bl	8002080 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004eac:	e00c      	b.n	8004ec8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eae:	f7fd f8e7 	bl	8002080 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d905      	bls.n	8004ec8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e0b3      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec8:	4b59      	ldr	r3, [pc, #356]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d1ec      	bne.n	8004eae <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed4:	4b56      	ldr	r3, [pc, #344]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	4b56      	ldr	r3, [pc, #344]	; (8005034 <HAL_RCC_OscConfig+0x62c>)
 8004eda:	4013      	ands	r3, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6a11      	ldr	r1, [r2, #32]
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ee4:	3a01      	subs	r2, #1
 8004ee6:	0112      	lsls	r2, r2, #4
 8004ee8:	4311      	orrs	r1, r2
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004eee:	0212      	lsls	r2, r2, #8
 8004ef0:	4311      	orrs	r1, r2
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004ef6:	0852      	lsrs	r2, r2, #1
 8004ef8:	3a01      	subs	r2, #1
 8004efa:	0552      	lsls	r2, r2, #21
 8004efc:	4311      	orrs	r1, r2
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f02:	0852      	lsrs	r2, r2, #1
 8004f04:	3a01      	subs	r2, #1
 8004f06:	0652      	lsls	r2, r2, #25
 8004f08:	4311      	orrs	r1, r2
 8004f0a:	687a      	ldr	r2, [r7, #4]
 8004f0c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004f0e:	06d2      	lsls	r2, r2, #27
 8004f10:	430a      	orrs	r2, r1
 8004f12:	4947      	ldr	r1, [pc, #284]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f14:	4313      	orrs	r3, r2
 8004f16:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f18:	4b45      	ldr	r3, [pc, #276]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a44      	ldr	r2, [pc, #272]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f22:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004f24:	4b42      	ldr	r3, [pc, #264]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	4a41      	ldr	r2, [pc, #260]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f30:	f7fd f8a6 	bl	8002080 <HAL_GetTick>
 8004f34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f36:	e008      	b.n	8004f4a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f38:	f7fd f8a2 	bl	8002080 <HAL_GetTick>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	2b02      	cmp	r3, #2
 8004f44:	d901      	bls.n	8004f4a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004f46:	2303      	movs	r3, #3
 8004f48:	e06e      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f4a:	4b39      	ldr	r3, [pc, #228]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d0f0      	beq.n	8004f38 <HAL_RCC_OscConfig+0x530>
 8004f56:	e066      	b.n	8005026 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f58:	4b35      	ldr	r3, [pc, #212]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a34      	ldr	r2, [pc, #208]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f62:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004f64:	4b32      	ldr	r3, [pc, #200]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4a31      	ldr	r2, [pc, #196]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f6a:	f023 0303 	bic.w	r3, r3, #3
 8004f6e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004f70:	4b2f      	ldr	r3, [pc, #188]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4a2e      	ldr	r2, [pc, #184]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f76:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fd f87e 	bl	8002080 <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f88:	f7fd f87a 	bl	8002080 <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e046      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004f9a:	4b25      	ldr	r3, [pc, #148]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x580>
 8004fa6:	e03e      	b.n	8005026 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	69db      	ldr	r3, [r3, #28]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	e039      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004fb4:	4b1e      	ldr	r3, [pc, #120]	; (8005030 <HAL_RCC_OscConfig+0x628>)
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	f003 0203 	and.w	r2, r3, #3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d12c      	bne.n	8005022 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d123      	bne.n	8005022 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d11b      	bne.n	8005022 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d113      	bne.n	8005022 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005004:	085b      	lsrs	r3, r3, #1
 8005006:	3b01      	subs	r3, #1
 8005008:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800500a:	429a      	cmp	r2, r3
 800500c:	d109      	bne.n	8005022 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005018:	085b      	lsrs	r3, r3, #1
 800501a:	3b01      	subs	r3, #1
 800501c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800501e:	429a      	cmp	r2, r3
 8005020:	d001      	beq.n	8005026 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	e000      	b.n	8005028 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3720      	adds	r7, #32
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40021000 	.word	0x40021000
 8005034:	019f800c 	.word	0x019f800c

08005038 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b086      	sub	sp, #24
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005042:	2300      	movs	r3, #0
 8005044:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e11e      	b.n	800528e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005050:	4b91      	ldr	r3, [pc, #580]	; (8005298 <HAL_RCC_ClockConfig+0x260>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	683a      	ldr	r2, [r7, #0]
 800505a:	429a      	cmp	r2, r3
 800505c:	d910      	bls.n	8005080 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800505e:	4b8e      	ldr	r3, [pc, #568]	; (8005298 <HAL_RCC_ClockConfig+0x260>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f023 020f 	bic.w	r2, r3, #15
 8005066:	498c      	ldr	r1, [pc, #560]	; (8005298 <HAL_RCC_ClockConfig+0x260>)
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	4313      	orrs	r3, r2
 800506c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800506e:	4b8a      	ldr	r3, [pc, #552]	; (8005298 <HAL_RCC_ClockConfig+0x260>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 030f 	and.w	r3, r3, #15
 8005076:	683a      	ldr	r2, [r7, #0]
 8005078:	429a      	cmp	r2, r3
 800507a:	d001      	beq.n	8005080 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e106      	b.n	800528e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 0301 	and.w	r3, r3, #1
 8005088:	2b00      	cmp	r3, #0
 800508a:	d073      	beq.n	8005174 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b03      	cmp	r3, #3
 8005092:	d129      	bne.n	80050e8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005094:	4b81      	ldr	r3, [pc, #516]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0f4      	b.n	800528e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80050a4:	f000 f9d0 	bl	8005448 <RCC_GetSysClockFreqFromPLLSource>
 80050a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4a7c      	ldr	r2, [pc, #496]	; (80052a0 <HAL_RCC_ClockConfig+0x268>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d93f      	bls.n	8005132 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050b2:	4b7a      	ldr	r3, [pc, #488]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d009      	beq.n	80050d2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d033      	beq.n	8005132 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d12f      	bne.n	8005132 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80050d2:	4b72      	ldr	r3, [pc, #456]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050da:	4a70      	ldr	r2, [pc, #448]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 80050dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80050e2:	2380      	movs	r3, #128	; 0x80
 80050e4:	617b      	str	r3, [r7, #20]
 80050e6:	e024      	b.n	8005132 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	2b02      	cmp	r3, #2
 80050ee:	d107      	bne.n	8005100 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80050f0:	4b6a      	ldr	r3, [pc, #424]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d109      	bne.n	8005110 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	e0c6      	b.n	800528e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005100:	4b66      	ldr	r3, [pc, #408]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e0be      	b.n	800528e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005110:	f000 f8ce 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8005114:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	4a61      	ldr	r2, [pc, #388]	; (80052a0 <HAL_RCC_ClockConfig+0x268>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d909      	bls.n	8005132 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800511e:	4b5f      	ldr	r3, [pc, #380]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005126:	4a5d      	ldr	r2, [pc, #372]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 8005128:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800512e:	2380      	movs	r3, #128	; 0x80
 8005130:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005132:	4b5a      	ldr	r3, [pc, #360]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	f023 0203 	bic.w	r2, r3, #3
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4957      	ldr	r1, [pc, #348]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 8005140:	4313      	orrs	r3, r2
 8005142:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005144:	f7fc ff9c 	bl	8002080 <HAL_GetTick>
 8005148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514a:	e00a      	b.n	8005162 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800514c:	f7fc ff98 	bl	8002080 <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	f241 3288 	movw	r2, #5000	; 0x1388
 800515a:	4293      	cmp	r3, r2
 800515c:	d901      	bls.n	8005162 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e095      	b.n	800528e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005162:	4b4e      	ldr	r3, [pc, #312]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	f003 020c 	and.w	r2, r3, #12
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	429a      	cmp	r2, r3
 8005172:	d1eb      	bne.n	800514c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d023      	beq.n	80051c8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d005      	beq.n	8005198 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800518c:	4b43      	ldr	r3, [pc, #268]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 800518e:	689b      	ldr	r3, [r3, #8]
 8005190:	4a42      	ldr	r2, [pc, #264]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 8005192:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005196:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80051a4:	4b3d      	ldr	r3, [pc, #244]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80051ac:	4a3b      	ldr	r2, [pc, #236]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 80051ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80051b2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051b4:	4b39      	ldr	r3, [pc, #228]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	689b      	ldr	r3, [r3, #8]
 80051c0:	4936      	ldr	r1, [pc, #216]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
 80051c6:	e008      	b.n	80051da <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2b80      	cmp	r3, #128	; 0x80
 80051cc:	d105      	bne.n	80051da <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80051ce:	4b33      	ldr	r3, [pc, #204]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	4a32      	ldr	r2, [pc, #200]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 80051d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80051d8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80051da:	4b2f      	ldr	r3, [pc, #188]	; (8005298 <HAL_RCC_ClockConfig+0x260>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d21d      	bcs.n	8005224 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e8:	4b2b      	ldr	r3, [pc, #172]	; (8005298 <HAL_RCC_ClockConfig+0x260>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f023 020f 	bic.w	r2, r3, #15
 80051f0:	4929      	ldr	r1, [pc, #164]	; (8005298 <HAL_RCC_ClockConfig+0x260>)
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80051f8:	f7fc ff42 	bl	8002080 <HAL_GetTick>
 80051fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051fe:	e00a      	b.n	8005216 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005200:	f7fc ff3e 	bl	8002080 <HAL_GetTick>
 8005204:	4602      	mov	r2, r0
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	1ad3      	subs	r3, r2, r3
 800520a:	f241 3288 	movw	r2, #5000	; 0x1388
 800520e:	4293      	cmp	r3, r2
 8005210:	d901      	bls.n	8005216 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005212:	2303      	movs	r3, #3
 8005214:	e03b      	b.n	800528e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005216:	4b20      	ldr	r3, [pc, #128]	; (8005298 <HAL_RCC_ClockConfig+0x260>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 030f 	and.w	r3, r3, #15
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	429a      	cmp	r2, r3
 8005222:	d1ed      	bne.n	8005200 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d008      	beq.n	8005242 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005230:	4b1a      	ldr	r3, [pc, #104]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	4917      	ldr	r1, [pc, #92]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 800523e:	4313      	orrs	r3, r2
 8005240:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0308 	and.w	r3, r3, #8
 800524a:	2b00      	cmp	r3, #0
 800524c:	d009      	beq.n	8005262 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800524e:	4b13      	ldr	r3, [pc, #76]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 8005250:	689b      	ldr	r3, [r3, #8]
 8005252:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	00db      	lsls	r3, r3, #3
 800525c:	490f      	ldr	r1, [pc, #60]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 800525e:	4313      	orrs	r3, r2
 8005260:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005262:	f000 f825 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8005266:	4602      	mov	r2, r0
 8005268:	4b0c      	ldr	r3, [pc, #48]	; (800529c <HAL_RCC_ClockConfig+0x264>)
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	091b      	lsrs	r3, r3, #4
 800526e:	f003 030f 	and.w	r3, r3, #15
 8005272:	490c      	ldr	r1, [pc, #48]	; (80052a4 <HAL_RCC_ClockConfig+0x26c>)
 8005274:	5ccb      	ldrb	r3, [r1, r3]
 8005276:	f003 031f 	and.w	r3, r3, #31
 800527a:	fa22 f303 	lsr.w	r3, r2, r3
 800527e:	4a0a      	ldr	r2, [pc, #40]	; (80052a8 <HAL_RCC_ClockConfig+0x270>)
 8005280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005282:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <HAL_RCC_ClockConfig+0x274>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fc fb12 	bl	80018b0 <HAL_InitTick>
 800528c:	4603      	mov	r3, r0
}
 800528e:	4618      	mov	r0, r3
 8005290:	3718      	adds	r7, #24
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	40022000 	.word	0x40022000
 800529c:	40021000 	.word	0x40021000
 80052a0:	04c4b400 	.word	0x04c4b400
 80052a4:	0800ae94 	.word	0x0800ae94
 80052a8:	20000000 	.word	0x20000000
 80052ac:	20000004 	.word	0x20000004

080052b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052b6:	4b2c      	ldr	r3, [pc, #176]	; (8005368 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f003 030c 	and.w	r3, r3, #12
 80052be:	2b04      	cmp	r3, #4
 80052c0:	d102      	bne.n	80052c8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80052c2:	4b2a      	ldr	r3, [pc, #168]	; (800536c <HAL_RCC_GetSysClockFreq+0xbc>)
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	e047      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052c8:	4b27      	ldr	r3, [pc, #156]	; (8005368 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 030c 	and.w	r3, r3, #12
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d102      	bne.n	80052da <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80052d4:	4b26      	ldr	r3, [pc, #152]	; (8005370 <HAL_RCC_GetSysClockFreq+0xc0>)
 80052d6:	613b      	str	r3, [r7, #16]
 80052d8:	e03e      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052da:	4b23      	ldr	r3, [pc, #140]	; (8005368 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052dc:	689b      	ldr	r3, [r3, #8]
 80052de:	f003 030c 	and.w	r3, r3, #12
 80052e2:	2b0c      	cmp	r3, #12
 80052e4:	d136      	bne.n	8005354 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80052e6:	4b20      	ldr	r3, [pc, #128]	; (8005368 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	f003 0303 	and.w	r3, r3, #3
 80052ee:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80052f0:	4b1d      	ldr	r3, [pc, #116]	; (8005368 <HAL_RCC_GetSysClockFreq+0xb8>)
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	091b      	lsrs	r3, r3, #4
 80052f6:	f003 030f 	and.w	r3, r3, #15
 80052fa:	3301      	adds	r3, #1
 80052fc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b03      	cmp	r3, #3
 8005302:	d10c      	bne.n	800531e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005304:	4a1a      	ldr	r2, [pc, #104]	; (8005370 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	fbb2 f3f3 	udiv	r3, r2, r3
 800530c:	4a16      	ldr	r2, [pc, #88]	; (8005368 <HAL_RCC_GetSysClockFreq+0xb8>)
 800530e:	68d2      	ldr	r2, [r2, #12]
 8005310:	0a12      	lsrs	r2, r2, #8
 8005312:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005316:	fb02 f303 	mul.w	r3, r2, r3
 800531a:	617b      	str	r3, [r7, #20]
      break;
 800531c:	e00c      	b.n	8005338 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800531e:	4a13      	ldr	r2, [pc, #76]	; (800536c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	fbb2 f3f3 	udiv	r3, r2, r3
 8005326:	4a10      	ldr	r2, [pc, #64]	; (8005368 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005328:	68d2      	ldr	r2, [r2, #12]
 800532a:	0a12      	lsrs	r2, r2, #8
 800532c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005330:	fb02 f303 	mul.w	r3, r2, r3
 8005334:	617b      	str	r3, [r7, #20]
      break;
 8005336:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <HAL_RCC_GetSysClockFreq+0xb8>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	0e5b      	lsrs	r3, r3, #25
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	3301      	adds	r3, #1
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005348:	697a      	ldr	r2, [r7, #20]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005350:	613b      	str	r3, [r7, #16]
 8005352:	e001      	b.n	8005358 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005354:	2300      	movs	r3, #0
 8005356:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005358:	693b      	ldr	r3, [r7, #16]
}
 800535a:	4618      	mov	r0, r3
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40021000 	.word	0x40021000
 800536c:	00f42400 	.word	0x00f42400
 8005370:	016e3600 	.word	0x016e3600

08005374 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005374:	b480      	push	{r7}
 8005376:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005378:	4b03      	ldr	r3, [pc, #12]	; (8005388 <HAL_RCC_GetHCLKFreq+0x14>)
 800537a:	681b      	ldr	r3, [r3, #0]
}
 800537c:	4618      	mov	r0, r3
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	20000000 	.word	0x20000000

0800538c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005390:	f7ff fff0 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0a1b      	lsrs	r3, r3, #8
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4904      	ldr	r1, [pc, #16]	; (80053b4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	f003 031f 	and.w	r3, r3, #31
 80053a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	bd80      	pop	{r7, pc}
 80053b0:	40021000 	.word	0x40021000
 80053b4:	0800aea4 	.word	0x0800aea4

080053b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80053bc:	f7ff ffda 	bl	8005374 <HAL_RCC_GetHCLKFreq>
 80053c0:	4602      	mov	r2, r0
 80053c2:	4b06      	ldr	r3, [pc, #24]	; (80053dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	0adb      	lsrs	r3, r3, #11
 80053c8:	f003 0307 	and.w	r3, r3, #7
 80053cc:	4904      	ldr	r1, [pc, #16]	; (80053e0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80053ce:	5ccb      	ldrb	r3, [r1, r3]
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40021000 	.word	0x40021000
 80053e0:	0800aea4 	.word	0x0800aea4

080053e4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	220f      	movs	r2, #15
 80053f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80053f4:	4b12      	ldr	r3, [pc, #72]	; (8005440 <HAL_RCC_GetClockConfig+0x5c>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 0203 	and.w	r2, r3, #3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005400:	4b0f      	ldr	r3, [pc, #60]	; (8005440 <HAL_RCC_GetClockConfig+0x5c>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800540c:	4b0c      	ldr	r3, [pc, #48]	; (8005440 <HAL_RCC_GetClockConfig+0x5c>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005418:	4b09      	ldr	r3, [pc, #36]	; (8005440 <HAL_RCC_GetClockConfig+0x5c>)
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	08db      	lsrs	r3, r3, #3
 800541e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005426:	4b07      	ldr	r3, [pc, #28]	; (8005444 <HAL_RCC_GetClockConfig+0x60>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 020f 	and.w	r2, r3, #15
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	601a      	str	r2, [r3, #0]
}
 8005432:	bf00      	nop
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop
 8005440:	40021000 	.word	0x40021000
 8005444:	40022000 	.word	0x40022000

08005448 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005448:	b480      	push	{r7}
 800544a:	b087      	sub	sp, #28
 800544c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800544e:	4b1e      	ldr	r3, [pc, #120]	; (80054c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	f003 0303 	and.w	r3, r3, #3
 8005456:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005458:	4b1b      	ldr	r3, [pc, #108]	; (80054c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	091b      	lsrs	r3, r3, #4
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	3301      	adds	r3, #1
 8005464:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	2b03      	cmp	r3, #3
 800546a:	d10c      	bne.n	8005486 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800546c:	4a17      	ldr	r2, [pc, #92]	; (80054cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	fbb2 f3f3 	udiv	r3, r2, r3
 8005474:	4a14      	ldr	r2, [pc, #80]	; (80054c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005476:	68d2      	ldr	r2, [r2, #12]
 8005478:	0a12      	lsrs	r2, r2, #8
 800547a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800547e:	fb02 f303 	mul.w	r3, r2, r3
 8005482:	617b      	str	r3, [r7, #20]
    break;
 8005484:	e00c      	b.n	80054a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005486:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	fbb2 f3f3 	udiv	r3, r2, r3
 800548e:	4a0e      	ldr	r2, [pc, #56]	; (80054c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005490:	68d2      	ldr	r2, [r2, #12]
 8005492:	0a12      	lsrs	r2, r2, #8
 8005494:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005498:	fb02 f303 	mul.w	r3, r2, r3
 800549c:	617b      	str	r3, [r7, #20]
    break;
 800549e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054a0:	4b09      	ldr	r3, [pc, #36]	; (80054c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	0e5b      	lsrs	r3, r3, #25
 80054a6:	f003 0303 	and.w	r3, r3, #3
 80054aa:	3301      	adds	r3, #1
 80054ac:	005b      	lsls	r3, r3, #1
 80054ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80054b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80054ba:	687b      	ldr	r3, [r7, #4]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	371c      	adds	r7, #28
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	40021000 	.word	0x40021000
 80054cc:	016e3600 	.word	0x016e3600
 80054d0:	00f42400 	.word	0x00f42400

080054d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80054dc:	2300      	movs	r3, #0
 80054de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80054e0:	2300      	movs	r3, #0
 80054e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 8098 	beq.w	8005622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f2:	2300      	movs	r3, #0
 80054f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80054f6:	4b43      	ldr	r3, [pc, #268]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d10d      	bne.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005502:	4b40      	ldr	r3, [pc, #256]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005506:	4a3f      	ldr	r2, [pc, #252]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800550c:	6593      	str	r3, [r2, #88]	; 0x58
 800550e:	4b3d      	ldr	r3, [pc, #244]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005516:	60bb      	str	r3, [r7, #8]
 8005518:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800551a:	2301      	movs	r3, #1
 800551c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800551e:	4b3a      	ldr	r3, [pc, #232]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a39      	ldr	r2, [pc, #228]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005528:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800552a:	f7fc fda9 	bl	8002080 <HAL_GetTick>
 800552e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005530:	e009      	b.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005532:	f7fc fda5 	bl	8002080 <HAL_GetTick>
 8005536:	4602      	mov	r2, r0
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	1ad3      	subs	r3, r2, r3
 800553c:	2b02      	cmp	r3, #2
 800553e:	d902      	bls.n	8005546 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005540:	2303      	movs	r3, #3
 8005542:	74fb      	strb	r3, [r7, #19]
        break;
 8005544:	e005      	b.n	8005552 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005546:	4b30      	ldr	r3, [pc, #192]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800554e:	2b00      	cmp	r3, #0
 8005550:	d0ef      	beq.n	8005532 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005552:	7cfb      	ldrb	r3, [r7, #19]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d159      	bne.n	800560c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005558:	4b2a      	ldr	r3, [pc, #168]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800555a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005562:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d01e      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	429a      	cmp	r2, r3
 8005572:	d019      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005574:	4b23      	ldr	r3, [pc, #140]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800557e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005580:	4b20      	ldr	r3, [pc, #128]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005586:	4a1f      	ldr	r2, [pc, #124]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800558c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005590:	4b1c      	ldr	r3, [pc, #112]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005596:	4a1b      	ldr	r2, [pc, #108]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005598:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800559c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80055a0:	4a18      	ldr	r2, [pc, #96]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d016      	beq.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b2:	f7fc fd65 	bl	8002080 <HAL_GetTick>
 80055b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055b8:	e00b      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055ba:	f7fc fd61 	bl	8002080 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d902      	bls.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	74fb      	strb	r3, [r7, #19]
            break;
 80055d0:	e006      	b.n	80055e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d8:	f003 0302 	and.w	r3, r3, #2
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d0ec      	beq.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80055e0:	7cfb      	ldrb	r3, [r7, #19]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10b      	bne.n	80055fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055e6:	4b07      	ldr	r3, [pc, #28]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055f4:	4903      	ldr	r1, [pc, #12]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80055fc:	e008      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80055fe:	7cfb      	ldrb	r3, [r7, #19]
 8005600:	74bb      	strb	r3, [r7, #18]
 8005602:	e005      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005604:	40021000 	.word	0x40021000
 8005608:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800560c:	7cfb      	ldrb	r3, [r7, #19]
 800560e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005610:	7c7b      	ldrb	r3, [r7, #17]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d105      	bne.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005616:	4ba7      	ldr	r3, [pc, #668]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800561a:	4aa6      	ldr	r2, [pc, #664]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800561c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005620:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f003 0301 	and.w	r3, r3, #1
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00a      	beq.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800562e:	4ba1      	ldr	r3, [pc, #644]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	f023 0203 	bic.w	r2, r3, #3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	499d      	ldr	r1, [pc, #628]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800563e:	4313      	orrs	r3, r2
 8005640:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0302 	and.w	r3, r3, #2
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005650:	4b98      	ldr	r3, [pc, #608]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005656:	f023 020c 	bic.w	r2, r3, #12
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	4995      	ldr	r1, [pc, #596]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005660:	4313      	orrs	r3, r2
 8005662:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005672:	4b90      	ldr	r3, [pc, #576]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005674:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005678:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	498c      	ldr	r1, [pc, #560]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005694:	4b87      	ldr	r3, [pc, #540]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800569a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	4984      	ldr	r1, [pc, #528]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0310 	and.w	r3, r3, #16
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80056b6:	4b7f      	ldr	r3, [pc, #508]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	695b      	ldr	r3, [r3, #20]
 80056c4:	497b      	ldr	r1, [pc, #492]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056d8:	4b76      	ldr	r3, [pc, #472]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056de:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	4973      	ldr	r1, [pc, #460]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056fa:	4b6e      	ldr	r3, [pc, #440]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80056fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005700:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	69db      	ldr	r3, [r3, #28]
 8005708:	496a      	ldr	r1, [pc, #424]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800570a:	4313      	orrs	r3, r2
 800570c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800571c:	4b65      	ldr	r3, [pc, #404]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800571e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005722:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	4962      	ldr	r1, [pc, #392]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800572c:	4313      	orrs	r3, r2
 800572e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800573e:	4b5d      	ldr	r3, [pc, #372]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574c:	4959      	ldr	r1, [pc, #356]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00a      	beq.n	8005776 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005760:	4b54      	ldr	r3, [pc, #336]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005762:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005766:	f023 0203 	bic.w	r2, r3, #3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800576e:	4951      	ldr	r1, [pc, #324]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005770:	4313      	orrs	r3, r2
 8005772:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00a      	beq.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005782:	4b4c      	ldr	r3, [pc, #304]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005788:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005790:	4948      	ldr	r1, [pc, #288]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005792:	4313      	orrs	r3, r2
 8005794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d015      	beq.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057a4:	4b43      	ldr	r3, [pc, #268]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057aa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057b2:	4940      	ldr	r1, [pc, #256]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057b4:	4313      	orrs	r3, r2
 80057b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057c2:	d105      	bne.n	80057d0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057c4:	4b3b      	ldr	r3, [pc, #236]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4a3a      	ldr	r2, [pc, #232]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80057ce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d015      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80057dc:	4b35      	ldr	r3, [pc, #212]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057ea:	4932      	ldr	r1, [pc, #200]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057ec:	4313      	orrs	r3, r2
 80057ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057fa:	d105      	bne.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80057fc:	4b2d      	ldr	r3, [pc, #180]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80057fe:	68db      	ldr	r3, [r3, #12]
 8005800:	4a2c      	ldr	r2, [pc, #176]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005806:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d015      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005814:	4b27      	ldr	r3, [pc, #156]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005816:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800581a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	4924      	ldr	r1, [pc, #144]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005824:	4313      	orrs	r3, r2
 8005826:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005832:	d105      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005834:	4b1f      	ldr	r3, [pc, #124]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	4a1e      	ldr	r2, [pc, #120]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800583a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800583e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d015      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800584c:	4b19      	ldr	r3, [pc, #100]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800584e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005852:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800585a:	4916      	ldr	r1, [pc, #88]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800585c:	4313      	orrs	r3, r2
 800585e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005866:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800586a:	d105      	bne.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800586c:	4b11      	ldr	r3, [pc, #68]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	4a10      	ldr	r2, [pc, #64]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005872:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005876:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d019      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005884:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	4908      	ldr	r1, [pc, #32]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005894:	4313      	orrs	r3, r2
 8005896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800589e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058a2:	d109      	bne.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80058a4:	4b03      	ldr	r3, [pc, #12]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058a6:	68db      	ldr	r3, [r3, #12]
 80058a8:	4a02      	ldr	r2, [pc, #8]	; (80058b4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80058ae:	60d3      	str	r3, [r2, #12]
 80058b0:	e002      	b.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80058b2:	bf00      	nop
 80058b4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d015      	beq.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80058c4:	4b29      	ldr	r3, [pc, #164]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d2:	4926      	ldr	r1, [pc, #152]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058d4:	4313      	orrs	r3, r2
 80058d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058e2:	d105      	bne.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80058e4:	4b21      	ldr	r3, [pc, #132]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058e6:	68db      	ldr	r3, [r3, #12]
 80058e8:	4a20      	ldr	r2, [pc, #128]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058ee:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d015      	beq.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80058fc:	4b1b      	ldr	r3, [pc, #108]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590a:	4918      	ldr	r1, [pc, #96]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800590c:	4313      	orrs	r3, r2
 800590e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800591a:	d105      	bne.n	8005928 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800591c:	4b13      	ldr	r3, [pc, #76]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	4a12      	ldr	r2, [pc, #72]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005922:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005926:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d015      	beq.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005934:	4b0d      	ldr	r3, [pc, #52]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800593a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005942:	490a      	ldr	r1, [pc, #40]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005944:	4313      	orrs	r3, r2
 8005946:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800594e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005952:	d105      	bne.n	8005960 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005954:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	4a04      	ldr	r2, [pc, #16]	; (800596c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800595a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800595e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005960:	7cbb      	ldrb	r3, [r7, #18]
}
 8005962:	4618      	mov	r0, r3
 8005964:	3718      	adds	r7, #24
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}
 800596a:	bf00      	nop
 800596c:	40021000 	.word	0x40021000

08005970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d101      	bne.n	8005982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e049      	b.n	8005a16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b00      	cmp	r3, #0
 800598c:	d106      	bne.n	800599c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f7fc f9fe 	bl	8001d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	3304      	adds	r3, #4
 80059ac:	4619      	mov	r1, r3
 80059ae:	4610      	mov	r0, r2
 80059b0:	f000 fdf4 	bl	800659c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2201      	movs	r2, #1
 80059d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a2e:	b2db      	uxtb	r3, r3
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d001      	beq.n	8005a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a34:	2301      	movs	r3, #1
 8005a36:	e054      	b.n	8005ae2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2202      	movs	r2, #2
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	68da      	ldr	r2, [r3, #12]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f042 0201 	orr.w	r2, r2, #1
 8005a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a26      	ldr	r2, [pc, #152]	; (8005af0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d022      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d01d      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a22      	ldr	r2, [pc, #136]	; (8005af4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d018      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a21      	ldr	r2, [pc, #132]	; (8005af8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1f      	ldr	r2, [pc, #124]	; (8005afc <HAL_TIM_Base_Start_IT+0xdc>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00e      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1e      	ldr	r2, [pc, #120]	; (8005b00 <HAL_TIM_Base_Start_IT+0xe0>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a1c      	ldr	r2, [pc, #112]	; (8005b04 <HAL_TIM_Base_Start_IT+0xe4>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_TIM_Base_Start_IT+0x80>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a1b      	ldr	r2, [pc, #108]	; (8005b08 <HAL_TIM_Base_Start_IT+0xe8>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d115      	bne.n	8005acc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689a      	ldr	r2, [r3, #8]
 8005aa6:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <HAL_TIM_Base_Start_IT+0xec>)
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b06      	cmp	r3, #6
 8005ab0:	d015      	beq.n	8005ade <HAL_TIM_Base_Start_IT+0xbe>
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ab8:	d011      	beq.n	8005ade <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0201 	orr.w	r2, r2, #1
 8005ac8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aca:	e008      	b.n	8005ade <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f042 0201 	orr.w	r2, r2, #1
 8005ada:	601a      	str	r2, [r3, #0]
 8005adc:	e000      	b.n	8005ae0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ade:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40012c00 	.word	0x40012c00
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40000c00 	.word	0x40000c00
 8005b00:	40013400 	.word	0x40013400
 8005b04:	40014000 	.word	0x40014000
 8005b08:	40015000 	.word	0x40015000
 8005b0c:	00010007 	.word	0x00010007

08005b10 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b082      	sub	sp, #8
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d101      	bne.n	8005b22 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e049      	b.n	8005bb6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f841 	bl	8005bbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	3304      	adds	r3, #4
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4610      	mov	r0, r2
 8005b50:	f000 fd24 	bl	800659c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2201      	movs	r2, #1
 8005b58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	2201      	movs	r2, #1
 8005b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3708      	adds	r7, #8
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bbe:	b480      	push	{r7}
 8005bc0:	b083      	sub	sp, #12
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
	...

08005bd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d109      	bne.n	8005bf8 <HAL_TIM_PWM_Start+0x24>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	bf14      	ite	ne
 8005bf0:	2301      	movne	r3, #1
 8005bf2:	2300      	moveq	r3, #0
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	e03c      	b.n	8005c72 <HAL_TIM_PWM_Start+0x9e>
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d109      	bne.n	8005c12 <HAL_TIM_PWM_Start+0x3e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	bf14      	ite	ne
 8005c0a:	2301      	movne	r3, #1
 8005c0c:	2300      	moveq	r3, #0
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	e02f      	b.n	8005c72 <HAL_TIM_PWM_Start+0x9e>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	d109      	bne.n	8005c2c <HAL_TIM_PWM_Start+0x58>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	2b01      	cmp	r3, #1
 8005c22:	bf14      	ite	ne
 8005c24:	2301      	movne	r3, #1
 8005c26:	2300      	moveq	r3, #0
 8005c28:	b2db      	uxtb	r3, r3
 8005c2a:	e022      	b.n	8005c72 <HAL_TIM_PWM_Start+0x9e>
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	2b0c      	cmp	r3, #12
 8005c30:	d109      	bne.n	8005c46 <HAL_TIM_PWM_Start+0x72>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	bf14      	ite	ne
 8005c3e:	2301      	movne	r3, #1
 8005c40:	2300      	moveq	r3, #0
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	e015      	b.n	8005c72 <HAL_TIM_PWM_Start+0x9e>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d109      	bne.n	8005c60 <HAL_TIM_PWM_Start+0x8c>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	bf14      	ite	ne
 8005c58:	2301      	movne	r3, #1
 8005c5a:	2300      	moveq	r3, #0
 8005c5c:	b2db      	uxtb	r3, r3
 8005c5e:	e008      	b.n	8005c72 <HAL_TIM_PWM_Start+0x9e>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c66:	b2db      	uxtb	r3, r3
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	bf14      	ite	ne
 8005c6c:	2301      	movne	r3, #1
 8005c6e:	2300      	moveq	r3, #0
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d001      	beq.n	8005c7a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c76:	2301      	movs	r3, #1
 8005c78:	e0a6      	b.n	8005dc8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <HAL_TIM_PWM_Start+0xb6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2202      	movs	r2, #2
 8005c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c88:	e023      	b.n	8005cd2 <HAL_TIM_PWM_Start+0xfe>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d104      	bne.n	8005c9a <HAL_TIM_PWM_Start+0xc6>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c98:	e01b      	b.n	8005cd2 <HAL_TIM_PWM_Start+0xfe>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d104      	bne.n	8005caa <HAL_TIM_PWM_Start+0xd6>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2202      	movs	r2, #2
 8005ca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca8:	e013      	b.n	8005cd2 <HAL_TIM_PWM_Start+0xfe>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b0c      	cmp	r3, #12
 8005cae:	d104      	bne.n	8005cba <HAL_TIM_PWM_Start+0xe6>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cb8:	e00b      	b.n	8005cd2 <HAL_TIM_PWM_Start+0xfe>
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	2b10      	cmp	r3, #16
 8005cbe:	d104      	bne.n	8005cca <HAL_TIM_PWM_Start+0xf6>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005cc8:	e003      	b.n	8005cd2 <HAL_TIM_PWM_Start+0xfe>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2202      	movs	r2, #2
 8005cce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	6839      	ldr	r1, [r7, #0]
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f001 f8cc 	bl	8006e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a3a      	ldr	r2, [pc, #232]	; (8005dd0 <HAL_TIM_PWM_Start+0x1fc>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d018      	beq.n	8005d1c <HAL_TIM_PWM_Start+0x148>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a39      	ldr	r2, [pc, #228]	; (8005dd4 <HAL_TIM_PWM_Start+0x200>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <HAL_TIM_PWM_Start+0x148>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a37      	ldr	r2, [pc, #220]	; (8005dd8 <HAL_TIM_PWM_Start+0x204>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d00e      	beq.n	8005d1c <HAL_TIM_PWM_Start+0x148>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a36      	ldr	r2, [pc, #216]	; (8005ddc <HAL_TIM_PWM_Start+0x208>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d009      	beq.n	8005d1c <HAL_TIM_PWM_Start+0x148>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a34      	ldr	r2, [pc, #208]	; (8005de0 <HAL_TIM_PWM_Start+0x20c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d004      	beq.n	8005d1c <HAL_TIM_PWM_Start+0x148>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a33      	ldr	r2, [pc, #204]	; (8005de4 <HAL_TIM_PWM_Start+0x210>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d101      	bne.n	8005d20 <HAL_TIM_PWM_Start+0x14c>
 8005d1c:	2301      	movs	r3, #1
 8005d1e:	e000      	b.n	8005d22 <HAL_TIM_PWM_Start+0x14e>
 8005d20:	2300      	movs	r3, #0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d007      	beq.n	8005d36 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d34:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a25      	ldr	r2, [pc, #148]	; (8005dd0 <HAL_TIM_PWM_Start+0x1fc>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d022      	beq.n	8005d86 <HAL_TIM_PWM_Start+0x1b2>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d48:	d01d      	beq.n	8005d86 <HAL_TIM_PWM_Start+0x1b2>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a26      	ldr	r2, [pc, #152]	; (8005de8 <HAL_TIM_PWM_Start+0x214>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d018      	beq.n	8005d86 <HAL_TIM_PWM_Start+0x1b2>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a24      	ldr	r2, [pc, #144]	; (8005dec <HAL_TIM_PWM_Start+0x218>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d013      	beq.n	8005d86 <HAL_TIM_PWM_Start+0x1b2>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a23      	ldr	r2, [pc, #140]	; (8005df0 <HAL_TIM_PWM_Start+0x21c>)
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d00e      	beq.n	8005d86 <HAL_TIM_PWM_Start+0x1b2>
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a19      	ldr	r2, [pc, #100]	; (8005dd4 <HAL_TIM_PWM_Start+0x200>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d009      	beq.n	8005d86 <HAL_TIM_PWM_Start+0x1b2>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	4a18      	ldr	r2, [pc, #96]	; (8005dd8 <HAL_TIM_PWM_Start+0x204>)
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	d004      	beq.n	8005d86 <HAL_TIM_PWM_Start+0x1b2>
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a18      	ldr	r2, [pc, #96]	; (8005de4 <HAL_TIM_PWM_Start+0x210>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d115      	bne.n	8005db2 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	689a      	ldr	r2, [r3, #8]
 8005d8c:	4b19      	ldr	r3, [pc, #100]	; (8005df4 <HAL_TIM_PWM_Start+0x220>)
 8005d8e:	4013      	ands	r3, r2
 8005d90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2b06      	cmp	r3, #6
 8005d96:	d015      	beq.n	8005dc4 <HAL_TIM_PWM_Start+0x1f0>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9e:	d011      	beq.n	8005dc4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db0:	e008      	b.n	8005dc4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f042 0201 	orr.w	r2, r2, #1
 8005dc0:	601a      	str	r2, [r3, #0]
 8005dc2:	e000      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dc6:	2300      	movs	r3, #0
}
 8005dc8:	4618      	mov	r0, r3
 8005dca:	3710      	adds	r7, #16
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40013400 	.word	0x40013400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800
 8005de4:	40015000 	.word	0x40015000
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	00010007 	.word	0x00010007

08005df8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b082      	sub	sp, #8
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	691b      	ldr	r3, [r3, #16]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b02      	cmp	r3, #2
 8005e0c:	d122      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f003 0302 	and.w	r3, r3, #2
 8005e18:	2b02      	cmp	r3, #2
 8005e1a:	d11b      	bne.n	8005e54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f06f 0202 	mvn.w	r2, #2
 8005e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2201      	movs	r2, #1
 8005e2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	f003 0303 	and.w	r3, r3, #3
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d003      	beq.n	8005e42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fb90 	bl	8006560 <HAL_TIM_IC_CaptureCallback>
 8005e40:	e005      	b.n	8005e4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fb82 	bl	800654c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fb93 	bl	8006574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2200      	movs	r2, #0
 8005e52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	691b      	ldr	r3, [r3, #16]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d122      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	f003 0304 	and.w	r3, r3, #4
 8005e6c:	2b04      	cmp	r3, #4
 8005e6e:	d11b      	bne.n	8005ea8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f06f 0204 	mvn.w	r2, #4
 8005e78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2202      	movs	r2, #2
 8005e7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	699b      	ldr	r3, [r3, #24]
 8005e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fb66 	bl	8006560 <HAL_TIM_IC_CaptureCallback>
 8005e94:	e005      	b.n	8005ea2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 fb58 	bl	800654c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 fb69 	bl	8006574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	691b      	ldr	r3, [r3, #16]
 8005eae:	f003 0308 	and.w	r3, r3, #8
 8005eb2:	2b08      	cmp	r3, #8
 8005eb4:	d122      	bne.n	8005efc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f003 0308 	and.w	r3, r3, #8
 8005ec0:	2b08      	cmp	r3, #8
 8005ec2:	d11b      	bne.n	8005efc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f06f 0208 	mvn.w	r2, #8
 8005ecc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2204      	movs	r2, #4
 8005ed2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	69db      	ldr	r3, [r3, #28]
 8005eda:	f003 0303 	and.w	r3, r3, #3
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d003      	beq.n	8005eea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fb3c 	bl	8006560 <HAL_TIM_IC_CaptureCallback>
 8005ee8:	e005      	b.n	8005ef6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fb2e 	bl	800654c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fb3f 	bl	8006574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	691b      	ldr	r3, [r3, #16]
 8005f02:	f003 0310 	and.w	r3, r3, #16
 8005f06:	2b10      	cmp	r3, #16
 8005f08:	d122      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b10      	cmp	r3, #16
 8005f16:	d11b      	bne.n	8005f50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f06f 0210 	mvn.w	r2, #16
 8005f20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2208      	movs	r2, #8
 8005f26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fb12 	bl	8006560 <HAL_TIM_IC_CaptureCallback>
 8005f3c:	e005      	b.n	8005f4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fb04 	bl	800654c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 fb15 	bl	8006574 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	f003 0301 	and.w	r3, r3, #1
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d10e      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68db      	ldr	r3, [r3, #12]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d107      	bne.n	8005f7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	f06f 0201 	mvn.w	r2, #1
 8005f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7fb f992 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f86:	2b80      	cmp	r3, #128	; 0x80
 8005f88:	d10e      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68db      	ldr	r3, [r3, #12]
 8005f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	d107      	bne.n	8005fa8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fa2:	6878      	ldr	r0, [r7, #4]
 8005fa4:	f001 f9a2 	bl	80072ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fb6:	d10e      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68db      	ldr	r3, [r3, #12]
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b80      	cmp	r3, #128	; 0x80
 8005fc4:	d107      	bne.n	8005fd6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 f995 	bl	8007300 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe0:	2b40      	cmp	r3, #64	; 0x40
 8005fe2:	d10e      	bne.n	8006002 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fee:	2b40      	cmp	r3, #64	; 0x40
 8005ff0:	d107      	bne.n	8006002 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ffa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 fac3 	bl	8006588 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	691b      	ldr	r3, [r3, #16]
 8006008:	f003 0320 	and.w	r3, r3, #32
 800600c:	2b20      	cmp	r3, #32
 800600e:	d10e      	bne.n	800602e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	f003 0320 	and.w	r3, r3, #32
 800601a:	2b20      	cmp	r3, #32
 800601c:	d107      	bne.n	800602e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f06f 0220 	mvn.w	r2, #32
 8006026:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f001 f955 	bl	80072d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006038:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800603c:	d10f      	bne.n	800605e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800604c:	d107      	bne.n	800605e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006056:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f001 f95b 	bl	8007314 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800606c:	d10f      	bne.n	800608e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006078:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800607c:	d107      	bne.n	800608e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8006086:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 f94d 	bl	8007328 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800609c:	d10f      	bne.n	80060be <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68db      	ldr	r3, [r3, #12]
 80060a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ac:	d107      	bne.n	80060be <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80060b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f001 f93f 	bl	800733c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	691b      	ldr	r3, [r3, #16]
 80060c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060cc:	d10f      	bne.n	80060ee <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68db      	ldr	r3, [r3, #12]
 80060d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060dc:	d107      	bne.n	80060ee <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80060e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 f931 	bl	8007350 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ee:	bf00      	nop
 80060f0:	3708      	adds	r7, #8
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
	...

080060f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b086      	sub	sp, #24
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800610e:	2b01      	cmp	r3, #1
 8006110:	d101      	bne.n	8006116 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006112:	2302      	movs	r3, #2
 8006114:	e0ff      	b.n	8006316 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b14      	cmp	r3, #20
 8006122:	f200 80f0 	bhi.w	8006306 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006126:	a201      	add	r2, pc, #4	; (adr r2, 800612c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006181 	.word	0x08006181
 8006130:	08006307 	.word	0x08006307
 8006134:	08006307 	.word	0x08006307
 8006138:	08006307 	.word	0x08006307
 800613c:	080061c1 	.word	0x080061c1
 8006140:	08006307 	.word	0x08006307
 8006144:	08006307 	.word	0x08006307
 8006148:	08006307 	.word	0x08006307
 800614c:	08006203 	.word	0x08006203
 8006150:	08006307 	.word	0x08006307
 8006154:	08006307 	.word	0x08006307
 8006158:	08006307 	.word	0x08006307
 800615c:	08006243 	.word	0x08006243
 8006160:	08006307 	.word	0x08006307
 8006164:	08006307 	.word	0x08006307
 8006168:	08006307 	.word	0x08006307
 800616c:	08006285 	.word	0x08006285
 8006170:	08006307 	.word	0x08006307
 8006174:	08006307 	.word	0x08006307
 8006178:	08006307 	.word	0x08006307
 800617c:	080062c5 	.word	0x080062c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	68b9      	ldr	r1, [r7, #8]
 8006186:	4618      	mov	r0, r3
 8006188:	f000 fab0 	bl	80066ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	699a      	ldr	r2, [r3, #24]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f042 0208 	orr.w	r2, r2, #8
 800619a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	699a      	ldr	r2, [r3, #24]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f022 0204 	bic.w	r2, r2, #4
 80061aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	6999      	ldr	r1, [r3, #24]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	691a      	ldr	r2, [r3, #16]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	619a      	str	r2, [r3, #24]
      break;
 80061be:	e0a5      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68b9      	ldr	r1, [r7, #8]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f000 fb2a 	bl	8006820 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	699a      	ldr	r2, [r3, #24]
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	699a      	ldr	r2, [r3, #24]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	6999      	ldr	r1, [r3, #24]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	691b      	ldr	r3, [r3, #16]
 80061f6:	021a      	lsls	r2, r3, #8
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	619a      	str	r2, [r3, #24]
      break;
 8006200:	e084      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	4618      	mov	r0, r3
 800620a:	f000 fb9d 	bl	8006948 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69da      	ldr	r2, [r3, #28]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0208 	orr.w	r2, r2, #8
 800621c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	69da      	ldr	r2, [r3, #28]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0204 	bic.w	r2, r2, #4
 800622c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	69d9      	ldr	r1, [r3, #28]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	691a      	ldr	r2, [r3, #16]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	430a      	orrs	r2, r1
 800623e:	61da      	str	r2, [r3, #28]
      break;
 8006240:	e064      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	4618      	mov	r0, r3
 800624a:	f000 fc0f 	bl	8006a6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	69da      	ldr	r2, [r3, #28]
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800625c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	69da      	ldr	r2, [r3, #28]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800626c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	69d9      	ldr	r1, [r3, #28]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	021a      	lsls	r2, r3, #8
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	430a      	orrs	r2, r1
 8006280:	61da      	str	r2, [r3, #28]
      break;
 8006282:	e043      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68b9      	ldr	r1, [r7, #8]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fc82 	bl	8006b94 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0208 	orr.w	r2, r2, #8
 800629e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f022 0204 	bic.w	r2, r2, #4
 80062ae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	691a      	ldr	r2, [r3, #16]
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062c2:	e023      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fccc 	bl	8006c68 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062ee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	021a      	lsls	r2, r3, #8
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	430a      	orrs	r2, r1
 8006302:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006304:	e002      	b.n	800630c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	75fb      	strb	r3, [r7, #23]
      break;
 800630a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006314:	7dfb      	ldrb	r3, [r7, #23]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3718      	adds	r7, #24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop

08006320 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800632a:	2300      	movs	r3, #0
 800632c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006334:	2b01      	cmp	r3, #1
 8006336:	d101      	bne.n	800633c <HAL_TIM_ConfigClockSource+0x1c>
 8006338:	2302      	movs	r3, #2
 800633a:	e0f6      	b.n	800652a <HAL_TIM_ConfigClockSource+0x20a>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2202      	movs	r2, #2
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800635a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800635e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006366:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a6f      	ldr	r2, [pc, #444]	; (8006534 <HAL_TIM_ConfigClockSource+0x214>)
 8006376:	4293      	cmp	r3, r2
 8006378:	f000 80c1 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 800637c:	4a6d      	ldr	r2, [pc, #436]	; (8006534 <HAL_TIM_ConfigClockSource+0x214>)
 800637e:	4293      	cmp	r3, r2
 8006380:	f200 80c6 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 8006384:	4a6c      	ldr	r2, [pc, #432]	; (8006538 <HAL_TIM_ConfigClockSource+0x218>)
 8006386:	4293      	cmp	r3, r2
 8006388:	f000 80b9 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 800638c:	4a6a      	ldr	r2, [pc, #424]	; (8006538 <HAL_TIM_ConfigClockSource+0x218>)
 800638e:	4293      	cmp	r3, r2
 8006390:	f200 80be 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 8006394:	4a69      	ldr	r2, [pc, #420]	; (800653c <HAL_TIM_ConfigClockSource+0x21c>)
 8006396:	4293      	cmp	r3, r2
 8006398:	f000 80b1 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 800639c:	4a67      	ldr	r2, [pc, #412]	; (800653c <HAL_TIM_ConfigClockSource+0x21c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	f200 80b6 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 80063a4:	4a66      	ldr	r2, [pc, #408]	; (8006540 <HAL_TIM_ConfigClockSource+0x220>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f000 80a9 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 80063ac:	4a64      	ldr	r2, [pc, #400]	; (8006540 <HAL_TIM_ConfigClockSource+0x220>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	f200 80ae 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 80063b4:	4a63      	ldr	r2, [pc, #396]	; (8006544 <HAL_TIM_ConfigClockSource+0x224>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	f000 80a1 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 80063bc:	4a61      	ldr	r2, [pc, #388]	; (8006544 <HAL_TIM_ConfigClockSource+0x224>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	f200 80a6 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 80063c4:	4a60      	ldr	r2, [pc, #384]	; (8006548 <HAL_TIM_ConfigClockSource+0x228>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	f000 8099 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 80063cc:	4a5e      	ldr	r2, [pc, #376]	; (8006548 <HAL_TIM_ConfigClockSource+0x228>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	f200 809e 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 80063d4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063d8:	f000 8091 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 80063dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063e0:	f200 8096 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 80063e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063e8:	f000 8089 	beq.w	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 80063ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063f0:	f200 808e 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 80063f4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063f8:	d03e      	beq.n	8006478 <HAL_TIM_ConfigClockSource+0x158>
 80063fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063fe:	f200 8087 	bhi.w	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 8006402:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006406:	f000 8086 	beq.w	8006516 <HAL_TIM_ConfigClockSource+0x1f6>
 800640a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800640e:	d87f      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 8006410:	2b70      	cmp	r3, #112	; 0x70
 8006412:	d01a      	beq.n	800644a <HAL_TIM_ConfigClockSource+0x12a>
 8006414:	2b70      	cmp	r3, #112	; 0x70
 8006416:	d87b      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 8006418:	2b60      	cmp	r3, #96	; 0x60
 800641a:	d050      	beq.n	80064be <HAL_TIM_ConfigClockSource+0x19e>
 800641c:	2b60      	cmp	r3, #96	; 0x60
 800641e:	d877      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 8006420:	2b50      	cmp	r3, #80	; 0x50
 8006422:	d03c      	beq.n	800649e <HAL_TIM_ConfigClockSource+0x17e>
 8006424:	2b50      	cmp	r3, #80	; 0x50
 8006426:	d873      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 8006428:	2b40      	cmp	r3, #64	; 0x40
 800642a:	d058      	beq.n	80064de <HAL_TIM_ConfigClockSource+0x1be>
 800642c:	2b40      	cmp	r3, #64	; 0x40
 800642e:	d86f      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 8006430:	2b30      	cmp	r3, #48	; 0x30
 8006432:	d064      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 8006434:	2b30      	cmp	r3, #48	; 0x30
 8006436:	d86b      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 8006438:	2b20      	cmp	r3, #32
 800643a:	d060      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 800643c:	2b20      	cmp	r3, #32
 800643e:	d867      	bhi.n	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
 8006440:	2b00      	cmp	r3, #0
 8006442:	d05c      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 8006444:	2b10      	cmp	r3, #16
 8006446:	d05a      	beq.n	80064fe <HAL_TIM_ConfigClockSource+0x1de>
 8006448:	e062      	b.n	8006510 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	6899      	ldr	r1, [r3, #8]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	f000 fced 	bl	8006e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	689b      	ldr	r3, [r3, #8]
 8006464:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800646c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	609a      	str	r2, [r3, #8]
      break;
 8006476:	e04f      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6818      	ldr	r0, [r3, #0]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	6899      	ldr	r1, [r3, #8]
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	685a      	ldr	r2, [r3, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	68db      	ldr	r3, [r3, #12]
 8006488:	f000 fcd6 	bl	8006e38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	689a      	ldr	r2, [r3, #8]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800649a:	609a      	str	r2, [r3, #8]
      break;
 800649c:	e03c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	6859      	ldr	r1, [r3, #4]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	461a      	mov	r2, r3
 80064ac:	f000 fc48 	bl	8006d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2150      	movs	r1, #80	; 0x50
 80064b6:	4618      	mov	r0, r3
 80064b8:	f000 fca1 	bl	8006dfe <TIM_ITRx_SetConfig>
      break;
 80064bc:	e02c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6818      	ldr	r0, [r3, #0]
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	6859      	ldr	r1, [r3, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	461a      	mov	r2, r3
 80064cc:	f000 fc67 	bl	8006d9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2160      	movs	r1, #96	; 0x60
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 fc91 	bl	8006dfe <TIM_ITRx_SetConfig>
      break;
 80064dc:	e01c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6818      	ldr	r0, [r3, #0]
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	6859      	ldr	r1, [r3, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	461a      	mov	r2, r3
 80064ec:	f000 fc28 	bl	8006d40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2140      	movs	r1, #64	; 0x40
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fc81 	bl	8006dfe <TIM_ITRx_SetConfig>
      break;
 80064fc:	e00c      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681a      	ldr	r2, [r3, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4619      	mov	r1, r3
 8006508:	4610      	mov	r0, r2
 800650a:	f000 fc78 	bl	8006dfe <TIM_ITRx_SetConfig>
      break;
 800650e:	e003      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006510:	2301      	movs	r3, #1
 8006512:	73fb      	strb	r3, [r7, #15]
      break;
 8006514:	e000      	b.n	8006518 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006516:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006528:	7bfb      	ldrb	r3, [r7, #15]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	00100070 	.word	0x00100070
 8006538:	00100060 	.word	0x00100060
 800653c:	00100050 	.word	0x00100050
 8006540:	00100040 	.word	0x00100040
 8006544:	00100030 	.word	0x00100030
 8006548:	00100020 	.word	0x00100020

0800654c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006554:	bf00      	nop
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006560:	b480      	push	{r7}
 8006562:	b083      	sub	sp, #12
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006568:	bf00      	nop
 800656a:	370c      	adds	r7, #12
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800659c:	b480      	push	{r7}
 800659e:	b085      	sub	sp, #20
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
 80065a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a46      	ldr	r2, [pc, #280]	; (80066c8 <TIM_Base_SetConfig+0x12c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d017      	beq.n	80065e4 <TIM_Base_SetConfig+0x48>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065ba:	d013      	beq.n	80065e4 <TIM_Base_SetConfig+0x48>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a43      	ldr	r2, [pc, #268]	; (80066cc <TIM_Base_SetConfig+0x130>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00f      	beq.n	80065e4 <TIM_Base_SetConfig+0x48>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a42      	ldr	r2, [pc, #264]	; (80066d0 <TIM_Base_SetConfig+0x134>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00b      	beq.n	80065e4 <TIM_Base_SetConfig+0x48>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a41      	ldr	r2, [pc, #260]	; (80066d4 <TIM_Base_SetConfig+0x138>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d007      	beq.n	80065e4 <TIM_Base_SetConfig+0x48>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a40      	ldr	r2, [pc, #256]	; (80066d8 <TIM_Base_SetConfig+0x13c>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d003      	beq.n	80065e4 <TIM_Base_SetConfig+0x48>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a3f      	ldr	r2, [pc, #252]	; (80066dc <TIM_Base_SetConfig+0x140>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d108      	bne.n	80065f6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	4a33      	ldr	r2, [pc, #204]	; (80066c8 <TIM_Base_SetConfig+0x12c>)
 80065fa:	4293      	cmp	r3, r2
 80065fc:	d023      	beq.n	8006646 <TIM_Base_SetConfig+0xaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006604:	d01f      	beq.n	8006646 <TIM_Base_SetConfig+0xaa>
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	4a30      	ldr	r2, [pc, #192]	; (80066cc <TIM_Base_SetConfig+0x130>)
 800660a:	4293      	cmp	r3, r2
 800660c:	d01b      	beq.n	8006646 <TIM_Base_SetConfig+0xaa>
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a2f      	ldr	r2, [pc, #188]	; (80066d0 <TIM_Base_SetConfig+0x134>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d017      	beq.n	8006646 <TIM_Base_SetConfig+0xaa>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a2e      	ldr	r2, [pc, #184]	; (80066d4 <TIM_Base_SetConfig+0x138>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d013      	beq.n	8006646 <TIM_Base_SetConfig+0xaa>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a2d      	ldr	r2, [pc, #180]	; (80066d8 <TIM_Base_SetConfig+0x13c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00f      	beq.n	8006646 <TIM_Base_SetConfig+0xaa>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a2d      	ldr	r2, [pc, #180]	; (80066e0 <TIM_Base_SetConfig+0x144>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d00b      	beq.n	8006646 <TIM_Base_SetConfig+0xaa>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a2c      	ldr	r2, [pc, #176]	; (80066e4 <TIM_Base_SetConfig+0x148>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d007      	beq.n	8006646 <TIM_Base_SetConfig+0xaa>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a2b      	ldr	r2, [pc, #172]	; (80066e8 <TIM_Base_SetConfig+0x14c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d003      	beq.n	8006646 <TIM_Base_SetConfig+0xaa>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	4a26      	ldr	r2, [pc, #152]	; (80066dc <TIM_Base_SetConfig+0x140>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d108      	bne.n	8006658 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800664c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	68db      	ldr	r3, [r3, #12]
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4313      	orrs	r3, r2
 8006656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	4313      	orrs	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	4a12      	ldr	r2, [pc, #72]	; (80066c8 <TIM_Base_SetConfig+0x12c>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d013      	beq.n	80066ac <TIM_Base_SetConfig+0x110>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a14      	ldr	r2, [pc, #80]	; (80066d8 <TIM_Base_SetConfig+0x13c>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00f      	beq.n	80066ac <TIM_Base_SetConfig+0x110>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a14      	ldr	r2, [pc, #80]	; (80066e0 <TIM_Base_SetConfig+0x144>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00b      	beq.n	80066ac <TIM_Base_SetConfig+0x110>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a13      	ldr	r2, [pc, #76]	; (80066e4 <TIM_Base_SetConfig+0x148>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d007      	beq.n	80066ac <TIM_Base_SetConfig+0x110>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a12      	ldr	r2, [pc, #72]	; (80066e8 <TIM_Base_SetConfig+0x14c>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d003      	beq.n	80066ac <TIM_Base_SetConfig+0x110>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a0d      	ldr	r2, [pc, #52]	; (80066dc <TIM_Base_SetConfig+0x140>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d103      	bne.n	80066b4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	691a      	ldr	r2, [r3, #16]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2201      	movs	r2, #1
 80066b8:	615a      	str	r2, [r3, #20]
}
 80066ba:	bf00      	nop
 80066bc:	3714      	adds	r7, #20
 80066be:	46bd      	mov	sp, r7
 80066c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c4:	4770      	bx	lr
 80066c6:	bf00      	nop
 80066c8:	40012c00 	.word	0x40012c00
 80066cc:	40000400 	.word	0x40000400
 80066d0:	40000800 	.word	0x40000800
 80066d4:	40000c00 	.word	0x40000c00
 80066d8:	40013400 	.word	0x40013400
 80066dc:	40015000 	.word	0x40015000
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800

080066ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	f023 0201 	bic.w	r2, r3, #1
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a1b      	ldr	r3, [r3, #32]
 8006706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800671a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800671e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0303 	bic.w	r3, r3, #3
 8006726:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	68fa      	ldr	r2, [r7, #12]
 800672e:	4313      	orrs	r3, r2
 8006730:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	f023 0302 	bic.w	r3, r3, #2
 8006738:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a30      	ldr	r2, [pc, #192]	; (8006808 <TIM_OC1_SetConfig+0x11c>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d013      	beq.n	8006774 <TIM_OC1_SetConfig+0x88>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a2f      	ldr	r2, [pc, #188]	; (800680c <TIM_OC1_SetConfig+0x120>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d00f      	beq.n	8006774 <TIM_OC1_SetConfig+0x88>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a2e      	ldr	r2, [pc, #184]	; (8006810 <TIM_OC1_SetConfig+0x124>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d00b      	beq.n	8006774 <TIM_OC1_SetConfig+0x88>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4a2d      	ldr	r2, [pc, #180]	; (8006814 <TIM_OC1_SetConfig+0x128>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d007      	beq.n	8006774 <TIM_OC1_SetConfig+0x88>
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	4a2c      	ldr	r2, [pc, #176]	; (8006818 <TIM_OC1_SetConfig+0x12c>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d003      	beq.n	8006774 <TIM_OC1_SetConfig+0x88>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	4a2b      	ldr	r2, [pc, #172]	; (800681c <TIM_OC1_SetConfig+0x130>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d10c      	bne.n	800678e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f023 0308 	bic.w	r3, r3, #8
 800677a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	697a      	ldr	r2, [r7, #20]
 8006782:	4313      	orrs	r3, r2
 8006784:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	f023 0304 	bic.w	r3, r3, #4
 800678c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <TIM_OC1_SetConfig+0x11c>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d013      	beq.n	80067be <TIM_OC1_SetConfig+0xd2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a1c      	ldr	r2, [pc, #112]	; (800680c <TIM_OC1_SetConfig+0x120>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d00f      	beq.n	80067be <TIM_OC1_SetConfig+0xd2>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	4a1b      	ldr	r2, [pc, #108]	; (8006810 <TIM_OC1_SetConfig+0x124>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d00b      	beq.n	80067be <TIM_OC1_SetConfig+0xd2>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	4a1a      	ldr	r2, [pc, #104]	; (8006814 <TIM_OC1_SetConfig+0x128>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d007      	beq.n	80067be <TIM_OC1_SetConfig+0xd2>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	4a19      	ldr	r2, [pc, #100]	; (8006818 <TIM_OC1_SetConfig+0x12c>)
 80067b2:	4293      	cmp	r3, r2
 80067b4:	d003      	beq.n	80067be <TIM_OC1_SetConfig+0xd2>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a18      	ldr	r2, [pc, #96]	; (800681c <TIM_OC1_SetConfig+0x130>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d111      	bne.n	80067e2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	699b      	ldr	r3, [r3, #24]
 80067dc:	693a      	ldr	r2, [r7, #16]
 80067de:	4313      	orrs	r3, r2
 80067e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	685a      	ldr	r2, [r3, #4]
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	621a      	str	r2, [r3, #32]
}
 80067fc:	bf00      	nop
 80067fe:	371c      	adds	r7, #28
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	40012c00 	.word	0x40012c00
 800680c:	40013400 	.word	0x40013400
 8006810:	40014000 	.word	0x40014000
 8006814:	40014400 	.word	0x40014400
 8006818:	40014800 	.word	0x40014800
 800681c:	40015000 	.word	0x40015000

08006820 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006820:	b480      	push	{r7}
 8006822:	b087      	sub	sp, #28
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a1b      	ldr	r3, [r3, #32]
 800682e:	f023 0210 	bic.w	r2, r3, #16
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6a1b      	ldr	r3, [r3, #32]
 800683a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	699b      	ldr	r3, [r3, #24]
 8006846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800684e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006852:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800685a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	021b      	lsls	r3, r3, #8
 8006862:	68fa      	ldr	r2, [r7, #12]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f023 0320 	bic.w	r3, r3, #32
 800686e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	011b      	lsls	r3, r3, #4
 8006876:	697a      	ldr	r2, [r7, #20]
 8006878:	4313      	orrs	r3, r2
 800687a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	4a2c      	ldr	r2, [pc, #176]	; (8006930 <TIM_OC2_SetConfig+0x110>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d007      	beq.n	8006894 <TIM_OC2_SetConfig+0x74>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	4a2b      	ldr	r2, [pc, #172]	; (8006934 <TIM_OC2_SetConfig+0x114>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d003      	beq.n	8006894 <TIM_OC2_SetConfig+0x74>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	4a2a      	ldr	r2, [pc, #168]	; (8006938 <TIM_OC2_SetConfig+0x118>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d10d      	bne.n	80068b0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800689a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	011b      	lsls	r3, r3, #4
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	4a1f      	ldr	r2, [pc, #124]	; (8006930 <TIM_OC2_SetConfig+0x110>)
 80068b4:	4293      	cmp	r3, r2
 80068b6:	d013      	beq.n	80068e0 <TIM_OC2_SetConfig+0xc0>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a1e      	ldr	r2, [pc, #120]	; (8006934 <TIM_OC2_SetConfig+0x114>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00f      	beq.n	80068e0 <TIM_OC2_SetConfig+0xc0>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a1e      	ldr	r2, [pc, #120]	; (800693c <TIM_OC2_SetConfig+0x11c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d00b      	beq.n	80068e0 <TIM_OC2_SetConfig+0xc0>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a1d      	ldr	r2, [pc, #116]	; (8006940 <TIM_OC2_SetConfig+0x120>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d007      	beq.n	80068e0 <TIM_OC2_SetConfig+0xc0>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a1c      	ldr	r2, [pc, #112]	; (8006944 <TIM_OC2_SetConfig+0x124>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d003      	beq.n	80068e0 <TIM_OC2_SetConfig+0xc0>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a17      	ldr	r2, [pc, #92]	; (8006938 <TIM_OC2_SetConfig+0x118>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d113      	bne.n	8006908 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80068e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80068ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	695b      	ldr	r3, [r3, #20]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	693a      	ldr	r2, [r7, #16]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	699b      	ldr	r3, [r3, #24]
 8006900:	009b      	lsls	r3, r3, #2
 8006902:	693a      	ldr	r2, [r7, #16]
 8006904:	4313      	orrs	r3, r2
 8006906:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	621a      	str	r2, [r3, #32]
}
 8006922:	bf00      	nop
 8006924:	371c      	adds	r7, #28
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop
 8006930:	40012c00 	.word	0x40012c00
 8006934:	40013400 	.word	0x40013400
 8006938:	40015000 	.word	0x40015000
 800693c:	40014000 	.word	0x40014000
 8006940:	40014400 	.word	0x40014400
 8006944:	40014800 	.word	0x40014800

08006948 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
 8006950:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6a1b      	ldr	r3, [r3, #32]
 8006962:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800697a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68fa      	ldr	r2, [r7, #12]
 800698a:	4313      	orrs	r3, r2
 800698c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	021b      	lsls	r3, r3, #8
 800699c:	697a      	ldr	r2, [r7, #20]
 800699e:	4313      	orrs	r3, r2
 80069a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	4a2b      	ldr	r2, [pc, #172]	; (8006a54 <TIM_OC3_SetConfig+0x10c>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d007      	beq.n	80069ba <TIM_OC3_SetConfig+0x72>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4a2a      	ldr	r2, [pc, #168]	; (8006a58 <TIM_OC3_SetConfig+0x110>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d003      	beq.n	80069ba <TIM_OC3_SetConfig+0x72>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	4a29      	ldr	r2, [pc, #164]	; (8006a5c <TIM_OC3_SetConfig+0x114>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d10d      	bne.n	80069d6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	021b      	lsls	r3, r3, #8
 80069c8:	697a      	ldr	r2, [r7, #20]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	4a1e      	ldr	r2, [pc, #120]	; (8006a54 <TIM_OC3_SetConfig+0x10c>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d013      	beq.n	8006a06 <TIM_OC3_SetConfig+0xbe>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	4a1d      	ldr	r2, [pc, #116]	; (8006a58 <TIM_OC3_SetConfig+0x110>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00f      	beq.n	8006a06 <TIM_OC3_SetConfig+0xbe>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4a1d      	ldr	r2, [pc, #116]	; (8006a60 <TIM_OC3_SetConfig+0x118>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d00b      	beq.n	8006a06 <TIM_OC3_SetConfig+0xbe>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4a1c      	ldr	r2, [pc, #112]	; (8006a64 <TIM_OC3_SetConfig+0x11c>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d007      	beq.n	8006a06 <TIM_OC3_SetConfig+0xbe>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	4a1b      	ldr	r2, [pc, #108]	; (8006a68 <TIM_OC3_SetConfig+0x120>)
 80069fa:	4293      	cmp	r3, r2
 80069fc:	d003      	beq.n	8006a06 <TIM_OC3_SetConfig+0xbe>
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	4a16      	ldr	r2, [pc, #88]	; (8006a5c <TIM_OC3_SetConfig+0x114>)
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d113      	bne.n	8006a2e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a06:	693b      	ldr	r3, [r7, #16]
 8006a08:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	693a      	ldr	r2, [r7, #16]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	699b      	ldr	r3, [r3, #24]
 8006a26:	011b      	lsls	r3, r3, #4
 8006a28:	693a      	ldr	r2, [r7, #16]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	693a      	ldr	r2, [r7, #16]
 8006a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	68fa      	ldr	r2, [r7, #12]
 8006a38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	621a      	str	r2, [r3, #32]
}
 8006a48:	bf00      	nop
 8006a4a:	371c      	adds	r7, #28
 8006a4c:	46bd      	mov	sp, r7
 8006a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a52:	4770      	bx	lr
 8006a54:	40012c00 	.word	0x40012c00
 8006a58:	40013400 	.word	0x40013400
 8006a5c:	40015000 	.word	0x40015000
 8006a60:	40014000 	.word	0x40014000
 8006a64:	40014400 	.word	0x40014400
 8006a68:	40014800 	.word	0x40014800

08006a6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	6078      	str	r0, [r7, #4]
 8006a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	685b      	ldr	r3, [r3, #4]
 8006a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	021b      	lsls	r3, r3, #8
 8006aae:	68fa      	ldr	r2, [r7, #12]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	689b      	ldr	r3, [r3, #8]
 8006ac0:	031b      	lsls	r3, r3, #12
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a2c      	ldr	r2, [pc, #176]	; (8006b7c <TIM_OC4_SetConfig+0x110>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d007      	beq.n	8006ae0 <TIM_OC4_SetConfig+0x74>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a2b      	ldr	r2, [pc, #172]	; (8006b80 <TIM_OC4_SetConfig+0x114>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d003      	beq.n	8006ae0 <TIM_OC4_SetConfig+0x74>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a2a      	ldr	r2, [pc, #168]	; (8006b84 <TIM_OC4_SetConfig+0x118>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d10d      	bne.n	8006afc <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006ae6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	031b      	lsls	r3, r3, #12
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006afa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a1f      	ldr	r2, [pc, #124]	; (8006b7c <TIM_OC4_SetConfig+0x110>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d013      	beq.n	8006b2c <TIM_OC4_SetConfig+0xc0>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a1e      	ldr	r2, [pc, #120]	; (8006b80 <TIM_OC4_SetConfig+0x114>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00f      	beq.n	8006b2c <TIM_OC4_SetConfig+0xc0>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a1e      	ldr	r2, [pc, #120]	; (8006b88 <TIM_OC4_SetConfig+0x11c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00b      	beq.n	8006b2c <TIM_OC4_SetConfig+0xc0>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a1d      	ldr	r2, [pc, #116]	; (8006b8c <TIM_OC4_SetConfig+0x120>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d007      	beq.n	8006b2c <TIM_OC4_SetConfig+0xc0>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a1c      	ldr	r2, [pc, #112]	; (8006b90 <TIM_OC4_SetConfig+0x124>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d003      	beq.n	8006b2c <TIM_OC4_SetConfig+0xc0>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	4a17      	ldr	r2, [pc, #92]	; (8006b84 <TIM_OC4_SetConfig+0x118>)
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d113      	bne.n	8006b54 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b32:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b3a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	019b      	lsls	r3, r3, #6
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	699b      	ldr	r3, [r3, #24]
 8006b4c:	019b      	lsls	r3, r3, #6
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	40012c00 	.word	0x40012c00
 8006b80:	40013400 	.word	0x40013400
 8006b84:	40015000 	.word	0x40015000
 8006b88:	40014000 	.word	0x40014000
 8006b8c:	40014400 	.word	0x40014400
 8006b90:	40014800 	.word	0x40014800

08006b94 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b087      	sub	sp, #28
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
 8006b9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a1b      	ldr	r3, [r3, #32]
 8006ba2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1b      	ldr	r3, [r3, #32]
 8006bae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006bd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	689b      	ldr	r3, [r3, #8]
 8006bde:	041b      	lsls	r3, r3, #16
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	4a19      	ldr	r2, [pc, #100]	; (8006c50 <TIM_OC5_SetConfig+0xbc>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d013      	beq.n	8006c16 <TIM_OC5_SetConfig+0x82>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	4a18      	ldr	r2, [pc, #96]	; (8006c54 <TIM_OC5_SetConfig+0xc0>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d00f      	beq.n	8006c16 <TIM_OC5_SetConfig+0x82>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	4a17      	ldr	r2, [pc, #92]	; (8006c58 <TIM_OC5_SetConfig+0xc4>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00b      	beq.n	8006c16 <TIM_OC5_SetConfig+0x82>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	4a16      	ldr	r2, [pc, #88]	; (8006c5c <TIM_OC5_SetConfig+0xc8>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d007      	beq.n	8006c16 <TIM_OC5_SetConfig+0x82>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a15      	ldr	r2, [pc, #84]	; (8006c60 <TIM_OC5_SetConfig+0xcc>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d003      	beq.n	8006c16 <TIM_OC5_SetConfig+0x82>
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	4a14      	ldr	r2, [pc, #80]	; (8006c64 <TIM_OC5_SetConfig+0xd0>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d109      	bne.n	8006c2a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	695b      	ldr	r3, [r3, #20]
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	697a      	ldr	r2, [r7, #20]
 8006c2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	685a      	ldr	r2, [r3, #4]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	693a      	ldr	r2, [r7, #16]
 8006c42:	621a      	str	r2, [r3, #32]
}
 8006c44:	bf00      	nop
 8006c46:	371c      	adds	r7, #28
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	40012c00 	.word	0x40012c00
 8006c54:	40013400 	.word	0x40013400
 8006c58:	40014000 	.word	0x40014000
 8006c5c:	40014400 	.word	0x40014400
 8006c60:	40014800 	.word	0x40014800
 8006c64:	40015000 	.word	0x40015000

08006c68 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b087      	sub	sp, #28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a1b      	ldr	r3, [r3, #32]
 8006c76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	021b      	lsls	r3, r3, #8
 8006ca2:	68fa      	ldr	r2, [r7, #12]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	051b      	lsls	r3, r3, #20
 8006cb6:	693a      	ldr	r2, [r7, #16]
 8006cb8:	4313      	orrs	r3, r2
 8006cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	4a1a      	ldr	r2, [pc, #104]	; (8006d28 <TIM_OC6_SetConfig+0xc0>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d013      	beq.n	8006cec <TIM_OC6_SetConfig+0x84>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a19      	ldr	r2, [pc, #100]	; (8006d2c <TIM_OC6_SetConfig+0xc4>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d00f      	beq.n	8006cec <TIM_OC6_SetConfig+0x84>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	4a18      	ldr	r2, [pc, #96]	; (8006d30 <TIM_OC6_SetConfig+0xc8>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d00b      	beq.n	8006cec <TIM_OC6_SetConfig+0x84>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a17      	ldr	r2, [pc, #92]	; (8006d34 <TIM_OC6_SetConfig+0xcc>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d007      	beq.n	8006cec <TIM_OC6_SetConfig+0x84>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a16      	ldr	r2, [pc, #88]	; (8006d38 <TIM_OC6_SetConfig+0xd0>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d003      	beq.n	8006cec <TIM_OC6_SetConfig+0x84>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	4a15      	ldr	r2, [pc, #84]	; (8006d3c <TIM_OC6_SetConfig+0xd4>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d109      	bne.n	8006d00 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006cec:	697b      	ldr	r3, [r7, #20]
 8006cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	695b      	ldr	r3, [r3, #20]
 8006cf8:	029b      	lsls	r3, r3, #10
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	685a      	ldr	r2, [r3, #4]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	621a      	str	r2, [r3, #32]
}
 8006d1a:	bf00      	nop
 8006d1c:	371c      	adds	r7, #28
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop
 8006d28:	40012c00 	.word	0x40012c00
 8006d2c:	40013400 	.word	0x40013400
 8006d30:	40014000 	.word	0x40014000
 8006d34:	40014400 	.word	0x40014400
 8006d38:	40014800 	.word	0x40014800
 8006d3c:	40015000 	.word	0x40015000

08006d40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	6a1b      	ldr	r3, [r3, #32]
 8006d50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f023 0201 	bic.w	r2, r3, #1
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	011b      	lsls	r3, r3, #4
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	f023 030a 	bic.w	r3, r3, #10
 8006d7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006d7e:	697a      	ldr	r2, [r7, #20]
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	693a      	ldr	r2, [r7, #16]
 8006d8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	697a      	ldr	r2, [r7, #20]
 8006d90:	621a      	str	r2, [r3, #32]
}
 8006d92:	bf00      	nop
 8006d94:	371c      	adds	r7, #28
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr

08006d9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d9e:	b480      	push	{r7}
 8006da0:	b087      	sub	sp, #28
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	60f8      	str	r0, [r7, #12]
 8006da6:	60b9      	str	r1, [r7, #8]
 8006da8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f023 0210 	bic.w	r2, r3, #16
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	699b      	ldr	r3, [r3, #24]
 8006dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dc8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	031b      	lsls	r3, r3, #12
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006dda:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	011b      	lsls	r3, r3, #4
 8006de0:	693a      	ldr	r2, [r7, #16]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	697a      	ldr	r2, [r7, #20]
 8006dea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	693a      	ldr	r2, [r7, #16]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr

08006dfe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006dfe:	b480      	push	{r7}
 8006e00:	b085      	sub	sp, #20
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	6078      	str	r0, [r7, #4]
 8006e06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006e14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	4313      	orrs	r3, r2
 8006e20:	f043 0307 	orr.w	r3, r3, #7
 8006e24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	609a      	str	r2, [r3, #8]
}
 8006e2c:	bf00      	nop
 8006e2e:	3714      	adds	r7, #20
 8006e30:	46bd      	mov	sp, r7
 8006e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e36:	4770      	bx	lr

08006e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	b087      	sub	sp, #28
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	607a      	str	r2, [r7, #4]
 8006e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	021a      	lsls	r2, r3, #8
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	431a      	orrs	r2, r3
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	697a      	ldr	r2, [r7, #20]
 8006e62:	4313      	orrs	r3, r2
 8006e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	697a      	ldr	r2, [r7, #20]
 8006e6a:	609a      	str	r2, [r3, #8]
}
 8006e6c:	bf00      	nop
 8006e6e:	371c      	adds	r7, #28
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr

08006e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	60f8      	str	r0, [r7, #12]
 8006e80:	60b9      	str	r1, [r7, #8]
 8006e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	f003 031f 	and.w	r3, r3, #31
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6a1a      	ldr	r2, [r3, #32]
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	43db      	mvns	r3, r3
 8006e9a:	401a      	ands	r2, r3
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1a      	ldr	r2, [r3, #32]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f003 031f 	and.w	r3, r3, #31
 8006eaa:	6879      	ldr	r1, [r7, #4]
 8006eac:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb0:	431a      	orrs	r2, r3
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	621a      	str	r2, [r3, #32]
}
 8006eb6:	bf00      	nop
 8006eb8:	371c      	adds	r7, #28
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
	...

08006ec4 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d109      	bne.n	8006ee8 <HAL_TIMEx_PWMN_Start+0x24>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	bf14      	ite	ne
 8006ee0:	2301      	movne	r3, #1
 8006ee2:	2300      	moveq	r3, #0
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	e022      	b.n	8006f2e <HAL_TIMEx_PWMN_Start+0x6a>
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	2b04      	cmp	r3, #4
 8006eec:	d109      	bne.n	8006f02 <HAL_TIMEx_PWMN_Start+0x3e>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ef4:	b2db      	uxtb	r3, r3
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	bf14      	ite	ne
 8006efa:	2301      	movne	r3, #1
 8006efc:	2300      	moveq	r3, #0
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	e015      	b.n	8006f2e <HAL_TIMEx_PWMN_Start+0x6a>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	2b08      	cmp	r3, #8
 8006f06:	d109      	bne.n	8006f1c <HAL_TIMEx_PWMN_Start+0x58>
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	bf14      	ite	ne
 8006f14:	2301      	movne	r3, #1
 8006f16:	2300      	moveq	r3, #0
 8006f18:	b2db      	uxtb	r3, r3
 8006f1a:	e008      	b.n	8006f2e <HAL_TIMEx_PWMN_Start+0x6a>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	bf14      	ite	ne
 8006f28:	2301      	movne	r3, #1
 8006f2a:	2300      	moveq	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e073      	b.n	800701e <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d104      	bne.n	8006f46 <HAL_TIMEx_PWMN_Start+0x82>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2202      	movs	r2, #2
 8006f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f44:	e013      	b.n	8006f6e <HAL_TIMEx_PWMN_Start+0xaa>
 8006f46:	683b      	ldr	r3, [r7, #0]
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d104      	bne.n	8006f56 <HAL_TIMEx_PWMN_Start+0x92>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f54:	e00b      	b.n	8006f6e <HAL_TIMEx_PWMN_Start+0xaa>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	d104      	bne.n	8006f66 <HAL_TIMEx_PWMN_Start+0xa2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2202      	movs	r2, #2
 8006f60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f64:	e003      	b.n	8006f6e <HAL_TIMEx_PWMN_Start+0xaa>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2202      	movs	r2, #2
 8006f6a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	2204      	movs	r2, #4
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 f9f4 	bl	8007364 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a25      	ldr	r2, [pc, #148]	; (8007028 <HAL_TIMEx_PWMN_Start+0x164>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d022      	beq.n	8006fdc <HAL_TIMEx_PWMN_Start+0x118>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f9e:	d01d      	beq.n	8006fdc <HAL_TIMEx_PWMN_Start+0x118>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a21      	ldr	r2, [pc, #132]	; (800702c <HAL_TIMEx_PWMN_Start+0x168>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d018      	beq.n	8006fdc <HAL_TIMEx_PWMN_Start+0x118>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a20      	ldr	r2, [pc, #128]	; (8007030 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d013      	beq.n	8006fdc <HAL_TIMEx_PWMN_Start+0x118>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1e      	ldr	r2, [pc, #120]	; (8007034 <HAL_TIMEx_PWMN_Start+0x170>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d00e      	beq.n	8006fdc <HAL_TIMEx_PWMN_Start+0x118>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a1d      	ldr	r2, [pc, #116]	; (8007038 <HAL_TIMEx_PWMN_Start+0x174>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d009      	beq.n	8006fdc <HAL_TIMEx_PWMN_Start+0x118>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a1b      	ldr	r2, [pc, #108]	; (800703c <HAL_TIMEx_PWMN_Start+0x178>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d004      	beq.n	8006fdc <HAL_TIMEx_PWMN_Start+0x118>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1a      	ldr	r2, [pc, #104]	; (8007040 <HAL_TIMEx_PWMN_Start+0x17c>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d115      	bne.n	8007008 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	689a      	ldr	r2, [r3, #8]
 8006fe2:	4b18      	ldr	r3, [pc, #96]	; (8007044 <HAL_TIMEx_PWMN_Start+0x180>)
 8006fe4:	4013      	ands	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b06      	cmp	r3, #6
 8006fec:	d015      	beq.n	800701a <HAL_TIMEx_PWMN_Start+0x156>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff4:	d011      	beq.n	800701a <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f042 0201 	orr.w	r2, r2, #1
 8007004:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007006:	e008      	b.n	800701a <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f042 0201 	orr.w	r2, r2, #1
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	e000      	b.n	800701c <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800701a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3710      	adds	r7, #16
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	40012c00 	.word	0x40012c00
 800702c:	40000400 	.word	0x40000400
 8007030:	40000800 	.word	0x40000800
 8007034:	40000c00 	.word	0x40000c00
 8007038:	40013400 	.word	0x40013400
 800703c:	40014000 	.word	0x40014000
 8007040:	40015000 	.word	0x40015000
 8007044:	00010007 	.word	0x00010007

08007048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007048:	b480      	push	{r7}
 800704a:	b085      	sub	sp, #20
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007058:	2b01      	cmp	r3, #1
 800705a:	d101      	bne.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800705c:	2302      	movs	r3, #2
 800705e:	e074      	b.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2201      	movs	r2, #1
 8007064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2202      	movs	r2, #2
 800706c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	689b      	ldr	r3, [r3, #8]
 800707e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a34      	ldr	r2, [pc, #208]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d009      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a33      	ldr	r2, [pc, #204]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a31      	ldr	r2, [pc, #196]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d108      	bne.n	80070b0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80070a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	685b      	ldr	r3, [r3, #4]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80070b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	4313      	orrs	r3, r2
 80070c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	68fa      	ldr	r2, [r7, #12]
 80070cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	4a21      	ldr	r2, [pc, #132]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d022      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e0:	d01d      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1f      	ldr	r2, [pc, #124]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d018      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	4a1d      	ldr	r2, [pc, #116]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a1c      	ldr	r2, [pc, #112]	; (800716c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00e      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a15      	ldr	r2, [pc, #84]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d009      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a18      	ldr	r2, [pc, #96]	; (8007170 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d004      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a11      	ldr	r2, [pc, #68]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d10c      	bne.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	689b      	ldr	r3, [r3, #8]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4313      	orrs	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40012c00 	.word	0x40012c00
 800715c:	40013400 	.word	0x40013400
 8007160:	40015000 	.word	0x40015000
 8007164:	40000400 	.word	0x40000400
 8007168:	40000800 	.word	0x40000800
 800716c:	40000c00 	.word	0x40000c00
 8007170:	40014000 	.word	0x40014000

08007174 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800717e:	2300      	movs	r3, #0
 8007180:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007188:	2b01      	cmp	r3, #1
 800718a:	d101      	bne.n	8007190 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800718c:	2302      	movs	r3, #2
 800718e:	e096      	b.n	80072be <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2201      	movs	r2, #1
 8007194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	4313      	orrs	r3, r2
 80071a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	4313      	orrs	r3, r2
 80071b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	4313      	orrs	r3, r2
 80071c0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	4313      	orrs	r3, r2
 80071dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	041b      	lsls	r3, r3, #16
 8007206:	4313      	orrs	r3, r2
 8007208:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a2f      	ldr	r2, [pc, #188]	; (80072cc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d009      	beq.n	8007228 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a2d      	ldr	r2, [pc, #180]	; (80072d0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d004      	beq.n	8007228 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a2c      	ldr	r2, [pc, #176]	; (80072d4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d106      	bne.n	8007236 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	69db      	ldr	r3, [r3, #28]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a24      	ldr	r2, [pc, #144]	; (80072cc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d009      	beq.n	8007254 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a22      	ldr	r2, [pc, #136]	; (80072d0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d004      	beq.n	8007254 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a21      	ldr	r2, [pc, #132]	; (80072d4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d12b      	bne.n	80072ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800725a:	683b      	ldr	r3, [r7, #0]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	051b      	lsls	r3, r3, #20
 8007260:	4313      	orrs	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	6a1b      	ldr	r3, [r3, #32]
 800726e:	4313      	orrs	r3, r2
 8007270:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727c:	4313      	orrs	r3, r2
 800727e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a11      	ldr	r2, [pc, #68]	; (80072cc <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d009      	beq.n	800729e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a10      	ldr	r2, [pc, #64]	; (80072d0 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d004      	beq.n	800729e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a0e      	ldr	r2, [pc, #56]	; (80072d4 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d106      	bne.n	80072ac <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a8:	4313      	orrs	r3, r2
 80072aa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072bc:	2300      	movs	r3, #0
}
 80072be:	4618      	mov	r0, r3
 80072c0:	3714      	adds	r7, #20
 80072c2:	46bd      	mov	sp, r7
 80072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	40012c00 	.word	0x40012c00
 80072d0:	40013400 	.word	0x40013400
 80072d4:	40015000 	.word	0x40015000

080072d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007314:	b480      	push	{r7}
 8007316:	b083      	sub	sp, #12
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800731c:	bf00      	nop
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr

0800733c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800733c:	b480      	push	{r7}
 800733e:	b083      	sub	sp, #12
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007364:	b480      	push	{r7}
 8007366:	b087      	sub	sp, #28
 8007368:	af00      	add	r7, sp, #0
 800736a:	60f8      	str	r0, [r7, #12]
 800736c:	60b9      	str	r1, [r7, #8]
 800736e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007370:	68bb      	ldr	r3, [r7, #8]
 8007372:	f003 031f 	and.w	r3, r3, #31
 8007376:	2204      	movs	r2, #4
 8007378:	fa02 f303 	lsl.w	r3, r2, r3
 800737c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6a1a      	ldr	r2, [r3, #32]
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	43db      	mvns	r3, r3
 8007386:	401a      	ands	r2, r3
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	6a1a      	ldr	r2, [r3, #32]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f003 031f 	and.w	r3, r3, #31
 8007396:	6879      	ldr	r1, [r7, #4]
 8007398:	fa01 f303 	lsl.w	r3, r1, r3
 800739c:	431a      	orrs	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	621a      	str	r2, [r3, #32]
}
 80073a2:	bf00      	nop
 80073a4:	371c      	adds	r7, #28
 80073a6:	46bd      	mov	sp, r7
 80073a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ac:	4770      	bx	lr

080073ae <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80073ae:	b580      	push	{r7, lr}
 80073b0:	b082      	sub	sp, #8
 80073b2:	af00      	add	r7, sp, #0
 80073b4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d101      	bne.n	80073c0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e042      	b.n	8007446 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d106      	bne.n	80073d8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f7fa fda0 	bl	8001f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2224      	movs	r2, #36	; 0x24
 80073dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f022 0201 	bic.w	r2, r2, #1
 80073ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f000 fc51 	bl	8007c98 <UART_SetConfig>
 80073f6:	4603      	mov	r3, r0
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d101      	bne.n	8007400 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e022      	b.n	8007446 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007404:	2b00      	cmp	r3, #0
 8007406:	d002      	beq.n	800740e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 ff41 	bl	8008290 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800741c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689a      	ldr	r2, [r3, #8]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800742c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0201 	orr.w	r2, r2, #1
 800743c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 ffc8 	bl	80083d4 <UART_CheckIdleState>
 8007444:	4603      	mov	r3, r0
}
 8007446:	4618      	mov	r0, r3
 8007448:	3708      	adds	r7, #8
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b08a      	sub	sp, #40	; 0x28
 8007452:	af02      	add	r7, sp, #8
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	603b      	str	r3, [r7, #0]
 800745a:	4613      	mov	r3, r2
 800745c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007464:	2b20      	cmp	r3, #32
 8007466:	f040 8083 	bne.w	8007570 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d002      	beq.n	8007476 <HAL_UART_Transmit+0x28>
 8007470:	88fb      	ldrh	r3, [r7, #6]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d101      	bne.n	800747a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007476:	2301      	movs	r3, #1
 8007478:	e07b      	b.n	8007572 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007480:	2b01      	cmp	r3, #1
 8007482:	d101      	bne.n	8007488 <HAL_UART_Transmit+0x3a>
 8007484:	2302      	movs	r3, #2
 8007486:	e074      	b.n	8007572 <HAL_UART_Transmit+0x124>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2201      	movs	r2, #1
 800748c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2221      	movs	r2, #33	; 0x21
 800749c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074a0:	f7fa fdee 	bl	8002080 <HAL_GetTick>
 80074a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	88fa      	ldrh	r2, [r7, #6]
 80074aa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	88fa      	ldrh	r2, [r7, #6]
 80074b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	689b      	ldr	r3, [r3, #8]
 80074ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80074be:	d108      	bne.n	80074d2 <HAL_UART_Transmit+0x84>
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d104      	bne.n	80074d2 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	61bb      	str	r3, [r7, #24]
 80074d0:	e003      	b.n	80074da <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80074d2:	68bb      	ldr	r3, [r7, #8]
 80074d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074d6:	2300      	movs	r3, #0
 80074d8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80074e2:	e02c      	b.n	800753e <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	2200      	movs	r2, #0
 80074ec:	2180      	movs	r1, #128	; 0x80
 80074ee:	68f8      	ldr	r0, [r7, #12]
 80074f0:	f000 ffbb 	bl	800846a <UART_WaitOnFlagUntilTimeout>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d001      	beq.n	80074fe <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e039      	b.n	8007572 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d10b      	bne.n	800751c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	881b      	ldrh	r3, [r3, #0]
 8007508:	461a      	mov	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007512:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007514:	69bb      	ldr	r3, [r7, #24]
 8007516:	3302      	adds	r3, #2
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	e007      	b.n	800752c <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	781a      	ldrb	r2, [r3, #0]
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007526:	69fb      	ldr	r3, [r7, #28]
 8007528:	3301      	adds	r3, #1
 800752a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007532:	b29b      	uxth	r3, r3
 8007534:	3b01      	subs	r3, #1
 8007536:	b29a      	uxth	r2, r3
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007544:	b29b      	uxth	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d1cc      	bne.n	80074e4 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	9300      	str	r3, [sp, #0]
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	2200      	movs	r2, #0
 8007552:	2140      	movs	r1, #64	; 0x40
 8007554:	68f8      	ldr	r0, [r7, #12]
 8007556:	f000 ff88 	bl	800846a <UART_WaitOnFlagUntilTimeout>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007560:	2303      	movs	r3, #3
 8007562:	e006      	b.n	8007572 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2220      	movs	r2, #32
 8007568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800756c:	2300      	movs	r3, #0
 800756e:	e000      	b.n	8007572 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007570:	2302      	movs	r3, #2
  }
}
 8007572:	4618      	mov	r0, r3
 8007574:	3720      	adds	r7, #32
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
	...

0800757c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08a      	sub	sp, #40	; 0x28
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007590:	2b20      	cmp	r3, #32
 8007592:	d142      	bne.n	800761a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d002      	beq.n	80075a0 <HAL_UART_Receive_IT+0x24>
 800759a:	88fb      	ldrh	r3, [r7, #6]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d101      	bne.n	80075a4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e03b      	b.n	800761c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d101      	bne.n	80075b2 <HAL_UART_Receive_IT+0x36>
 80075ae:	2302      	movs	r3, #2
 80075b0:	e034      	b.n	800761c <HAL_UART_Receive_IT+0xa0>
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	2200      	movs	r2, #0
 80075be:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	4a17      	ldr	r2, [pc, #92]	; (8007624 <HAL_UART_Receive_IT+0xa8>)
 80075c6:	4293      	cmp	r3, r2
 80075c8:	d01f      	beq.n	800760a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d018      	beq.n	800760a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	613b      	str	r3, [r7, #16]
   return(result);
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075f6:	623b      	str	r3, [r7, #32]
 80075f8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fa:	69f9      	ldr	r1, [r7, #28]
 80075fc:	6a3a      	ldr	r2, [r7, #32]
 80075fe:	e841 2300 	strex	r3, r2, [r1]
 8007602:	61bb      	str	r3, [r7, #24]
   return(result);
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d1e6      	bne.n	80075d8 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800760a:	88fb      	ldrh	r3, [r7, #6]
 800760c:	461a      	mov	r2, r3
 800760e:	68b9      	ldr	r1, [r7, #8]
 8007610:	68f8      	ldr	r0, [r7, #12]
 8007612:	f000 fff3 	bl	80085fc <UART_Start_Receive_IT>
 8007616:	4603      	mov	r3, r0
 8007618:	e000      	b.n	800761c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800761a:	2302      	movs	r3, #2
  }
}
 800761c:	4618      	mov	r0, r3
 800761e:	3728      	adds	r7, #40	; 0x28
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	40008000 	.word	0x40008000

08007628 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b0ba      	sub	sp, #232	; 0xe8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800764e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007652:	f640 030f 	movw	r3, #2063	; 0x80f
 8007656:	4013      	ands	r3, r2
 8007658:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800765c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007660:	2b00      	cmp	r3, #0
 8007662:	d11b      	bne.n	800769c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007664:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007668:	f003 0320 	and.w	r3, r3, #32
 800766c:	2b00      	cmp	r3, #0
 800766e:	d015      	beq.n	800769c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007674:	f003 0320 	and.w	r3, r3, #32
 8007678:	2b00      	cmp	r3, #0
 800767a:	d105      	bne.n	8007688 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800767c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007684:	2b00      	cmp	r3, #0
 8007686:	d009      	beq.n	800769c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768c:	2b00      	cmp	r3, #0
 800768e:	f000 82d6 	beq.w	8007c3e <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	4798      	blx	r3
      }
      return;
 800769a:	e2d0      	b.n	8007c3e <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800769c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 811f 	beq.w	80078e4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076a6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80076aa:	4b8b      	ldr	r3, [pc, #556]	; (80078d8 <HAL_UART_IRQHandler+0x2b0>)
 80076ac:	4013      	ands	r3, r2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d106      	bne.n	80076c0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076b2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80076b6:	4b89      	ldr	r3, [pc, #548]	; (80078dc <HAL_UART_IRQHandler+0x2b4>)
 80076b8:	4013      	ands	r3, r2
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	f000 8112 	beq.w	80078e4 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076c4:	f003 0301 	and.w	r3, r3, #1
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d011      	beq.n	80076f0 <HAL_UART_IRQHandler+0xc8>
 80076cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d00b      	beq.n	80076f0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	2201      	movs	r2, #1
 80076de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076e6:	f043 0201 	orr.w	r2, r3, #1
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d011      	beq.n	8007720 <HAL_UART_IRQHandler+0xf8>
 80076fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	2b00      	cmp	r3, #0
 8007706:	d00b      	beq.n	8007720 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2202      	movs	r2, #2
 800770e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007716:	f043 0204 	orr.w	r2, r3, #4
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007724:	f003 0304 	and.w	r3, r3, #4
 8007728:	2b00      	cmp	r3, #0
 800772a:	d011      	beq.n	8007750 <HAL_UART_IRQHandler+0x128>
 800772c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007730:	f003 0301 	and.w	r3, r3, #1
 8007734:	2b00      	cmp	r3, #0
 8007736:	d00b      	beq.n	8007750 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	2204      	movs	r2, #4
 800773e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007746:	f043 0202 	orr.w	r2, r3, #2
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007754:	f003 0308 	and.w	r3, r3, #8
 8007758:	2b00      	cmp	r3, #0
 800775a:	d017      	beq.n	800778c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800775c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007760:	f003 0320 	and.w	r3, r3, #32
 8007764:	2b00      	cmp	r3, #0
 8007766:	d105      	bne.n	8007774 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007768:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800776c:	4b5a      	ldr	r3, [pc, #360]	; (80078d8 <HAL_UART_IRQHandler+0x2b0>)
 800776e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007770:	2b00      	cmp	r3, #0
 8007772:	d00b      	beq.n	800778c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2208      	movs	r2, #8
 800777a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007782:	f043 0208 	orr.w	r2, r3, #8
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800778c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007790:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007794:	2b00      	cmp	r3, #0
 8007796:	d012      	beq.n	80077be <HAL_UART_IRQHandler+0x196>
 8007798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800779c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00c      	beq.n	80077be <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80077ac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077b4:	f043 0220 	orr.w	r2, r3, #32
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 823c 	beq.w	8007c42 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077ce:	f003 0320 	and.w	r3, r3, #32
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d013      	beq.n	80077fe <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077da:	f003 0320 	and.w	r3, r3, #32
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d105      	bne.n	80077ee <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80077e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d007      	beq.n	80077fe <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007804:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007812:	2b40      	cmp	r3, #64	; 0x40
 8007814:	d005      	beq.n	8007822 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007816:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800781a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800781e:	2b00      	cmp	r3, #0
 8007820:	d04f      	beq.n	80078c2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f001 f814 	bl	8008850 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007832:	2b40      	cmp	r3, #64	; 0x40
 8007834:	d141      	bne.n	80078ba <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	3308      	adds	r3, #8
 800783c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800784c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007854:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007862:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007866:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800786e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800787a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800787e:	2b00      	cmp	r3, #0
 8007880:	d1d9      	bne.n	8007836 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d013      	beq.n	80078b2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800788e:	4a14      	ldr	r2, [pc, #80]	; (80078e0 <HAL_UART_IRQHandler+0x2b8>)
 8007890:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007896:	4618      	mov	r0, r3
 8007898:	f7fc fc74 	bl	8004184 <HAL_DMA_Abort_IT>
 800789c:	4603      	mov	r3, r0
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d017      	beq.n	80078d2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078a8:	687a      	ldr	r2, [r7, #4]
 80078aa:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80078ac:	4610      	mov	r0, r2
 80078ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b0:	e00f      	b.n	80078d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 f9da 	bl	8007c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b8:	e00b      	b.n	80078d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f9d6 	bl	8007c6c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078c0:	e007      	b.n	80078d2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 f9d2 	bl	8007c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80078d0:	e1b7      	b.n	8007c42 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d2:	bf00      	nop
    return;
 80078d4:	e1b5      	b.n	8007c42 <HAL_UART_IRQHandler+0x61a>
 80078d6:	bf00      	nop
 80078d8:	10000001 	.word	0x10000001
 80078dc:	04000120 	.word	0x04000120
 80078e0:	0800891d 	.word	0x0800891d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e8:	2b01      	cmp	r3, #1
 80078ea:	f040 814a 	bne.w	8007b82 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f2:	f003 0310 	and.w	r3, r3, #16
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	f000 8143 	beq.w	8007b82 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007900:	f003 0310 	and.w	r3, r3, #16
 8007904:	2b00      	cmp	r3, #0
 8007906:	f000 813c 	beq.w	8007b82 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	2210      	movs	r2, #16
 8007910:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800791c:	2b40      	cmp	r3, #64	; 0x40
 800791e:	f040 80b5 	bne.w	8007a8c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800792e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 8187 	beq.w	8007c46 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800793e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007942:	429a      	cmp	r2, r3
 8007944:	f080 817f 	bcs.w	8007c46 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800794e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	f040 8086 	bne.w	8007a70 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800796c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007970:	e853 3f00 	ldrex	r3, [r3]
 8007974:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007978:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800797c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	461a      	mov	r2, r3
 800798a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800798e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007992:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007996:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800799a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800799e:	e841 2300 	strex	r3, r2, [r1]
 80079a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80079a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1da      	bne.n	8007964 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	3308      	adds	r3, #8
 80079b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079b8:	e853 3f00 	ldrex	r3, [r3]
 80079bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80079be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80079c0:	f023 0301 	bic.w	r3, r3, #1
 80079c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	3308      	adds	r3, #8
 80079ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80079d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80079d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80079da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80079e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e1      	bne.n	80079ae <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80079fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80079fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	3308      	adds	r3, #8
 8007a0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007a0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007a10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007a14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007a1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e3      	bne.n	80079ea <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a38:	e853 3f00 	ldrex	r3, [r3]
 8007a3c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007a3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a40:	f023 0310 	bic.w	r3, r3, #16
 8007a44:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	461a      	mov	r2, r3
 8007a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007a52:	65bb      	str	r3, [r7, #88]	; 0x58
 8007a54:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e4      	bne.n	8007a30 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7fc fb31 	bl	80040d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a7c:	b29b      	uxth	r3, r3
 8007a7e:	1ad3      	subs	r3, r2, r3
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 f8fb 	bl	8007c80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a8a:	e0dc      	b.n	8007c46 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a98:	b29b      	uxth	r3, r3
 8007a9a:	1ad3      	subs	r3, r2, r3
 8007a9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007aa6:	b29b      	uxth	r3, r3
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f000 80ce 	beq.w	8007c4a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007aae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 80c9 	beq.w	8007c4a <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	e853 3f00 	ldrex	r3, [r3]
 8007ac4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ac6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ac8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007acc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	461a      	mov	r2, r3
 8007ad6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007ada:	647b      	str	r3, [r7, #68]	; 0x44
 8007adc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ade:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ae0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ae2:	e841 2300 	strex	r3, r2, [r1]
 8007ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ae8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d1e4      	bne.n	8007ab8 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	3308      	adds	r3, #8
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	623b      	str	r3, [r7, #32]
   return(result);
 8007afe:	6a3b      	ldr	r3, [r7, #32]
 8007b00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b04:	f023 0301 	bic.w	r3, r3, #1
 8007b08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3308      	adds	r3, #8
 8007b12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007b16:	633a      	str	r2, [r7, #48]	; 0x30
 8007b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e1      	bne.n	8007aee <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	e853 3f00 	ldrex	r3, [r3]
 8007b4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f023 0310 	bic.w	r3, r3, #16
 8007b52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007b60:	61fb      	str	r3, [r7, #28]
 8007b62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	69b9      	ldr	r1, [r7, #24]
 8007b66:	69fa      	ldr	r2, [r7, #28]
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007b6e:	697b      	ldr	r3, [r7, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e4      	bne.n	8007b3e <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b78:	4619      	mov	r1, r3
 8007b7a:	6878      	ldr	r0, [r7, #4]
 8007b7c:	f000 f880 	bl	8007c80 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b80:	e063      	b.n	8007c4a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d00e      	beq.n	8007bac <HAL_UART_IRQHandler+0x584>
 8007b8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d008      	beq.n	8007bac <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ba2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f001 fb57 	bl	8009258 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007baa:	e051      	b.n	8007c50 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d014      	beq.n	8007be2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d105      	bne.n	8007bd0 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bc8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d008      	beq.n	8007be2 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d03a      	beq.n	8007c4e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	4798      	blx	r3
    }
    return;
 8007be0:	e035      	b.n	8007c4e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d009      	beq.n	8007c02 <HAL_UART_IRQHandler+0x5da>
 8007bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d003      	beq.n	8007c02 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 fea4 	bl	8008948 <UART_EndTransmit_IT>
    return;
 8007c00:	e026      	b.n	8007c50 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c06:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d009      	beq.n	8007c22 <HAL_UART_IRQHandler+0x5fa>
 8007c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c12:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d003      	beq.n	8007c22 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f001 fb30 	bl	8009280 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c20:	e016      	b.n	8007c50 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d010      	beq.n	8007c50 <HAL_UART_IRQHandler+0x628>
 8007c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da0c      	bge.n	8007c50 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f001 fb18 	bl	800926c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c3c:	e008      	b.n	8007c50 <HAL_UART_IRQHandler+0x628>
      return;
 8007c3e:	bf00      	nop
 8007c40:	e006      	b.n	8007c50 <HAL_UART_IRQHandler+0x628>
    return;
 8007c42:	bf00      	nop
 8007c44:	e004      	b.n	8007c50 <HAL_UART_IRQHandler+0x628>
      return;
 8007c46:	bf00      	nop
 8007c48:	e002      	b.n	8007c50 <HAL_UART_IRQHandler+0x628>
      return;
 8007c4a:	bf00      	nop
 8007c4c:	e000      	b.n	8007c50 <HAL_UART_IRQHandler+0x628>
    return;
 8007c4e:	bf00      	nop
  }
}
 8007c50:	37e8      	adds	r7, #232	; 0xe8
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
 8007c56:	bf00      	nop

08007c58 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c74:	bf00      	nop
 8007c76:	370c      	adds	r7, #12
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7e:	4770      	bx	lr

08007c80 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c80:	b480      	push	{r7}
 8007c82:	b083      	sub	sp, #12
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
 8007c88:	460b      	mov	r3, r1
 8007c8a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c9c:	b08c      	sub	sp, #48	; 0x30
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	689a      	ldr	r2, [r3, #8]
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	691b      	ldr	r3, [r3, #16]
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	697b      	ldr	r3, [r7, #20]
 8007cb4:	695b      	ldr	r3, [r3, #20]
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	4313      	orrs	r3, r2
 8007cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	681a      	ldr	r2, [r3, #0]
 8007cc6:	4baa      	ldr	r3, [pc, #680]	; (8007f70 <UART_SetConfig+0x2d8>)
 8007cc8:	4013      	ands	r3, r2
 8007cca:	697a      	ldr	r2, [r7, #20]
 8007ccc:	6812      	ldr	r2, [r2, #0]
 8007cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007cd0:	430b      	orrs	r3, r1
 8007cd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	685b      	ldr	r3, [r3, #4]
 8007cda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	699b      	ldr	r3, [r3, #24]
 8007cee:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a9f      	ldr	r2, [pc, #636]	; (8007f74 <UART_SetConfig+0x2dc>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d004      	beq.n	8007d04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	6a1b      	ldr	r3, [r3, #32]
 8007cfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d00:	4313      	orrs	r3, r2
 8007d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007d04:	697b      	ldr	r3, [r7, #20]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007d0e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007d12:	697a      	ldr	r2, [r7, #20]
 8007d14:	6812      	ldr	r2, [r2, #0]
 8007d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d18:	430b      	orrs	r3, r1
 8007d1a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d22:	f023 010f 	bic.w	r1, r3, #15
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d2a:	697b      	ldr	r3, [r7, #20]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	430a      	orrs	r2, r1
 8007d30:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a90      	ldr	r2, [pc, #576]	; (8007f78 <UART_SetConfig+0x2e0>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d125      	bne.n	8007d88 <UART_SetConfig+0xf0>
 8007d3c:	4b8f      	ldr	r3, [pc, #572]	; (8007f7c <UART_SetConfig+0x2e4>)
 8007d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d81a      	bhi.n	8007d80 <UART_SetConfig+0xe8>
 8007d4a:	a201      	add	r2, pc, #4	; (adr r2, 8007d50 <UART_SetConfig+0xb8>)
 8007d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d50:	08007d61 	.word	0x08007d61
 8007d54:	08007d71 	.word	0x08007d71
 8007d58:	08007d69 	.word	0x08007d69
 8007d5c:	08007d79 	.word	0x08007d79
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d66:	e116      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d6e:	e112      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007d70:	2304      	movs	r3, #4
 8007d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d76:	e10e      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007d78:	2308      	movs	r3, #8
 8007d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d7e:	e10a      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007d80:	2310      	movs	r3, #16
 8007d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007d86:	e106      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a7c      	ldr	r2, [pc, #496]	; (8007f80 <UART_SetConfig+0x2e8>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d138      	bne.n	8007e04 <UART_SetConfig+0x16c>
 8007d92:	4b7a      	ldr	r3, [pc, #488]	; (8007f7c <UART_SetConfig+0x2e4>)
 8007d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d98:	f003 030c 	and.w	r3, r3, #12
 8007d9c:	2b0c      	cmp	r3, #12
 8007d9e:	d82d      	bhi.n	8007dfc <UART_SetConfig+0x164>
 8007da0:	a201      	add	r2, pc, #4	; (adr r2, 8007da8 <UART_SetConfig+0x110>)
 8007da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da6:	bf00      	nop
 8007da8:	08007ddd 	.word	0x08007ddd
 8007dac:	08007dfd 	.word	0x08007dfd
 8007db0:	08007dfd 	.word	0x08007dfd
 8007db4:	08007dfd 	.word	0x08007dfd
 8007db8:	08007ded 	.word	0x08007ded
 8007dbc:	08007dfd 	.word	0x08007dfd
 8007dc0:	08007dfd 	.word	0x08007dfd
 8007dc4:	08007dfd 	.word	0x08007dfd
 8007dc8:	08007de5 	.word	0x08007de5
 8007dcc:	08007dfd 	.word	0x08007dfd
 8007dd0:	08007dfd 	.word	0x08007dfd
 8007dd4:	08007dfd 	.word	0x08007dfd
 8007dd8:	08007df5 	.word	0x08007df5
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007de2:	e0d8      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007de4:	2302      	movs	r3, #2
 8007de6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dea:	e0d4      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007dec:	2304      	movs	r3, #4
 8007dee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007df2:	e0d0      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007df4:	2308      	movs	r3, #8
 8007df6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007dfa:	e0cc      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007dfc:	2310      	movs	r3, #16
 8007dfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e02:	e0c8      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a5e      	ldr	r2, [pc, #376]	; (8007f84 <UART_SetConfig+0x2ec>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d125      	bne.n	8007e5a <UART_SetConfig+0x1c2>
 8007e0e:	4b5b      	ldr	r3, [pc, #364]	; (8007f7c <UART_SetConfig+0x2e4>)
 8007e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e14:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007e18:	2b30      	cmp	r3, #48	; 0x30
 8007e1a:	d016      	beq.n	8007e4a <UART_SetConfig+0x1b2>
 8007e1c:	2b30      	cmp	r3, #48	; 0x30
 8007e1e:	d818      	bhi.n	8007e52 <UART_SetConfig+0x1ba>
 8007e20:	2b20      	cmp	r3, #32
 8007e22:	d00a      	beq.n	8007e3a <UART_SetConfig+0x1a2>
 8007e24:	2b20      	cmp	r3, #32
 8007e26:	d814      	bhi.n	8007e52 <UART_SetConfig+0x1ba>
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d002      	beq.n	8007e32 <UART_SetConfig+0x19a>
 8007e2c:	2b10      	cmp	r3, #16
 8007e2e:	d008      	beq.n	8007e42 <UART_SetConfig+0x1aa>
 8007e30:	e00f      	b.n	8007e52 <UART_SetConfig+0x1ba>
 8007e32:	2300      	movs	r3, #0
 8007e34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e38:	e0ad      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007e3a:	2302      	movs	r3, #2
 8007e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e40:	e0a9      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007e42:	2304      	movs	r3, #4
 8007e44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e48:	e0a5      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007e4a:	2308      	movs	r3, #8
 8007e4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e50:	e0a1      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007e52:	2310      	movs	r3, #16
 8007e54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e58:	e09d      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	4a4a      	ldr	r2, [pc, #296]	; (8007f88 <UART_SetConfig+0x2f0>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d125      	bne.n	8007eb0 <UART_SetConfig+0x218>
 8007e64:	4b45      	ldr	r3, [pc, #276]	; (8007f7c <UART_SetConfig+0x2e4>)
 8007e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007e6e:	2bc0      	cmp	r3, #192	; 0xc0
 8007e70:	d016      	beq.n	8007ea0 <UART_SetConfig+0x208>
 8007e72:	2bc0      	cmp	r3, #192	; 0xc0
 8007e74:	d818      	bhi.n	8007ea8 <UART_SetConfig+0x210>
 8007e76:	2b80      	cmp	r3, #128	; 0x80
 8007e78:	d00a      	beq.n	8007e90 <UART_SetConfig+0x1f8>
 8007e7a:	2b80      	cmp	r3, #128	; 0x80
 8007e7c:	d814      	bhi.n	8007ea8 <UART_SetConfig+0x210>
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d002      	beq.n	8007e88 <UART_SetConfig+0x1f0>
 8007e82:	2b40      	cmp	r3, #64	; 0x40
 8007e84:	d008      	beq.n	8007e98 <UART_SetConfig+0x200>
 8007e86:	e00f      	b.n	8007ea8 <UART_SetConfig+0x210>
 8007e88:	2300      	movs	r3, #0
 8007e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e8e:	e082      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007e90:	2302      	movs	r3, #2
 8007e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e96:	e07e      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007e98:	2304      	movs	r3, #4
 8007e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007e9e:	e07a      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007ea0:	2308      	movs	r3, #8
 8007ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ea6:	e076      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007ea8:	2310      	movs	r3, #16
 8007eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eae:	e072      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a35      	ldr	r2, [pc, #212]	; (8007f8c <UART_SetConfig+0x2f4>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d12a      	bne.n	8007f10 <UART_SetConfig+0x278>
 8007eba:	4b30      	ldr	r3, [pc, #192]	; (8007f7c <UART_SetConfig+0x2e4>)
 8007ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ec8:	d01a      	beq.n	8007f00 <UART_SetConfig+0x268>
 8007eca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ece:	d81b      	bhi.n	8007f08 <UART_SetConfig+0x270>
 8007ed0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed4:	d00c      	beq.n	8007ef0 <UART_SetConfig+0x258>
 8007ed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007eda:	d815      	bhi.n	8007f08 <UART_SetConfig+0x270>
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d003      	beq.n	8007ee8 <UART_SetConfig+0x250>
 8007ee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ee4:	d008      	beq.n	8007ef8 <UART_SetConfig+0x260>
 8007ee6:	e00f      	b.n	8007f08 <UART_SetConfig+0x270>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eee:	e052      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007ef0:	2302      	movs	r3, #2
 8007ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ef6:	e04e      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007ef8:	2304      	movs	r3, #4
 8007efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007efe:	e04a      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007f00:	2308      	movs	r3, #8
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f06:	e046      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007f08:	2310      	movs	r3, #16
 8007f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f0e:	e042      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007f10:	697b      	ldr	r3, [r7, #20]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4a17      	ldr	r2, [pc, #92]	; (8007f74 <UART_SetConfig+0x2dc>)
 8007f16:	4293      	cmp	r3, r2
 8007f18:	d13a      	bne.n	8007f90 <UART_SetConfig+0x2f8>
 8007f1a:	4b18      	ldr	r3, [pc, #96]	; (8007f7c <UART_SetConfig+0x2e4>)
 8007f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f20:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007f24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f28:	d01a      	beq.n	8007f60 <UART_SetConfig+0x2c8>
 8007f2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007f2e:	d81b      	bhi.n	8007f68 <UART_SetConfig+0x2d0>
 8007f30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f34:	d00c      	beq.n	8007f50 <UART_SetConfig+0x2b8>
 8007f36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007f3a:	d815      	bhi.n	8007f68 <UART_SetConfig+0x2d0>
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <UART_SetConfig+0x2b0>
 8007f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f44:	d008      	beq.n	8007f58 <UART_SetConfig+0x2c0>
 8007f46:	e00f      	b.n	8007f68 <UART_SetConfig+0x2d0>
 8007f48:	2300      	movs	r3, #0
 8007f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f4e:	e022      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007f50:	2302      	movs	r3, #2
 8007f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f56:	e01e      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007f58:	2304      	movs	r3, #4
 8007f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f5e:	e01a      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007f60:	2308      	movs	r3, #8
 8007f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f66:	e016      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007f68:	2310      	movs	r3, #16
 8007f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f6e:	e012      	b.n	8007f96 <UART_SetConfig+0x2fe>
 8007f70:	cfff69f3 	.word	0xcfff69f3
 8007f74:	40008000 	.word	0x40008000
 8007f78:	40013800 	.word	0x40013800
 8007f7c:	40021000 	.word	0x40021000
 8007f80:	40004400 	.word	0x40004400
 8007f84:	40004800 	.word	0x40004800
 8007f88:	40004c00 	.word	0x40004c00
 8007f8c:	40005000 	.word	0x40005000
 8007f90:	2310      	movs	r3, #16
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007f96:	697b      	ldr	r3, [r7, #20]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4aae      	ldr	r2, [pc, #696]	; (8008254 <UART_SetConfig+0x5bc>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	f040 8097 	bne.w	80080d0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007fa2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007fa6:	2b08      	cmp	r3, #8
 8007fa8:	d823      	bhi.n	8007ff2 <UART_SetConfig+0x35a>
 8007faa:	a201      	add	r2, pc, #4	; (adr r2, 8007fb0 <UART_SetConfig+0x318>)
 8007fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fb0:	08007fd5 	.word	0x08007fd5
 8007fb4:	08007ff3 	.word	0x08007ff3
 8007fb8:	08007fdd 	.word	0x08007fdd
 8007fbc:	08007ff3 	.word	0x08007ff3
 8007fc0:	08007fe3 	.word	0x08007fe3
 8007fc4:	08007ff3 	.word	0x08007ff3
 8007fc8:	08007ff3 	.word	0x08007ff3
 8007fcc:	08007ff3 	.word	0x08007ff3
 8007fd0:	08007feb 	.word	0x08007feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fd4:	f7fd f9da 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8007fd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fda:	e010      	b.n	8007ffe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007fdc:	4b9e      	ldr	r3, [pc, #632]	; (8008258 <UART_SetConfig+0x5c0>)
 8007fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007fe0:	e00d      	b.n	8007ffe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007fe2:	f7fd f965 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8007fe6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007fe8:	e009      	b.n	8007ffe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007ff0:	e005      	b.n	8007ffe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007ffc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008000:	2b00      	cmp	r3, #0
 8008002:	f000 8130 	beq.w	8008266 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800800a:	4a94      	ldr	r2, [pc, #592]	; (800825c <UART_SetConfig+0x5c4>)
 800800c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008010:	461a      	mov	r2, r3
 8008012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008014:	fbb3 f3f2 	udiv	r3, r3, r2
 8008018:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	4613      	mov	r3, r2
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	4413      	add	r3, r2
 8008024:	69ba      	ldr	r2, [r7, #24]
 8008026:	429a      	cmp	r2, r3
 8008028:	d305      	bcc.n	8008036 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800802a:	697b      	ldr	r3, [r7, #20]
 800802c:	685b      	ldr	r3, [r3, #4]
 800802e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	429a      	cmp	r2, r3
 8008034:	d903      	bls.n	800803e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800803c:	e113      	b.n	8008266 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800803e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008040:	2200      	movs	r2, #0
 8008042:	60bb      	str	r3, [r7, #8]
 8008044:	60fa      	str	r2, [r7, #12]
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800804a:	4a84      	ldr	r2, [pc, #528]	; (800825c <UART_SetConfig+0x5c4>)
 800804c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008050:	b29b      	uxth	r3, r3
 8008052:	2200      	movs	r2, #0
 8008054:	603b      	str	r3, [r7, #0]
 8008056:	607a      	str	r2, [r7, #4]
 8008058:	e9d7 2300 	ldrd	r2, r3, [r7]
 800805c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008060:	f7f8 fd5c 	bl	8000b1c <__aeabi_uldivmod>
 8008064:	4602      	mov	r2, r0
 8008066:	460b      	mov	r3, r1
 8008068:	4610      	mov	r0, r2
 800806a:	4619      	mov	r1, r3
 800806c:	f04f 0200 	mov.w	r2, #0
 8008070:	f04f 0300 	mov.w	r3, #0
 8008074:	020b      	lsls	r3, r1, #8
 8008076:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800807a:	0202      	lsls	r2, r0, #8
 800807c:	6979      	ldr	r1, [r7, #20]
 800807e:	6849      	ldr	r1, [r1, #4]
 8008080:	0849      	lsrs	r1, r1, #1
 8008082:	2000      	movs	r0, #0
 8008084:	460c      	mov	r4, r1
 8008086:	4605      	mov	r5, r0
 8008088:	eb12 0804 	adds.w	r8, r2, r4
 800808c:	eb43 0905 	adc.w	r9, r3, r5
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	685b      	ldr	r3, [r3, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	469a      	mov	sl, r3
 8008098:	4693      	mov	fp, r2
 800809a:	4652      	mov	r2, sl
 800809c:	465b      	mov	r3, fp
 800809e:	4640      	mov	r0, r8
 80080a0:	4649      	mov	r1, r9
 80080a2:	f7f8 fd3b 	bl	8000b1c <__aeabi_uldivmod>
 80080a6:	4602      	mov	r2, r0
 80080a8:	460b      	mov	r3, r1
 80080aa:	4613      	mov	r3, r2
 80080ac:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80080ae:	6a3b      	ldr	r3, [r7, #32]
 80080b0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80080b4:	d308      	bcc.n	80080c8 <UART_SetConfig+0x430>
 80080b6:	6a3b      	ldr	r3, [r7, #32]
 80080b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80080bc:	d204      	bcs.n	80080c8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	6a3a      	ldr	r2, [r7, #32]
 80080c4:	60da      	str	r2, [r3, #12]
 80080c6:	e0ce      	b.n	8008266 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80080ce:	e0ca      	b.n	8008266 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080d0:	697b      	ldr	r3, [r7, #20]
 80080d2:	69db      	ldr	r3, [r3, #28]
 80080d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080d8:	d166      	bne.n	80081a8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80080da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80080de:	2b08      	cmp	r3, #8
 80080e0:	d827      	bhi.n	8008132 <UART_SetConfig+0x49a>
 80080e2:	a201      	add	r2, pc, #4	; (adr r2, 80080e8 <UART_SetConfig+0x450>)
 80080e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e8:	0800810d 	.word	0x0800810d
 80080ec:	08008115 	.word	0x08008115
 80080f0:	0800811d 	.word	0x0800811d
 80080f4:	08008133 	.word	0x08008133
 80080f8:	08008123 	.word	0x08008123
 80080fc:	08008133 	.word	0x08008133
 8008100:	08008133 	.word	0x08008133
 8008104:	08008133 	.word	0x08008133
 8008108:	0800812b 	.word	0x0800812b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800810c:	f7fd f93e 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 8008110:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008112:	e014      	b.n	800813e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008114:	f7fd f950 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 8008118:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800811a:	e010      	b.n	800813e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800811c:	4b4e      	ldr	r3, [pc, #312]	; (8008258 <UART_SetConfig+0x5c0>)
 800811e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008120:	e00d      	b.n	800813e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008122:	f7fd f8c5 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8008126:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008128:	e009      	b.n	800813e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800812a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800812e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008130:	e005      	b.n	800813e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008132:	2300      	movs	r3, #0
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008136:	2301      	movs	r3, #1
 8008138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800813c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800813e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 8090 	beq.w	8008266 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814a:	4a44      	ldr	r2, [pc, #272]	; (800825c <UART_SetConfig+0x5c4>)
 800814c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008150:	461a      	mov	r2, r3
 8008152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008154:	fbb3 f3f2 	udiv	r3, r3, r2
 8008158:	005a      	lsls	r2, r3, #1
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	685b      	ldr	r3, [r3, #4]
 800815e:	085b      	lsrs	r3, r3, #1
 8008160:	441a      	add	r2, r3
 8008162:	697b      	ldr	r3, [r7, #20]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	fbb2 f3f3 	udiv	r3, r2, r3
 800816a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	2b0f      	cmp	r3, #15
 8008170:	d916      	bls.n	80081a0 <UART_SetConfig+0x508>
 8008172:	6a3b      	ldr	r3, [r7, #32]
 8008174:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008178:	d212      	bcs.n	80081a0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800817a:	6a3b      	ldr	r3, [r7, #32]
 800817c:	b29b      	uxth	r3, r3
 800817e:	f023 030f 	bic.w	r3, r3, #15
 8008182:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008184:	6a3b      	ldr	r3, [r7, #32]
 8008186:	085b      	lsrs	r3, r3, #1
 8008188:	b29b      	uxth	r3, r3
 800818a:	f003 0307 	and.w	r3, r3, #7
 800818e:	b29a      	uxth	r2, r3
 8008190:	8bfb      	ldrh	r3, [r7, #30]
 8008192:	4313      	orrs	r3, r2
 8008194:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	8bfa      	ldrh	r2, [r7, #30]
 800819c:	60da      	str	r2, [r3, #12]
 800819e:	e062      	b.n	8008266 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081a6:	e05e      	b.n	8008266 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80081a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80081ac:	2b08      	cmp	r3, #8
 80081ae:	d828      	bhi.n	8008202 <UART_SetConfig+0x56a>
 80081b0:	a201      	add	r2, pc, #4	; (adr r2, 80081b8 <UART_SetConfig+0x520>)
 80081b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b6:	bf00      	nop
 80081b8:	080081dd 	.word	0x080081dd
 80081bc:	080081e5 	.word	0x080081e5
 80081c0:	080081ed 	.word	0x080081ed
 80081c4:	08008203 	.word	0x08008203
 80081c8:	080081f3 	.word	0x080081f3
 80081cc:	08008203 	.word	0x08008203
 80081d0:	08008203 	.word	0x08008203
 80081d4:	08008203 	.word	0x08008203
 80081d8:	080081fb 	.word	0x080081fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081dc:	f7fd f8d6 	bl	800538c <HAL_RCC_GetPCLK1Freq>
 80081e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081e2:	e014      	b.n	800820e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081e4:	f7fd f8e8 	bl	80053b8 <HAL_RCC_GetPCLK2Freq>
 80081e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081ea:	e010      	b.n	800820e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081ec:	4b1a      	ldr	r3, [pc, #104]	; (8008258 <UART_SetConfig+0x5c0>)
 80081ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80081f0:	e00d      	b.n	800820e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f2:	f7fd f85d 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 80081f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80081f8:	e009      	b.n	800820e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008200:	e005      	b.n	800820e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008202:	2300      	movs	r3, #0
 8008204:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008206:	2301      	movs	r3, #1
 8008208:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800820c:	bf00      	nop
    }

    if (pclk != 0U)
 800820e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d028      	beq.n	8008266 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008218:	4a10      	ldr	r2, [pc, #64]	; (800825c <UART_SetConfig+0x5c4>)
 800821a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800821e:	461a      	mov	r2, r3
 8008220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008222:	fbb3 f2f2 	udiv	r2, r3, r2
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	085b      	lsrs	r3, r3, #1
 800822c:	441a      	add	r2, r3
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	fbb2 f3f3 	udiv	r3, r2, r3
 8008236:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	2b0f      	cmp	r3, #15
 800823c:	d910      	bls.n	8008260 <UART_SetConfig+0x5c8>
 800823e:	6a3b      	ldr	r3, [r7, #32]
 8008240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008244:	d20c      	bcs.n	8008260 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008246:	6a3b      	ldr	r3, [r7, #32]
 8008248:	b29a      	uxth	r2, r3
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	60da      	str	r2, [r3, #12]
 8008250:	e009      	b.n	8008266 <UART_SetConfig+0x5ce>
 8008252:	bf00      	nop
 8008254:	40008000 	.word	0x40008000
 8008258:	00f42400 	.word	0x00f42400
 800825c:	0800aeac 	.word	0x0800aeac
      }
      else
      {
        ret = HAL_ERROR;
 8008260:	2301      	movs	r3, #1
 8008262:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2201      	movs	r2, #1
 800826a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	2201      	movs	r2, #1
 8008272:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2200      	movs	r2, #0
 800827a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	2200      	movs	r2, #0
 8008280:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008282:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008286:	4618      	mov	r0, r3
 8008288:	3730      	adds	r7, #48	; 0x30
 800828a:	46bd      	mov	sp, r7
 800828c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008290 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008290:	b480      	push	{r7}
 8008292:	b083      	sub	sp, #12
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800829c:	f003 0301 	and.w	r3, r3, #1
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00a      	beq.n	80082ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	430a      	orrs	r2, r1
 80082b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d00a      	beq.n	80082dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	430a      	orrs	r2, r1
 80082da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e0:	f003 0304 	and.w	r3, r3, #4
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00a      	beq.n	80082fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	430a      	orrs	r2, r1
 80082fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008302:	f003 0308 	and.w	r3, r3, #8
 8008306:	2b00      	cmp	r3, #0
 8008308:	d00a      	beq.n	8008320 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	430a      	orrs	r2, r1
 800831e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008324:	f003 0310 	and.w	r3, r3, #16
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00a      	beq.n	8008342 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	689b      	ldr	r3, [r3, #8]
 8008332:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	430a      	orrs	r2, r1
 8008340:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008346:	f003 0320 	and.w	r3, r3, #32
 800834a:	2b00      	cmp	r3, #0
 800834c:	d00a      	beq.n	8008364 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	430a      	orrs	r2, r1
 8008362:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800836c:	2b00      	cmp	r3, #0
 800836e:	d01a      	beq.n	80083a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800838e:	d10a      	bne.n	80083a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d00a      	beq.n	80083c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685b      	ldr	r3, [r3, #4]
 80083b8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	430a      	orrs	r2, r1
 80083c6:	605a      	str	r2, [r3, #4]
  }
}
 80083c8:	bf00      	nop
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b086      	sub	sp, #24
 80083d8:	af02      	add	r7, sp, #8
 80083da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80083e4:	f7f9 fe4c 	bl	8002080 <HAL_GetTick>
 80083e8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f003 0308 	and.w	r3, r3, #8
 80083f4:	2b08      	cmp	r3, #8
 80083f6:	d10e      	bne.n	8008416 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80083f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	2200      	movs	r2, #0
 8008402:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f000 f82f 	bl	800846a <UART_WaitOnFlagUntilTimeout>
 800840c:	4603      	mov	r3, r0
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008412:	2303      	movs	r3, #3
 8008414:	e025      	b.n	8008462 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0304 	and.w	r3, r3, #4
 8008420:	2b04      	cmp	r3, #4
 8008422:	d10e      	bne.n	8008442 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008424:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008428:	9300      	str	r3, [sp, #0]
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	2200      	movs	r2, #0
 800842e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f819 	bl	800846a <UART_WaitOnFlagUntilTimeout>
 8008438:	4603      	mov	r3, r0
 800843a:	2b00      	cmp	r3, #0
 800843c:	d001      	beq.n	8008442 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800843e:	2303      	movs	r3, #3
 8008440:	e00f      	b.n	8008462 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	2220      	movs	r2, #32
 8008446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	2220      	movs	r2, #32
 800844e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2200      	movs	r2, #0
 8008456:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	2200      	movs	r2, #0
 800845c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008460:	2300      	movs	r3, #0
}
 8008462:	4618      	mov	r0, r3
 8008464:	3710      	adds	r7, #16
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800846a:	b580      	push	{r7, lr}
 800846c:	b09c      	sub	sp, #112	; 0x70
 800846e:	af00      	add	r7, sp, #0
 8008470:	60f8      	str	r0, [r7, #12]
 8008472:	60b9      	str	r1, [r7, #8]
 8008474:	603b      	str	r3, [r7, #0]
 8008476:	4613      	mov	r3, r2
 8008478:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800847a:	e0a9      	b.n	80085d0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800847c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800847e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008482:	f000 80a5 	beq.w	80085d0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008486:	f7f9 fdfb 	bl	8002080 <HAL_GetTick>
 800848a:	4602      	mov	r2, r0
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	1ad3      	subs	r3, r2, r3
 8008490:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008492:	429a      	cmp	r2, r3
 8008494:	d302      	bcc.n	800849c <UART_WaitOnFlagUntilTimeout+0x32>
 8008496:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008498:	2b00      	cmp	r3, #0
 800849a:	d140      	bne.n	800851e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084a4:	e853 3f00 	ldrex	r3, [r3]
 80084a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084b0:	667b      	str	r3, [r7, #100]	; 0x64
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	461a      	mov	r2, r3
 80084b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084c2:	e841 2300 	strex	r3, r2, [r1]
 80084c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80084c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d1e6      	bne.n	800849c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	3308      	adds	r3, #8
 80084d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084d8:	e853 3f00 	ldrex	r3, [r3]
 80084dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80084de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e0:	f023 0301 	bic.w	r3, r3, #1
 80084e4:	663b      	str	r3, [r7, #96]	; 0x60
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	3308      	adds	r3, #8
 80084ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80084ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80084f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80084f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80084f6:	e841 2300 	strex	r3, r2, [r1]
 80084fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80084fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d1e5      	bne.n	80084ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	2220      	movs	r2, #32
 8008506:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	2220      	movs	r2, #32
 800850e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	2200      	movs	r2, #0
 8008516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e069      	b.n	80085f2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	2b00      	cmp	r3, #0
 800852a:	d051      	beq.n	80085d0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	69db      	ldr	r3, [r3, #28]
 8008532:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800853a:	d149      	bne.n	80085d0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008544:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800855a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008564:	637b      	str	r3, [r7, #52]	; 0x34
 8008566:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800856a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e6      	bne.n	8008546 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	3308      	adds	r3, #8
 800857e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008580:	697b      	ldr	r3, [r7, #20]
 8008582:	e853 3f00 	ldrex	r3, [r3]
 8008586:	613b      	str	r3, [r7, #16]
   return(result);
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f023 0301 	bic.w	r3, r3, #1
 800858e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	3308      	adds	r3, #8
 8008596:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008598:	623a      	str	r2, [r7, #32]
 800859a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800859c:	69f9      	ldr	r1, [r7, #28]
 800859e:	6a3a      	ldr	r2, [r7, #32]
 80085a0:	e841 2300 	strex	r3, r2, [r1]
 80085a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80085a6:	69bb      	ldr	r3, [r7, #24]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d1e5      	bne.n	8008578 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	2220      	movs	r2, #32
 80085b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2220      	movs	r2, #32
 80085b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2220      	movs	r2, #32
 80085c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80085cc:	2303      	movs	r3, #3
 80085ce:	e010      	b.n	80085f2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	69da      	ldr	r2, [r3, #28]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	4013      	ands	r3, r2
 80085da:	68ba      	ldr	r2, [r7, #8]
 80085dc:	429a      	cmp	r2, r3
 80085de:	bf0c      	ite	eq
 80085e0:	2301      	moveq	r3, #1
 80085e2:	2300      	movne	r3, #0
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	461a      	mov	r2, r3
 80085e8:	79fb      	ldrb	r3, [r7, #7]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	f43f af46 	beq.w	800847c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80085f0:	2300      	movs	r3, #0
}
 80085f2:	4618      	mov	r0, r3
 80085f4:	3770      	adds	r7, #112	; 0x70
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bd80      	pop	{r7, pc}
	...

080085fc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b0a3      	sub	sp, #140	; 0x8c
 8008600:	af00      	add	r7, sp, #0
 8008602:	60f8      	str	r0, [r7, #12]
 8008604:	60b9      	str	r1, [r7, #8]
 8008606:	4613      	mov	r3, r2
 8008608:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	68ba      	ldr	r2, [r7, #8]
 800860e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	88fa      	ldrh	r2, [r7, #6]
 8008614:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	88fa      	ldrh	r2, [r7, #6]
 800861c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2200      	movs	r2, #0
 8008624:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800862e:	d10e      	bne.n	800864e <UART_Start_Receive_IT+0x52>
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	691b      	ldr	r3, [r3, #16]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d105      	bne.n	8008644 <UART_Start_Receive_IT+0x48>
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800863e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008642:	e02d      	b.n	80086a0 <UART_Start_Receive_IT+0xa4>
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	22ff      	movs	r2, #255	; 0xff
 8008648:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800864c:	e028      	b.n	80086a0 <UART_Start_Receive_IT+0xa4>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	2b00      	cmp	r3, #0
 8008654:	d10d      	bne.n	8008672 <UART_Start_Receive_IT+0x76>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	691b      	ldr	r3, [r3, #16]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d104      	bne.n	8008668 <UART_Start_Receive_IT+0x6c>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	22ff      	movs	r2, #255	; 0xff
 8008662:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008666:	e01b      	b.n	80086a0 <UART_Start_Receive_IT+0xa4>
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	227f      	movs	r2, #127	; 0x7f
 800866c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008670:	e016      	b.n	80086a0 <UART_Start_Receive_IT+0xa4>
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800867a:	d10d      	bne.n	8008698 <UART_Start_Receive_IT+0x9c>
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	691b      	ldr	r3, [r3, #16]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d104      	bne.n	800868e <UART_Start_Receive_IT+0x92>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	227f      	movs	r2, #127	; 0x7f
 8008688:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800868c:	e008      	b.n	80086a0 <UART_Start_Receive_IT+0xa4>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	223f      	movs	r2, #63	; 0x3f
 8008692:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008696:	e003      	b.n	80086a0 <UART_Start_Receive_IT+0xa4>
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	2200      	movs	r2, #0
 800869c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	2200      	movs	r2, #0
 80086a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2222      	movs	r2, #34	; 0x22
 80086ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	3308      	adds	r3, #8
 80086b6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80086c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80086c2:	f043 0301 	orr.w	r3, r3, #1
 80086c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	3308      	adds	r3, #8
 80086d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80086d4:	673a      	str	r2, [r7, #112]	; 0x70
 80086d6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80086da:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80086dc:	e841 2300 	strex	r3, r2, [r1]
 80086e0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80086e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d1e3      	bne.n	80086b0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086f0:	d153      	bne.n	800879a <UART_Start_Receive_IT+0x19e>
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80086f8:	88fa      	ldrh	r2, [r7, #6]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d34d      	bcc.n	800879a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	689b      	ldr	r3, [r3, #8]
 8008702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008706:	d107      	bne.n	8008718 <UART_Start_Receive_IT+0x11c>
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d103      	bne.n	8008718 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	4a4b      	ldr	r2, [pc, #300]	; (8008840 <UART_Start_Receive_IT+0x244>)
 8008714:	671a      	str	r2, [r3, #112]	; 0x70
 8008716:	e002      	b.n	800871e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	4a4a      	ldr	r2, [pc, #296]	; (8008844 <UART_Start_Receive_IT+0x248>)
 800871c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2200      	movs	r2, #0
 8008722:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d01a      	beq.n	8008764 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008736:	e853 3f00 	ldrex	r3, [r3]
 800873a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800873c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800873e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008742:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	461a      	mov	r2, r3
 800874c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008752:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008756:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800875e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e4      	bne.n	800872e <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	3308      	adds	r3, #8
 800876a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800876e:	e853 3f00 	ldrex	r3, [r3]
 8008772:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800877a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	3308      	adds	r3, #8
 8008782:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008784:	64ba      	str	r2, [r7, #72]	; 0x48
 8008786:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008788:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800878a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800878c:	e841 2300 	strex	r3, r2, [r1]
 8008790:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008792:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1e5      	bne.n	8008764 <UART_Start_Receive_IT+0x168>
 8008798:	e04a      	b.n	8008830 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087a2:	d107      	bne.n	80087b4 <UART_Start_Receive_IT+0x1b8>
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	691b      	ldr	r3, [r3, #16]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d103      	bne.n	80087b4 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	4a26      	ldr	r2, [pc, #152]	; (8008848 <UART_Start_Receive_IT+0x24c>)
 80087b0:	671a      	str	r2, [r3, #112]	; 0x70
 80087b2:	e002      	b.n	80087ba <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	4a25      	ldr	r2, [pc, #148]	; (800884c <UART_Start_Receive_IT+0x250>)
 80087b8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	691b      	ldr	r3, [r3, #16]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d019      	beq.n	80087fe <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	e853 3f00 	ldrex	r3, [r3]
 80087d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80087d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087da:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80087de:	677b      	str	r3, [r7, #116]	; 0x74
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	461a      	mov	r2, r3
 80087e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80087e8:	637b      	str	r3, [r7, #52]	; 0x34
 80087ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80087ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80087f0:	e841 2300 	strex	r3, r2, [r1]
 80087f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80087f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d1e6      	bne.n	80087ca <UART_Start_Receive_IT+0x1ce>
 80087fc:	e018      	b.n	8008830 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	e853 3f00 	ldrex	r3, [r3]
 800880a:	613b      	str	r3, [r7, #16]
   return(result);
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	f043 0320 	orr.w	r3, r3, #32
 8008812:	67bb      	str	r3, [r7, #120]	; 0x78
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	461a      	mov	r2, r3
 800881a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800881c:	623b      	str	r3, [r7, #32]
 800881e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008820:	69f9      	ldr	r1, [r7, #28]
 8008822:	6a3a      	ldr	r2, [r7, #32]
 8008824:	e841 2300 	strex	r3, r2, [r1]
 8008828:	61bb      	str	r3, [r7, #24]
   return(result);
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1e6      	bne.n	80087fe <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008830:	2300      	movs	r3, #0
}
 8008832:	4618      	mov	r0, r3
 8008834:	378c      	adds	r7, #140	; 0x8c
 8008836:	46bd      	mov	sp, r7
 8008838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	08008f59 	.word	0x08008f59
 8008844:	08008c61 	.word	0x08008c61
 8008848:	08008aff 	.word	0x08008aff
 800884c:	0800899f 	.word	0x0800899f

08008850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008850:	b480      	push	{r7}
 8008852:	b095      	sub	sp, #84	; 0x54
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008860:	e853 3f00 	ldrex	r3, [r3]
 8008864:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008868:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800886c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	461a      	mov	r2, r3
 8008874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008876:	643b      	str	r3, [r7, #64]	; 0x40
 8008878:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800887a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800887c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800887e:	e841 2300 	strex	r3, r2, [r1]
 8008882:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1e6      	bne.n	8008858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008892:	6a3b      	ldr	r3, [r7, #32]
 8008894:	e853 3f00 	ldrex	r3, [r3]
 8008898:	61fb      	str	r3, [r7, #28]
   return(result);
 800889a:	69fb      	ldr	r3, [r7, #28]
 800889c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088a0:	f023 0301 	bic.w	r3, r3, #1
 80088a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3308      	adds	r3, #8
 80088ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80088b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80088b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e3      	bne.n	800888a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d118      	bne.n	80088fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	e853 3f00 	ldrex	r3, [r3]
 80088d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	f023 0310 	bic.w	r3, r3, #16
 80088de:	647b      	str	r3, [r7, #68]	; 0x44
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	461a      	mov	r2, r3
 80088e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80088e8:	61bb      	str	r3, [r7, #24]
 80088ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088ec:	6979      	ldr	r1, [r7, #20]
 80088ee:	69ba      	ldr	r2, [r7, #24]
 80088f0:	e841 2300 	strex	r3, r2, [r1]
 80088f4:	613b      	str	r3, [r7, #16]
   return(result);
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d1e6      	bne.n	80088ca <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2220      	movs	r2, #32
 8008900:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2200      	movs	r2, #0
 8008908:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2200      	movs	r2, #0
 800890e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008910:	bf00      	nop
 8008912:	3754      	adds	r7, #84	; 0x54
 8008914:	46bd      	mov	sp, r7
 8008916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891a:	4770      	bx	lr

0800891c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008928:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	2200      	movs	r2, #0
 800892e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	2200      	movs	r2, #0
 8008936:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff f996 	bl	8007c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008940:	bf00      	nop
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	e853 3f00 	ldrex	r3, [r3]
 800895c:	60bb      	str	r3, [r7, #8]
   return(result);
 800895e:	68bb      	ldr	r3, [r7, #8]
 8008960:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008964:	61fb      	str	r3, [r7, #28]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	461a      	mov	r2, r3
 800896c:	69fb      	ldr	r3, [r7, #28]
 800896e:	61bb      	str	r3, [r7, #24]
 8008970:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008972:	6979      	ldr	r1, [r7, #20]
 8008974:	69ba      	ldr	r2, [r7, #24]
 8008976:	e841 2300 	strex	r3, r2, [r1]
 800897a:	613b      	str	r3, [r7, #16]
   return(result);
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1e6      	bne.n	8008950 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2220      	movs	r2, #32
 8008986:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f7ff f961 	bl	8007c58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008996:	bf00      	nop
 8008998:	3720      	adds	r7, #32
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}

0800899e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800899e:	b580      	push	{r7, lr}
 80089a0:	b096      	sub	sp, #88	; 0x58
 80089a2:	af00      	add	r7, sp, #0
 80089a4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80089ac:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089b6:	2b22      	cmp	r3, #34	; 0x22
 80089b8:	f040 8095 	bne.w	8008ae6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089c2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80089c6:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80089ca:	b2d9      	uxtb	r1, r3
 80089cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80089d0:	b2da      	uxtb	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089d6:	400a      	ands	r2, r1
 80089d8:	b2d2      	uxtb	r2, r2
 80089da:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80089e0:	1c5a      	adds	r2, r3, #1
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	3b01      	subs	r3, #1
 80089f0:	b29a      	uxth	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089fe:	b29b      	uxth	r3, r3
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d178      	bne.n	8008af6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a18:	653b      	str	r3, [r7, #80]	; 0x50
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a22:	647b      	str	r3, [r7, #68]	; 0x44
 8008a24:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a2a:	e841 2300 	strex	r3, r2, [r1]
 8008a2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1e6      	bne.n	8008a04 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	623b      	str	r3, [r7, #32]
   return(result);
 8008a46:	6a3b      	ldr	r3, [r7, #32]
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3308      	adds	r3, #8
 8008a54:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a56:	633a      	str	r2, [r7, #48]	; 0x30
 8008a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e5      	bne.n	8008a36 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d12e      	bne.n	8008ade <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2200      	movs	r2, #0
 8008a84:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	e853 3f00 	ldrex	r3, [r3]
 8008a92:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f023 0310 	bic.w	r3, r3, #16
 8008a9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	461a      	mov	r2, r3
 8008aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008aa4:	61fb      	str	r3, [r7, #28]
 8008aa6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa8:	69b9      	ldr	r1, [r7, #24]
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	e841 2300 	strex	r3, r2, [r1]
 8008ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d1e6      	bne.n	8008a86 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	69db      	ldr	r3, [r3, #28]
 8008abe:	f003 0310 	and.w	r3, r3, #16
 8008ac2:	2b10      	cmp	r3, #16
 8008ac4:	d103      	bne.n	8008ace <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2210      	movs	r2, #16
 8008acc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008ad4:	4619      	mov	r1, r3
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f7ff f8d2 	bl	8007c80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008adc:	e00b      	b.n	8008af6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	f7f9 f9b8 	bl	8001e54 <HAL_UART_RxCpltCallback>
}
 8008ae4:	e007      	b.n	8008af6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	699a      	ldr	r2, [r3, #24]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f042 0208 	orr.w	r2, r2, #8
 8008af4:	619a      	str	r2, [r3, #24]
}
 8008af6:	bf00      	nop
 8008af8:	3758      	adds	r7, #88	; 0x58
 8008afa:	46bd      	mov	sp, r7
 8008afc:	bd80      	pop	{r7, pc}

08008afe <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b096      	sub	sp, #88	; 0x58
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b0c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b16:	2b22      	cmp	r3, #34	; 0x22
 8008b18:	f040 8095 	bne.w	8008c46 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b22:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b2a:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008b2c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008b30:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b34:	4013      	ands	r3, r2
 8008b36:	b29a      	uxth	r2, r3
 8008b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b3a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b40:	1c9a      	adds	r2, r3, #2
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b4c:	b29b      	uxth	r3, r3
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	b29a      	uxth	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b5e:	b29b      	uxth	r3, r3
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d178      	bne.n	8008c56 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6c:	e853 3f00 	ldrex	r3, [r3]
 8008b70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	461a      	mov	r2, r3
 8008b80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b82:	643b      	str	r3, [r7, #64]	; 0x40
 8008b84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b8a:	e841 2300 	strex	r3, r2, [r1]
 8008b8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d1e6      	bne.n	8008b64 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3308      	adds	r3, #8
 8008b9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6a3b      	ldr	r3, [r7, #32]
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ba6:	69fb      	ldr	r3, [r7, #28]
 8008ba8:	f023 0301 	bic.w	r3, r3, #1
 8008bac:	64bb      	str	r3, [r7, #72]	; 0x48
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	3308      	adds	r3, #8
 8008bb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008bb8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e5      	bne.n	8008b96 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	d12e      	bne.n	8008c3e <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	e853 3f00 	ldrex	r3, [r3]
 8008bf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	f023 0310 	bic.w	r3, r3, #16
 8008bfa:	647b      	str	r3, [r7, #68]	; 0x44
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	461a      	mov	r2, r3
 8008c02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c04:	61bb      	str	r3, [r7, #24]
 8008c06:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c08:	6979      	ldr	r1, [r7, #20]
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	e841 2300 	strex	r3, r2, [r1]
 8008c10:	613b      	str	r3, [r7, #16]
   return(result);
 8008c12:	693b      	ldr	r3, [r7, #16]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d1e6      	bne.n	8008be6 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	69db      	ldr	r3, [r3, #28]
 8008c1e:	f003 0310 	and.w	r3, r3, #16
 8008c22:	2b10      	cmp	r3, #16
 8008c24:	d103      	bne.n	8008c2e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2210      	movs	r2, #16
 8008c2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c34:	4619      	mov	r1, r3
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f7ff f822 	bl	8007c80 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c3c:	e00b      	b.n	8008c56 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f7f9 f908 	bl	8001e54 <HAL_UART_RxCpltCallback>
}
 8008c44:	e007      	b.n	8008c56 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	699a      	ldr	r2, [r3, #24]
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0208 	orr.w	r2, r2, #8
 8008c54:	619a      	str	r2, [r3, #24]
}
 8008c56:	bf00      	nop
 8008c58:	3758      	adds	r7, #88	; 0x58
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
	...

08008c60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b0a6      	sub	sp, #152	; 0x98
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c6e:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	69db      	ldr	r3, [r3, #28]
 8008c78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	689b      	ldr	r3, [r3, #8]
 8008c8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c96:	2b22      	cmp	r3, #34	; 0x22
 8008c98:	f040 814f 	bne.w	8008f3a <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ca2:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008ca6:	e0f6      	b.n	8008e96 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cae:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cb2:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008cb6:	b2d9      	uxtb	r1, r3
 8008cb8:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008cbc:	b2da      	uxtb	r2, r3
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc2:	400a      	ands	r2, r1
 8008cc4:	b2d2      	uxtb	r2, r2
 8008cc6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	3b01      	subs	r3, #1
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008cee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d053      	beq.n	8008da2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008cfa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d011      	beq.n	8008d2a <UART_RxISR_8BIT_FIFOEN+0xca>
 8008d06:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008d0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d00b      	beq.n	8008d2a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	2201      	movs	r2, #1
 8008d18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d20:	f043 0201 	orr.w	r2, r3, #1
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d2e:	f003 0302 	and.w	r3, r3, #2
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d011      	beq.n	8008d5a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008d36:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d3a:	f003 0301 	and.w	r3, r3, #1
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d00b      	beq.n	8008d5a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	2202      	movs	r2, #2
 8008d48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d50:	f043 0204 	orr.w	r2, r3, #4
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008d5e:	f003 0304 	and.w	r3, r3, #4
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d011      	beq.n	8008d8a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008d66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d6a:	f003 0301 	and.w	r3, r3, #1
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00b      	beq.n	8008d8a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	2204      	movs	r2, #4
 8008d78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d80:	f043 0202 	orr.w	r2, r3, #2
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d006      	beq.n	8008da2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7fe ff69 	bl	8007c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008da8:	b29b      	uxth	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d173      	bne.n	8008e96 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008db6:	e853 3f00 	ldrex	r3, [r3]
 8008dba:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008dbe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008dc2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	461a      	mov	r2, r3
 8008dcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008dd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8008dd2:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd4:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008dd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008dd8:	e841 2300 	strex	r3, r2, [r1]
 8008ddc:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008dde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d1e4      	bne.n	8008dae <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	3308      	adds	r3, #8
 8008dea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	f023 0301 	bic.w	r3, r3, #1
 8008dfe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	3308      	adds	r3, #8
 8008e06:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008e08:	657a      	str	r2, [r7, #84]	; 0x54
 8008e0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e0c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008e0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008e10:	e841 2300 	strex	r3, r2, [r1]
 8008e14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008e16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d1e3      	bne.n	8008de4 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2220      	movs	r2, #32
 8008e20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d12e      	bne.n	8008e90 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2200      	movs	r2, #0
 8008e36:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e40:	e853 3f00 	ldrex	r3, [r3]
 8008e44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e48:	f023 0310 	bic.w	r3, r3, #16
 8008e4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008e56:	643b      	str	r3, [r7, #64]	; 0x40
 8008e58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008e5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008e5e:	e841 2300 	strex	r3, r2, [r1]
 8008e62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d1e6      	bne.n	8008e38 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	f003 0310 	and.w	r3, r3, #16
 8008e74:	2b10      	cmp	r3, #16
 8008e76:	d103      	bne.n	8008e80 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2210      	movs	r2, #16
 8008e7e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e86:	4619      	mov	r1, r3
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f7fe fef9 	bl	8007c80 <HAL_UARTEx_RxEventCallback>
 8008e8e:	e002      	b.n	8008e96 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f7f8 ffdf 	bl	8001e54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e96:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d006      	beq.n	8008eac <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008e9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ea2:	f003 0320 	and.w	r3, r3, #32
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	f47f aefe 	bne.w	8008ca8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008eb2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008eb6:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d045      	beq.n	8008f4a <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008ec4:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8008ec8:	429a      	cmp	r2, r3
 8008eca:	d23e      	bcs.n	8008f4a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ed4:	6a3b      	ldr	r3, [r7, #32]
 8008ed6:	e853 3f00 	ldrex	r3, [r3]
 8008eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ee2:	673b      	str	r3, [r7, #112]	; 0x70
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	3308      	adds	r3, #8
 8008eea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008eec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008eee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ef2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ef4:	e841 2300 	strex	r3, r2, [r1]
 8008ef8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d1e5      	bne.n	8008ecc <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a14      	ldr	r2, [pc, #80]	; (8008f54 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8008f04:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	e853 3f00 	ldrex	r3, [r3]
 8008f12:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f14:	68bb      	ldr	r3, [r7, #8]
 8008f16:	f043 0320 	orr.w	r3, r3, #32
 8008f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	461a      	mov	r2, r3
 8008f22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f24:	61bb      	str	r3, [r7, #24]
 8008f26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f28:	6979      	ldr	r1, [r7, #20]
 8008f2a:	69ba      	ldr	r2, [r7, #24]
 8008f2c:	e841 2300 	strex	r3, r2, [r1]
 8008f30:	613b      	str	r3, [r7, #16]
   return(result);
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e6      	bne.n	8008f06 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f38:	e007      	b.n	8008f4a <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	699a      	ldr	r2, [r3, #24]
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	f042 0208 	orr.w	r2, r2, #8
 8008f48:	619a      	str	r2, [r3, #24]
}
 8008f4a:	bf00      	nop
 8008f4c:	3798      	adds	r7, #152	; 0x98
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	0800899f 	.word	0x0800899f

08008f58 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b0a8      	sub	sp, #160	; 0xa0
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008f66:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	69db      	ldr	r3, [r3, #28]
 8008f70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f8e:	2b22      	cmp	r3, #34	; 0x22
 8008f90:	f040 8153 	bne.w	800923a <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008f9a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008f9e:	e0fa      	b.n	8009196 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008fb2:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8008fb6:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8008fba:	4013      	ands	r3, r2
 8008fbc:	b29a      	uxth	r2, r3
 8008fbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fc2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc8:	1c9a      	adds	r2, r3, #2
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008fd4:	b29b      	uxth	r3, r3
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	b29a      	uxth	r2, r3
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	69db      	ldr	r3, [r3, #28]
 8008fe6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008fea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008fee:	f003 0307 	and.w	r3, r3, #7
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d053      	beq.n	800909e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ff6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ffa:	f003 0301 	and.w	r3, r3, #1
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d011      	beq.n	8009026 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009002:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00b      	beq.n	8009026 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	2201      	movs	r2, #1
 8009014:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800901c:	f043 0201 	orr.w	r2, r3, #1
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009026:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d011      	beq.n	8009056 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009032:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009036:	f003 0301 	and.w	r3, r3, #1
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00b      	beq.n	8009056 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	2202      	movs	r2, #2
 8009044:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800904c:	f043 0204 	orr.w	r2, r3, #4
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009056:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800905a:	f003 0304 	and.w	r3, r3, #4
 800905e:	2b00      	cmp	r3, #0
 8009060:	d011      	beq.n	8009086 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009062:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8009066:	f003 0301 	and.w	r3, r3, #1
 800906a:	2b00      	cmp	r3, #0
 800906c:	d00b      	beq.n	8009086 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	2204      	movs	r2, #4
 8009074:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800907c:	f043 0202 	orr.w	r2, r3, #2
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800908c:	2b00      	cmp	r3, #0
 800908e:	d006      	beq.n	800909e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f7fe fdeb 	bl	8007c6c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	2200      	movs	r2, #0
 800909a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80090a4:	b29b      	uxth	r3, r3
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d175      	bne.n	8009196 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80090b2:	e853 3f00 	ldrex	r3, [r3]
 80090b6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80090b8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80090ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80090be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	461a      	mov	r2, r3
 80090c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80090cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80090ce:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80090d2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80090da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e4      	bne.n	80090aa <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	3308      	adds	r3, #8
 80090e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090f6:	f023 0301 	bic.w	r3, r3, #1
 80090fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	3308      	adds	r3, #8
 8009104:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009108:	65ba      	str	r2, [r7, #88]	; 0x58
 800910a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800910c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800910e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009110:	e841 2300 	strex	r3, r2, [r1]
 8009114:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009118:	2b00      	cmp	r3, #0
 800911a:	d1e1      	bne.n	80090e0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2220      	movs	r2, #32
 8009120:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	2200      	movs	r2, #0
 8009128:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800912e:	2b01      	cmp	r3, #1
 8009130:	d12e      	bne.n	8009190 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2200      	movs	r2, #0
 8009136:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800913e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009140:	e853 3f00 	ldrex	r3, [r3]
 8009144:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009146:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009148:	f023 0310 	bic.w	r3, r3, #16
 800914c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	461a      	mov	r2, r3
 8009154:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009156:	647b      	str	r3, [r7, #68]	; 0x44
 8009158:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800915c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800915e:	e841 2300 	strex	r3, r2, [r1]
 8009162:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009166:	2b00      	cmp	r3, #0
 8009168:	d1e6      	bne.n	8009138 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	69db      	ldr	r3, [r3, #28]
 8009170:	f003 0310 	and.w	r3, r3, #16
 8009174:	2b10      	cmp	r3, #16
 8009176:	d103      	bne.n	8009180 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	2210      	movs	r2, #16
 800917e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009186:	4619      	mov	r1, r3
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f7fe fd79 	bl	8007c80 <HAL_UARTEx_RxEventCallback>
 800918e:	e002      	b.n	8009196 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f7f8 fe5f 	bl	8001e54 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009196:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800919a:	2b00      	cmp	r3, #0
 800919c:	d006      	beq.n	80091ac <UART_RxISR_16BIT_FIFOEN+0x254>
 800919e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091a2:	f003 0320 	and.w	r3, r3, #32
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	f47f aefa 	bne.w	8008fa0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80091b2:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80091b6:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d045      	beq.n	800924a <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80091c4:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d23e      	bcs.n	800924a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	3308      	adds	r3, #8
 80091d2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	623b      	str	r3, [r7, #32]
   return(result);
 80091dc:	6a3b      	ldr	r3, [r7, #32]
 80091de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80091e2:	677b      	str	r3, [r7, #116]	; 0x74
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	3308      	adds	r3, #8
 80091ea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80091ec:	633a      	str	r2, [r7, #48]	; 0x30
 80091ee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80091f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80091fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e5      	bne.n	80091cc <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a14      	ldr	r2, [pc, #80]	; (8009254 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009204:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	e853 3f00 	ldrex	r3, [r3]
 8009212:	60fb      	str	r3, [r7, #12]
   return(result);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f043 0320 	orr.w	r3, r3, #32
 800921a:	673b      	str	r3, [r7, #112]	; 0x70
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	461a      	mov	r2, r3
 8009222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009224:	61fb      	str	r3, [r7, #28]
 8009226:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009228:	69b9      	ldr	r1, [r7, #24]
 800922a:	69fa      	ldr	r2, [r7, #28]
 800922c:	e841 2300 	strex	r3, r2, [r1]
 8009230:	617b      	str	r3, [r7, #20]
   return(result);
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1e6      	bne.n	8009206 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009238:	e007      	b.n	800924a <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	699a      	ldr	r2, [r3, #24]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f042 0208 	orr.w	r2, r2, #8
 8009248:	619a      	str	r2, [r3, #24]
}
 800924a:	bf00      	nop
 800924c:	37a0      	adds	r7, #160	; 0xa0
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	08008aff 	.word	0x08008aff

08009258 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009258:	b480      	push	{r7}
 800925a:	b083      	sub	sp, #12
 800925c:	af00      	add	r7, sp, #0
 800925e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009260:	bf00      	nop
 8009262:	370c      	adds	r7, #12
 8009264:	46bd      	mov	sp, r7
 8009266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926a:	4770      	bx	lr

0800926c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800926c:	b480      	push	{r7}
 800926e:	b083      	sub	sp, #12
 8009270:	af00      	add	r7, sp, #0
 8009272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009274:	bf00      	nop
 8009276:	370c      	adds	r7, #12
 8009278:	46bd      	mov	sp, r7
 800927a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800927e:	4770      	bx	lr

08009280 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009280:	b480      	push	{r7}
 8009282:	b083      	sub	sp, #12
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009288:	bf00      	nop
 800928a:	370c      	adds	r7, #12
 800928c:	46bd      	mov	sp, r7
 800928e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009292:	4770      	bx	lr

08009294 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009294:	b480      	push	{r7}
 8009296:	b085      	sub	sp, #20
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d101      	bne.n	80092aa <HAL_UARTEx_DisableFifoMode+0x16>
 80092a6:	2302      	movs	r3, #2
 80092a8:	e027      	b.n	80092fa <HAL_UARTEx_DisableFifoMode+0x66>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2224      	movs	r2, #36	; 0x24
 80092b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f022 0201 	bic.w	r2, r2, #1
 80092d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80092d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2200      	movs	r2, #0
 80092de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009316:	2b01      	cmp	r3, #1
 8009318:	d101      	bne.n	800931e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800931a:	2302      	movs	r3, #2
 800931c:	e02d      	b.n	800937a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2201      	movs	r2, #1
 8009322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2224      	movs	r2, #36	; 0x24
 800932a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f022 0201 	bic.w	r2, r2, #1
 8009344:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	689b      	ldr	r3, [r3, #8]
 800934c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	683a      	ldr	r2, [r7, #0]
 8009356:	430a      	orrs	r2, r1
 8009358:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f000 f850 	bl	8009400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2220      	movs	r2, #32
 800936c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009378:	2300      	movs	r3, #0
}
 800937a:	4618      	mov	r0, r3
 800937c:	3710      	adds	r7, #16
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}

08009382 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009382:	b580      	push	{r7, lr}
 8009384:	b084      	sub	sp, #16
 8009386:	af00      	add	r7, sp, #0
 8009388:	6078      	str	r0, [r7, #4]
 800938a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009392:	2b01      	cmp	r3, #1
 8009394:	d101      	bne.n	800939a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009396:	2302      	movs	r3, #2
 8009398:	e02d      	b.n	80093f6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2201      	movs	r2, #1
 800939e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2224      	movs	r2, #36	; 0x24
 80093a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	681a      	ldr	r2, [r3, #0]
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f022 0201 	bic.w	r2, r2, #1
 80093c0:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	689b      	ldr	r3, [r3, #8]
 80093c8:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	683a      	ldr	r2, [r7, #0]
 80093d2:	430a      	orrs	r2, r1
 80093d4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80093d6:	6878      	ldr	r0, [r7, #4]
 80093d8:	f000 f812 	bl	8009400 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2220      	movs	r2, #32
 80093e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80093f4:	2300      	movs	r3, #0
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
	...

08009400 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b085      	sub	sp, #20
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800940c:	2b00      	cmp	r3, #0
 800940e:	d108      	bne.n	8009422 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2201      	movs	r2, #1
 8009414:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2201      	movs	r2, #1
 800941c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009420:	e031      	b.n	8009486 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009422:	2308      	movs	r3, #8
 8009424:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009426:	2308      	movs	r3, #8
 8009428:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	0e5b      	lsrs	r3, r3, #25
 8009432:	b2db      	uxtb	r3, r3
 8009434:	f003 0307 	and.w	r3, r3, #7
 8009438:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	689b      	ldr	r3, [r3, #8]
 8009440:	0f5b      	lsrs	r3, r3, #29
 8009442:	b2db      	uxtb	r3, r3
 8009444:	f003 0307 	and.w	r3, r3, #7
 8009448:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800944a:	7bbb      	ldrb	r3, [r7, #14]
 800944c:	7b3a      	ldrb	r2, [r7, #12]
 800944e:	4911      	ldr	r1, [pc, #68]	; (8009494 <UARTEx_SetNbDataToProcess+0x94>)
 8009450:	5c8a      	ldrb	r2, [r1, r2]
 8009452:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009456:	7b3a      	ldrb	r2, [r7, #12]
 8009458:	490f      	ldr	r1, [pc, #60]	; (8009498 <UARTEx_SetNbDataToProcess+0x98>)
 800945a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800945c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009460:	b29a      	uxth	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009468:	7bfb      	ldrb	r3, [r7, #15]
 800946a:	7b7a      	ldrb	r2, [r7, #13]
 800946c:	4909      	ldr	r1, [pc, #36]	; (8009494 <UARTEx_SetNbDataToProcess+0x94>)
 800946e:	5c8a      	ldrb	r2, [r1, r2]
 8009470:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009474:	7b7a      	ldrb	r2, [r7, #13]
 8009476:	4908      	ldr	r1, [pc, #32]	; (8009498 <UARTEx_SetNbDataToProcess+0x98>)
 8009478:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800947a:	fb93 f3f2 	sdiv	r3, r3, r2
 800947e:	b29a      	uxth	r2, r3
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009486:	bf00      	nop
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	0800aec4 	.word	0x0800aec4
 8009498:	0800aecc 	.word	0x0800aecc

0800949c <atoi>:
 800949c:	220a      	movs	r2, #10
 800949e:	2100      	movs	r1, #0
 80094a0:	f000 b95c 	b.w	800975c <strtol>

080094a4 <__errno>:
 80094a4:	4b01      	ldr	r3, [pc, #4]	; (80094ac <__errno+0x8>)
 80094a6:	6818      	ldr	r0, [r3, #0]
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop
 80094ac:	2000000c 	.word	0x2000000c

080094b0 <__libc_init_array>:
 80094b0:	b570      	push	{r4, r5, r6, lr}
 80094b2:	4d0d      	ldr	r5, [pc, #52]	; (80094e8 <__libc_init_array+0x38>)
 80094b4:	4c0d      	ldr	r4, [pc, #52]	; (80094ec <__libc_init_array+0x3c>)
 80094b6:	1b64      	subs	r4, r4, r5
 80094b8:	10a4      	asrs	r4, r4, #2
 80094ba:	2600      	movs	r6, #0
 80094bc:	42a6      	cmp	r6, r4
 80094be:	d109      	bne.n	80094d4 <__libc_init_array+0x24>
 80094c0:	4d0b      	ldr	r5, [pc, #44]	; (80094f0 <__libc_init_array+0x40>)
 80094c2:	4c0c      	ldr	r4, [pc, #48]	; (80094f4 <__libc_init_array+0x44>)
 80094c4:	f001 fb0a 	bl	800aadc <_init>
 80094c8:	1b64      	subs	r4, r4, r5
 80094ca:	10a4      	asrs	r4, r4, #2
 80094cc:	2600      	movs	r6, #0
 80094ce:	42a6      	cmp	r6, r4
 80094d0:	d105      	bne.n	80094de <__libc_init_array+0x2e>
 80094d2:	bd70      	pop	{r4, r5, r6, pc}
 80094d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094d8:	4798      	blx	r3
 80094da:	3601      	adds	r6, #1
 80094dc:	e7ee      	b.n	80094bc <__libc_init_array+0xc>
 80094de:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e2:	4798      	blx	r3
 80094e4:	3601      	adds	r6, #1
 80094e6:	e7f2      	b.n	80094ce <__libc_init_array+0x1e>
 80094e8:	0800b128 	.word	0x0800b128
 80094ec:	0800b128 	.word	0x0800b128
 80094f0:	0800b128 	.word	0x0800b128
 80094f4:	0800b12c 	.word	0x0800b12c

080094f8 <memset>:
 80094f8:	4402      	add	r2, r0
 80094fa:	4603      	mov	r3, r0
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d100      	bne.n	8009502 <memset+0xa>
 8009500:	4770      	bx	lr
 8009502:	f803 1b01 	strb.w	r1, [r3], #1
 8009506:	e7f9      	b.n	80094fc <memset+0x4>

08009508 <iprintf>:
 8009508:	b40f      	push	{r0, r1, r2, r3}
 800950a:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <iprintf+0x2c>)
 800950c:	b513      	push	{r0, r1, r4, lr}
 800950e:	681c      	ldr	r4, [r3, #0]
 8009510:	b124      	cbz	r4, 800951c <iprintf+0x14>
 8009512:	69a3      	ldr	r3, [r4, #24]
 8009514:	b913      	cbnz	r3, 800951c <iprintf+0x14>
 8009516:	4620      	mov	r0, r4
 8009518:	f000 f9a0 	bl	800985c <__sinit>
 800951c:	ab05      	add	r3, sp, #20
 800951e:	9a04      	ldr	r2, [sp, #16]
 8009520:	68a1      	ldr	r1, [r4, #8]
 8009522:	9301      	str	r3, [sp, #4]
 8009524:	4620      	mov	r0, r4
 8009526:	f000 fcb9 	bl	8009e9c <_vfiprintf_r>
 800952a:	b002      	add	sp, #8
 800952c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009530:	b004      	add	sp, #16
 8009532:	4770      	bx	lr
 8009534:	2000000c 	.word	0x2000000c

08009538 <sniprintf>:
 8009538:	b40c      	push	{r2, r3}
 800953a:	b530      	push	{r4, r5, lr}
 800953c:	4b17      	ldr	r3, [pc, #92]	; (800959c <sniprintf+0x64>)
 800953e:	1e0c      	subs	r4, r1, #0
 8009540:	681d      	ldr	r5, [r3, #0]
 8009542:	b09d      	sub	sp, #116	; 0x74
 8009544:	da08      	bge.n	8009558 <sniprintf+0x20>
 8009546:	238b      	movs	r3, #139	; 0x8b
 8009548:	602b      	str	r3, [r5, #0]
 800954a:	f04f 30ff 	mov.w	r0, #4294967295
 800954e:	b01d      	add	sp, #116	; 0x74
 8009550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009554:	b002      	add	sp, #8
 8009556:	4770      	bx	lr
 8009558:	f44f 7302 	mov.w	r3, #520	; 0x208
 800955c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009560:	bf14      	ite	ne
 8009562:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009566:	4623      	moveq	r3, r4
 8009568:	9304      	str	r3, [sp, #16]
 800956a:	9307      	str	r3, [sp, #28]
 800956c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009570:	9002      	str	r0, [sp, #8]
 8009572:	9006      	str	r0, [sp, #24]
 8009574:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009578:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800957a:	ab21      	add	r3, sp, #132	; 0x84
 800957c:	a902      	add	r1, sp, #8
 800957e:	4628      	mov	r0, r5
 8009580:	9301      	str	r3, [sp, #4]
 8009582:	f000 fb61 	bl	8009c48 <_svfiprintf_r>
 8009586:	1c43      	adds	r3, r0, #1
 8009588:	bfbc      	itt	lt
 800958a:	238b      	movlt	r3, #139	; 0x8b
 800958c:	602b      	strlt	r3, [r5, #0]
 800958e:	2c00      	cmp	r4, #0
 8009590:	d0dd      	beq.n	800954e <sniprintf+0x16>
 8009592:	9b02      	ldr	r3, [sp, #8]
 8009594:	2200      	movs	r2, #0
 8009596:	701a      	strb	r2, [r3, #0]
 8009598:	e7d9      	b.n	800954e <sniprintf+0x16>
 800959a:	bf00      	nop
 800959c:	2000000c 	.word	0x2000000c

080095a0 <strtok>:
 80095a0:	4b16      	ldr	r3, [pc, #88]	; (80095fc <strtok+0x5c>)
 80095a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80095a4:	681e      	ldr	r6, [r3, #0]
 80095a6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80095a8:	4605      	mov	r5, r0
 80095aa:	b9fc      	cbnz	r4, 80095ec <strtok+0x4c>
 80095ac:	2050      	movs	r0, #80	; 0x50
 80095ae:	9101      	str	r1, [sp, #4]
 80095b0:	f000 fa06 	bl	80099c0 <malloc>
 80095b4:	9901      	ldr	r1, [sp, #4]
 80095b6:	65b0      	str	r0, [r6, #88]	; 0x58
 80095b8:	4602      	mov	r2, r0
 80095ba:	b920      	cbnz	r0, 80095c6 <strtok+0x26>
 80095bc:	4b10      	ldr	r3, [pc, #64]	; (8009600 <strtok+0x60>)
 80095be:	4811      	ldr	r0, [pc, #68]	; (8009604 <strtok+0x64>)
 80095c0:	2157      	movs	r1, #87	; 0x57
 80095c2:	f000 f8d5 	bl	8009770 <__assert_func>
 80095c6:	e9c0 4400 	strd	r4, r4, [r0]
 80095ca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80095ce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80095d2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80095d6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80095da:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80095de:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80095e2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80095e6:	6184      	str	r4, [r0, #24]
 80095e8:	7704      	strb	r4, [r0, #28]
 80095ea:	6244      	str	r4, [r0, #36]	; 0x24
 80095ec:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80095ee:	2301      	movs	r3, #1
 80095f0:	4628      	mov	r0, r5
 80095f2:	b002      	add	sp, #8
 80095f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80095f8:	f000 b806 	b.w	8009608 <__strtok_r>
 80095fc:	2000000c 	.word	0x2000000c
 8009600:	0800aed8 	.word	0x0800aed8
 8009604:	0800aeef 	.word	0x0800aeef

08009608 <__strtok_r>:
 8009608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800960a:	b908      	cbnz	r0, 8009610 <__strtok_r+0x8>
 800960c:	6810      	ldr	r0, [r2, #0]
 800960e:	b188      	cbz	r0, 8009634 <__strtok_r+0x2c>
 8009610:	4604      	mov	r4, r0
 8009612:	4620      	mov	r0, r4
 8009614:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009618:	460f      	mov	r7, r1
 800961a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800961e:	b91e      	cbnz	r6, 8009628 <__strtok_r+0x20>
 8009620:	b965      	cbnz	r5, 800963c <__strtok_r+0x34>
 8009622:	6015      	str	r5, [r2, #0]
 8009624:	4628      	mov	r0, r5
 8009626:	e005      	b.n	8009634 <__strtok_r+0x2c>
 8009628:	42b5      	cmp	r5, r6
 800962a:	d1f6      	bne.n	800961a <__strtok_r+0x12>
 800962c:	2b00      	cmp	r3, #0
 800962e:	d1f0      	bne.n	8009612 <__strtok_r+0xa>
 8009630:	6014      	str	r4, [r2, #0]
 8009632:	7003      	strb	r3, [r0, #0]
 8009634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009636:	461c      	mov	r4, r3
 8009638:	e00c      	b.n	8009654 <__strtok_r+0x4c>
 800963a:	b915      	cbnz	r5, 8009642 <__strtok_r+0x3a>
 800963c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009640:	460e      	mov	r6, r1
 8009642:	f816 5b01 	ldrb.w	r5, [r6], #1
 8009646:	42ab      	cmp	r3, r5
 8009648:	d1f7      	bne.n	800963a <__strtok_r+0x32>
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0f3      	beq.n	8009636 <__strtok_r+0x2e>
 800964e:	2300      	movs	r3, #0
 8009650:	f804 3c01 	strb.w	r3, [r4, #-1]
 8009654:	6014      	str	r4, [r2, #0]
 8009656:	e7ed      	b.n	8009634 <__strtok_r+0x2c>

08009658 <_strtol_l.constprop.0>:
 8009658:	2b01      	cmp	r3, #1
 800965a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800965e:	d001      	beq.n	8009664 <_strtol_l.constprop.0+0xc>
 8009660:	2b24      	cmp	r3, #36	; 0x24
 8009662:	d906      	bls.n	8009672 <_strtol_l.constprop.0+0x1a>
 8009664:	f7ff ff1e 	bl	80094a4 <__errno>
 8009668:	2316      	movs	r3, #22
 800966a:	6003      	str	r3, [r0, #0]
 800966c:	2000      	movs	r0, #0
 800966e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009672:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009758 <_strtol_l.constprop.0+0x100>
 8009676:	460d      	mov	r5, r1
 8009678:	462e      	mov	r6, r5
 800967a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800967e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009682:	f017 0708 	ands.w	r7, r7, #8
 8009686:	d1f7      	bne.n	8009678 <_strtol_l.constprop.0+0x20>
 8009688:	2c2d      	cmp	r4, #45	; 0x2d
 800968a:	d132      	bne.n	80096f2 <_strtol_l.constprop.0+0x9a>
 800968c:	782c      	ldrb	r4, [r5, #0]
 800968e:	2701      	movs	r7, #1
 8009690:	1cb5      	adds	r5, r6, #2
 8009692:	2b00      	cmp	r3, #0
 8009694:	d05b      	beq.n	800974e <_strtol_l.constprop.0+0xf6>
 8009696:	2b10      	cmp	r3, #16
 8009698:	d109      	bne.n	80096ae <_strtol_l.constprop.0+0x56>
 800969a:	2c30      	cmp	r4, #48	; 0x30
 800969c:	d107      	bne.n	80096ae <_strtol_l.constprop.0+0x56>
 800969e:	782c      	ldrb	r4, [r5, #0]
 80096a0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80096a4:	2c58      	cmp	r4, #88	; 0x58
 80096a6:	d14d      	bne.n	8009744 <_strtol_l.constprop.0+0xec>
 80096a8:	786c      	ldrb	r4, [r5, #1]
 80096aa:	2310      	movs	r3, #16
 80096ac:	3502      	adds	r5, #2
 80096ae:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80096b2:	f108 38ff 	add.w	r8, r8, #4294967295
 80096b6:	f04f 0c00 	mov.w	ip, #0
 80096ba:	fbb8 f9f3 	udiv	r9, r8, r3
 80096be:	4666      	mov	r6, ip
 80096c0:	fb03 8a19 	mls	sl, r3, r9, r8
 80096c4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80096c8:	f1be 0f09 	cmp.w	lr, #9
 80096cc:	d816      	bhi.n	80096fc <_strtol_l.constprop.0+0xa4>
 80096ce:	4674      	mov	r4, lr
 80096d0:	42a3      	cmp	r3, r4
 80096d2:	dd24      	ble.n	800971e <_strtol_l.constprop.0+0xc6>
 80096d4:	f1bc 0f00 	cmp.w	ip, #0
 80096d8:	db1e      	blt.n	8009718 <_strtol_l.constprop.0+0xc0>
 80096da:	45b1      	cmp	r9, r6
 80096dc:	d31c      	bcc.n	8009718 <_strtol_l.constprop.0+0xc0>
 80096de:	d101      	bne.n	80096e4 <_strtol_l.constprop.0+0x8c>
 80096e0:	45a2      	cmp	sl, r4
 80096e2:	db19      	blt.n	8009718 <_strtol_l.constprop.0+0xc0>
 80096e4:	fb06 4603 	mla	r6, r6, r3, r4
 80096e8:	f04f 0c01 	mov.w	ip, #1
 80096ec:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096f0:	e7e8      	b.n	80096c4 <_strtol_l.constprop.0+0x6c>
 80096f2:	2c2b      	cmp	r4, #43	; 0x2b
 80096f4:	bf04      	itt	eq
 80096f6:	782c      	ldrbeq	r4, [r5, #0]
 80096f8:	1cb5      	addeq	r5, r6, #2
 80096fa:	e7ca      	b.n	8009692 <_strtol_l.constprop.0+0x3a>
 80096fc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009700:	f1be 0f19 	cmp.w	lr, #25
 8009704:	d801      	bhi.n	800970a <_strtol_l.constprop.0+0xb2>
 8009706:	3c37      	subs	r4, #55	; 0x37
 8009708:	e7e2      	b.n	80096d0 <_strtol_l.constprop.0+0x78>
 800970a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800970e:	f1be 0f19 	cmp.w	lr, #25
 8009712:	d804      	bhi.n	800971e <_strtol_l.constprop.0+0xc6>
 8009714:	3c57      	subs	r4, #87	; 0x57
 8009716:	e7db      	b.n	80096d0 <_strtol_l.constprop.0+0x78>
 8009718:	f04f 3cff 	mov.w	ip, #4294967295
 800971c:	e7e6      	b.n	80096ec <_strtol_l.constprop.0+0x94>
 800971e:	f1bc 0f00 	cmp.w	ip, #0
 8009722:	da05      	bge.n	8009730 <_strtol_l.constprop.0+0xd8>
 8009724:	2322      	movs	r3, #34	; 0x22
 8009726:	6003      	str	r3, [r0, #0]
 8009728:	4646      	mov	r6, r8
 800972a:	b942      	cbnz	r2, 800973e <_strtol_l.constprop.0+0xe6>
 800972c:	4630      	mov	r0, r6
 800972e:	e79e      	b.n	800966e <_strtol_l.constprop.0+0x16>
 8009730:	b107      	cbz	r7, 8009734 <_strtol_l.constprop.0+0xdc>
 8009732:	4276      	negs	r6, r6
 8009734:	2a00      	cmp	r2, #0
 8009736:	d0f9      	beq.n	800972c <_strtol_l.constprop.0+0xd4>
 8009738:	f1bc 0f00 	cmp.w	ip, #0
 800973c:	d000      	beq.n	8009740 <_strtol_l.constprop.0+0xe8>
 800973e:	1e69      	subs	r1, r5, #1
 8009740:	6011      	str	r1, [r2, #0]
 8009742:	e7f3      	b.n	800972c <_strtol_l.constprop.0+0xd4>
 8009744:	2430      	movs	r4, #48	; 0x30
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1b1      	bne.n	80096ae <_strtol_l.constprop.0+0x56>
 800974a:	2308      	movs	r3, #8
 800974c:	e7af      	b.n	80096ae <_strtol_l.constprop.0+0x56>
 800974e:	2c30      	cmp	r4, #48	; 0x30
 8009750:	d0a5      	beq.n	800969e <_strtol_l.constprop.0+0x46>
 8009752:	230a      	movs	r3, #10
 8009754:	e7ab      	b.n	80096ae <_strtol_l.constprop.0+0x56>
 8009756:	bf00      	nop
 8009758:	0800af89 	.word	0x0800af89

0800975c <strtol>:
 800975c:	4613      	mov	r3, r2
 800975e:	460a      	mov	r2, r1
 8009760:	4601      	mov	r1, r0
 8009762:	4802      	ldr	r0, [pc, #8]	; (800976c <strtol+0x10>)
 8009764:	6800      	ldr	r0, [r0, #0]
 8009766:	f7ff bf77 	b.w	8009658 <_strtol_l.constprop.0>
 800976a:	bf00      	nop
 800976c:	2000000c 	.word	0x2000000c

08009770 <__assert_func>:
 8009770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009772:	4614      	mov	r4, r2
 8009774:	461a      	mov	r2, r3
 8009776:	4b09      	ldr	r3, [pc, #36]	; (800979c <__assert_func+0x2c>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	4605      	mov	r5, r0
 800977c:	68d8      	ldr	r0, [r3, #12]
 800977e:	b14c      	cbz	r4, 8009794 <__assert_func+0x24>
 8009780:	4b07      	ldr	r3, [pc, #28]	; (80097a0 <__assert_func+0x30>)
 8009782:	9100      	str	r1, [sp, #0]
 8009784:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009788:	4906      	ldr	r1, [pc, #24]	; (80097a4 <__assert_func+0x34>)
 800978a:	462b      	mov	r3, r5
 800978c:	f000 f8e4 	bl	8009958 <fiprintf>
 8009790:	f000 ff6e 	bl	800a670 <abort>
 8009794:	4b04      	ldr	r3, [pc, #16]	; (80097a8 <__assert_func+0x38>)
 8009796:	461c      	mov	r4, r3
 8009798:	e7f3      	b.n	8009782 <__assert_func+0x12>
 800979a:	bf00      	nop
 800979c:	2000000c 	.word	0x2000000c
 80097a0:	0800af4c 	.word	0x0800af4c
 80097a4:	0800af59 	.word	0x0800af59
 80097a8:	0800af87 	.word	0x0800af87

080097ac <std>:
 80097ac:	2300      	movs	r3, #0
 80097ae:	b510      	push	{r4, lr}
 80097b0:	4604      	mov	r4, r0
 80097b2:	e9c0 3300 	strd	r3, r3, [r0]
 80097b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097ba:	6083      	str	r3, [r0, #8]
 80097bc:	8181      	strh	r1, [r0, #12]
 80097be:	6643      	str	r3, [r0, #100]	; 0x64
 80097c0:	81c2      	strh	r2, [r0, #14]
 80097c2:	6183      	str	r3, [r0, #24]
 80097c4:	4619      	mov	r1, r3
 80097c6:	2208      	movs	r2, #8
 80097c8:	305c      	adds	r0, #92	; 0x5c
 80097ca:	f7ff fe95 	bl	80094f8 <memset>
 80097ce:	4b05      	ldr	r3, [pc, #20]	; (80097e4 <std+0x38>)
 80097d0:	6263      	str	r3, [r4, #36]	; 0x24
 80097d2:	4b05      	ldr	r3, [pc, #20]	; (80097e8 <std+0x3c>)
 80097d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80097d6:	4b05      	ldr	r3, [pc, #20]	; (80097ec <std+0x40>)
 80097d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80097da:	4b05      	ldr	r3, [pc, #20]	; (80097f0 <std+0x44>)
 80097dc:	6224      	str	r4, [r4, #32]
 80097de:	6323      	str	r3, [r4, #48]	; 0x30
 80097e0:	bd10      	pop	{r4, pc}
 80097e2:	bf00      	nop
 80097e4:	0800a445 	.word	0x0800a445
 80097e8:	0800a467 	.word	0x0800a467
 80097ec:	0800a49f 	.word	0x0800a49f
 80097f0:	0800a4c3 	.word	0x0800a4c3

080097f4 <_cleanup_r>:
 80097f4:	4901      	ldr	r1, [pc, #4]	; (80097fc <_cleanup_r+0x8>)
 80097f6:	f000 b8c1 	b.w	800997c <_fwalk_reent>
 80097fa:	bf00      	nop
 80097fc:	0800a7ad 	.word	0x0800a7ad

08009800 <__sfmoreglue>:
 8009800:	b570      	push	{r4, r5, r6, lr}
 8009802:	2268      	movs	r2, #104	; 0x68
 8009804:	1e4d      	subs	r5, r1, #1
 8009806:	4355      	muls	r5, r2
 8009808:	460e      	mov	r6, r1
 800980a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800980e:	f000 f94b 	bl	8009aa8 <_malloc_r>
 8009812:	4604      	mov	r4, r0
 8009814:	b140      	cbz	r0, 8009828 <__sfmoreglue+0x28>
 8009816:	2100      	movs	r1, #0
 8009818:	e9c0 1600 	strd	r1, r6, [r0]
 800981c:	300c      	adds	r0, #12
 800981e:	60a0      	str	r0, [r4, #8]
 8009820:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009824:	f7ff fe68 	bl	80094f8 <memset>
 8009828:	4620      	mov	r0, r4
 800982a:	bd70      	pop	{r4, r5, r6, pc}

0800982c <__sfp_lock_acquire>:
 800982c:	4801      	ldr	r0, [pc, #4]	; (8009834 <__sfp_lock_acquire+0x8>)
 800982e:	f000 b8c5 	b.w	80099bc <__retarget_lock_acquire_recursive>
 8009832:	bf00      	nop
 8009834:	2000045d 	.word	0x2000045d

08009838 <__sfp_lock_release>:
 8009838:	4801      	ldr	r0, [pc, #4]	; (8009840 <__sfp_lock_release+0x8>)
 800983a:	f000 b8c0 	b.w	80099be <__retarget_lock_release_recursive>
 800983e:	bf00      	nop
 8009840:	2000045d 	.word	0x2000045d

08009844 <__sinit_lock_acquire>:
 8009844:	4801      	ldr	r0, [pc, #4]	; (800984c <__sinit_lock_acquire+0x8>)
 8009846:	f000 b8b9 	b.w	80099bc <__retarget_lock_acquire_recursive>
 800984a:	bf00      	nop
 800984c:	2000045e 	.word	0x2000045e

08009850 <__sinit_lock_release>:
 8009850:	4801      	ldr	r0, [pc, #4]	; (8009858 <__sinit_lock_release+0x8>)
 8009852:	f000 b8b4 	b.w	80099be <__retarget_lock_release_recursive>
 8009856:	bf00      	nop
 8009858:	2000045e 	.word	0x2000045e

0800985c <__sinit>:
 800985c:	b510      	push	{r4, lr}
 800985e:	4604      	mov	r4, r0
 8009860:	f7ff fff0 	bl	8009844 <__sinit_lock_acquire>
 8009864:	69a3      	ldr	r3, [r4, #24]
 8009866:	b11b      	cbz	r3, 8009870 <__sinit+0x14>
 8009868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800986c:	f7ff bff0 	b.w	8009850 <__sinit_lock_release>
 8009870:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009874:	6523      	str	r3, [r4, #80]	; 0x50
 8009876:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <__sinit+0x68>)
 8009878:	4a13      	ldr	r2, [pc, #76]	; (80098c8 <__sinit+0x6c>)
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	62a2      	str	r2, [r4, #40]	; 0x28
 800987e:	42a3      	cmp	r3, r4
 8009880:	bf04      	itt	eq
 8009882:	2301      	moveq	r3, #1
 8009884:	61a3      	streq	r3, [r4, #24]
 8009886:	4620      	mov	r0, r4
 8009888:	f000 f820 	bl	80098cc <__sfp>
 800988c:	6060      	str	r0, [r4, #4]
 800988e:	4620      	mov	r0, r4
 8009890:	f000 f81c 	bl	80098cc <__sfp>
 8009894:	60a0      	str	r0, [r4, #8]
 8009896:	4620      	mov	r0, r4
 8009898:	f000 f818 	bl	80098cc <__sfp>
 800989c:	2200      	movs	r2, #0
 800989e:	60e0      	str	r0, [r4, #12]
 80098a0:	2104      	movs	r1, #4
 80098a2:	6860      	ldr	r0, [r4, #4]
 80098a4:	f7ff ff82 	bl	80097ac <std>
 80098a8:	68a0      	ldr	r0, [r4, #8]
 80098aa:	2201      	movs	r2, #1
 80098ac:	2109      	movs	r1, #9
 80098ae:	f7ff ff7d 	bl	80097ac <std>
 80098b2:	68e0      	ldr	r0, [r4, #12]
 80098b4:	2202      	movs	r2, #2
 80098b6:	2112      	movs	r1, #18
 80098b8:	f7ff ff78 	bl	80097ac <std>
 80098bc:	2301      	movs	r3, #1
 80098be:	61a3      	str	r3, [r4, #24]
 80098c0:	e7d2      	b.n	8009868 <__sinit+0xc>
 80098c2:	bf00      	nop
 80098c4:	0800aed4 	.word	0x0800aed4
 80098c8:	080097f5 	.word	0x080097f5

080098cc <__sfp>:
 80098cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ce:	4607      	mov	r7, r0
 80098d0:	f7ff ffac 	bl	800982c <__sfp_lock_acquire>
 80098d4:	4b1e      	ldr	r3, [pc, #120]	; (8009950 <__sfp+0x84>)
 80098d6:	681e      	ldr	r6, [r3, #0]
 80098d8:	69b3      	ldr	r3, [r6, #24]
 80098da:	b913      	cbnz	r3, 80098e2 <__sfp+0x16>
 80098dc:	4630      	mov	r0, r6
 80098de:	f7ff ffbd 	bl	800985c <__sinit>
 80098e2:	3648      	adds	r6, #72	; 0x48
 80098e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80098e8:	3b01      	subs	r3, #1
 80098ea:	d503      	bpl.n	80098f4 <__sfp+0x28>
 80098ec:	6833      	ldr	r3, [r6, #0]
 80098ee:	b30b      	cbz	r3, 8009934 <__sfp+0x68>
 80098f0:	6836      	ldr	r6, [r6, #0]
 80098f2:	e7f7      	b.n	80098e4 <__sfp+0x18>
 80098f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80098f8:	b9d5      	cbnz	r5, 8009930 <__sfp+0x64>
 80098fa:	4b16      	ldr	r3, [pc, #88]	; (8009954 <__sfp+0x88>)
 80098fc:	60e3      	str	r3, [r4, #12]
 80098fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009902:	6665      	str	r5, [r4, #100]	; 0x64
 8009904:	f000 f859 	bl	80099ba <__retarget_lock_init_recursive>
 8009908:	f7ff ff96 	bl	8009838 <__sfp_lock_release>
 800990c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009910:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009914:	6025      	str	r5, [r4, #0]
 8009916:	61a5      	str	r5, [r4, #24]
 8009918:	2208      	movs	r2, #8
 800991a:	4629      	mov	r1, r5
 800991c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009920:	f7ff fdea 	bl	80094f8 <memset>
 8009924:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009928:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800992c:	4620      	mov	r0, r4
 800992e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009930:	3468      	adds	r4, #104	; 0x68
 8009932:	e7d9      	b.n	80098e8 <__sfp+0x1c>
 8009934:	2104      	movs	r1, #4
 8009936:	4638      	mov	r0, r7
 8009938:	f7ff ff62 	bl	8009800 <__sfmoreglue>
 800993c:	4604      	mov	r4, r0
 800993e:	6030      	str	r0, [r6, #0]
 8009940:	2800      	cmp	r0, #0
 8009942:	d1d5      	bne.n	80098f0 <__sfp+0x24>
 8009944:	f7ff ff78 	bl	8009838 <__sfp_lock_release>
 8009948:	230c      	movs	r3, #12
 800994a:	603b      	str	r3, [r7, #0]
 800994c:	e7ee      	b.n	800992c <__sfp+0x60>
 800994e:	bf00      	nop
 8009950:	0800aed4 	.word	0x0800aed4
 8009954:	ffff0001 	.word	0xffff0001

08009958 <fiprintf>:
 8009958:	b40e      	push	{r1, r2, r3}
 800995a:	b503      	push	{r0, r1, lr}
 800995c:	4601      	mov	r1, r0
 800995e:	ab03      	add	r3, sp, #12
 8009960:	4805      	ldr	r0, [pc, #20]	; (8009978 <fiprintf+0x20>)
 8009962:	f853 2b04 	ldr.w	r2, [r3], #4
 8009966:	6800      	ldr	r0, [r0, #0]
 8009968:	9301      	str	r3, [sp, #4]
 800996a:	f000 fa97 	bl	8009e9c <_vfiprintf_r>
 800996e:	b002      	add	sp, #8
 8009970:	f85d eb04 	ldr.w	lr, [sp], #4
 8009974:	b003      	add	sp, #12
 8009976:	4770      	bx	lr
 8009978:	2000000c 	.word	0x2000000c

0800997c <_fwalk_reent>:
 800997c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009980:	4606      	mov	r6, r0
 8009982:	4688      	mov	r8, r1
 8009984:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009988:	2700      	movs	r7, #0
 800998a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800998e:	f1b9 0901 	subs.w	r9, r9, #1
 8009992:	d505      	bpl.n	80099a0 <_fwalk_reent+0x24>
 8009994:	6824      	ldr	r4, [r4, #0]
 8009996:	2c00      	cmp	r4, #0
 8009998:	d1f7      	bne.n	800998a <_fwalk_reent+0xe>
 800999a:	4638      	mov	r0, r7
 800999c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099a0:	89ab      	ldrh	r3, [r5, #12]
 80099a2:	2b01      	cmp	r3, #1
 80099a4:	d907      	bls.n	80099b6 <_fwalk_reent+0x3a>
 80099a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099aa:	3301      	adds	r3, #1
 80099ac:	d003      	beq.n	80099b6 <_fwalk_reent+0x3a>
 80099ae:	4629      	mov	r1, r5
 80099b0:	4630      	mov	r0, r6
 80099b2:	47c0      	blx	r8
 80099b4:	4307      	orrs	r7, r0
 80099b6:	3568      	adds	r5, #104	; 0x68
 80099b8:	e7e9      	b.n	800998e <_fwalk_reent+0x12>

080099ba <__retarget_lock_init_recursive>:
 80099ba:	4770      	bx	lr

080099bc <__retarget_lock_acquire_recursive>:
 80099bc:	4770      	bx	lr

080099be <__retarget_lock_release_recursive>:
 80099be:	4770      	bx	lr

080099c0 <malloc>:
 80099c0:	4b02      	ldr	r3, [pc, #8]	; (80099cc <malloc+0xc>)
 80099c2:	4601      	mov	r1, r0
 80099c4:	6818      	ldr	r0, [r3, #0]
 80099c6:	f000 b86f 	b.w	8009aa8 <_malloc_r>
 80099ca:	bf00      	nop
 80099cc:	2000000c 	.word	0x2000000c

080099d0 <_free_r>:
 80099d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80099d2:	2900      	cmp	r1, #0
 80099d4:	d044      	beq.n	8009a60 <_free_r+0x90>
 80099d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099da:	9001      	str	r0, [sp, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	f1a1 0404 	sub.w	r4, r1, #4
 80099e2:	bfb8      	it	lt
 80099e4:	18e4      	addlt	r4, r4, r3
 80099e6:	f000 ffbd 	bl	800a964 <__malloc_lock>
 80099ea:	4a1e      	ldr	r2, [pc, #120]	; (8009a64 <_free_r+0x94>)
 80099ec:	9801      	ldr	r0, [sp, #4]
 80099ee:	6813      	ldr	r3, [r2, #0]
 80099f0:	b933      	cbnz	r3, 8009a00 <_free_r+0x30>
 80099f2:	6063      	str	r3, [r4, #4]
 80099f4:	6014      	str	r4, [r2, #0]
 80099f6:	b003      	add	sp, #12
 80099f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099fc:	f000 bfb8 	b.w	800a970 <__malloc_unlock>
 8009a00:	42a3      	cmp	r3, r4
 8009a02:	d908      	bls.n	8009a16 <_free_r+0x46>
 8009a04:	6825      	ldr	r5, [r4, #0]
 8009a06:	1961      	adds	r1, r4, r5
 8009a08:	428b      	cmp	r3, r1
 8009a0a:	bf01      	itttt	eq
 8009a0c:	6819      	ldreq	r1, [r3, #0]
 8009a0e:	685b      	ldreq	r3, [r3, #4]
 8009a10:	1949      	addeq	r1, r1, r5
 8009a12:	6021      	streq	r1, [r4, #0]
 8009a14:	e7ed      	b.n	80099f2 <_free_r+0x22>
 8009a16:	461a      	mov	r2, r3
 8009a18:	685b      	ldr	r3, [r3, #4]
 8009a1a:	b10b      	cbz	r3, 8009a20 <_free_r+0x50>
 8009a1c:	42a3      	cmp	r3, r4
 8009a1e:	d9fa      	bls.n	8009a16 <_free_r+0x46>
 8009a20:	6811      	ldr	r1, [r2, #0]
 8009a22:	1855      	adds	r5, r2, r1
 8009a24:	42a5      	cmp	r5, r4
 8009a26:	d10b      	bne.n	8009a40 <_free_r+0x70>
 8009a28:	6824      	ldr	r4, [r4, #0]
 8009a2a:	4421      	add	r1, r4
 8009a2c:	1854      	adds	r4, r2, r1
 8009a2e:	42a3      	cmp	r3, r4
 8009a30:	6011      	str	r1, [r2, #0]
 8009a32:	d1e0      	bne.n	80099f6 <_free_r+0x26>
 8009a34:	681c      	ldr	r4, [r3, #0]
 8009a36:	685b      	ldr	r3, [r3, #4]
 8009a38:	6053      	str	r3, [r2, #4]
 8009a3a:	4421      	add	r1, r4
 8009a3c:	6011      	str	r1, [r2, #0]
 8009a3e:	e7da      	b.n	80099f6 <_free_r+0x26>
 8009a40:	d902      	bls.n	8009a48 <_free_r+0x78>
 8009a42:	230c      	movs	r3, #12
 8009a44:	6003      	str	r3, [r0, #0]
 8009a46:	e7d6      	b.n	80099f6 <_free_r+0x26>
 8009a48:	6825      	ldr	r5, [r4, #0]
 8009a4a:	1961      	adds	r1, r4, r5
 8009a4c:	428b      	cmp	r3, r1
 8009a4e:	bf04      	itt	eq
 8009a50:	6819      	ldreq	r1, [r3, #0]
 8009a52:	685b      	ldreq	r3, [r3, #4]
 8009a54:	6063      	str	r3, [r4, #4]
 8009a56:	bf04      	itt	eq
 8009a58:	1949      	addeq	r1, r1, r5
 8009a5a:	6021      	streq	r1, [r4, #0]
 8009a5c:	6054      	str	r4, [r2, #4]
 8009a5e:	e7ca      	b.n	80099f6 <_free_r+0x26>
 8009a60:	b003      	add	sp, #12
 8009a62:	bd30      	pop	{r4, r5, pc}
 8009a64:	20000460 	.word	0x20000460

08009a68 <sbrk_aligned>:
 8009a68:	b570      	push	{r4, r5, r6, lr}
 8009a6a:	4e0e      	ldr	r6, [pc, #56]	; (8009aa4 <sbrk_aligned+0x3c>)
 8009a6c:	460c      	mov	r4, r1
 8009a6e:	6831      	ldr	r1, [r6, #0]
 8009a70:	4605      	mov	r5, r0
 8009a72:	b911      	cbnz	r1, 8009a7a <sbrk_aligned+0x12>
 8009a74:	f000 fcd6 	bl	800a424 <_sbrk_r>
 8009a78:	6030      	str	r0, [r6, #0]
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	4628      	mov	r0, r5
 8009a7e:	f000 fcd1 	bl	800a424 <_sbrk_r>
 8009a82:	1c43      	adds	r3, r0, #1
 8009a84:	d00a      	beq.n	8009a9c <sbrk_aligned+0x34>
 8009a86:	1cc4      	adds	r4, r0, #3
 8009a88:	f024 0403 	bic.w	r4, r4, #3
 8009a8c:	42a0      	cmp	r0, r4
 8009a8e:	d007      	beq.n	8009aa0 <sbrk_aligned+0x38>
 8009a90:	1a21      	subs	r1, r4, r0
 8009a92:	4628      	mov	r0, r5
 8009a94:	f000 fcc6 	bl	800a424 <_sbrk_r>
 8009a98:	3001      	adds	r0, #1
 8009a9a:	d101      	bne.n	8009aa0 <sbrk_aligned+0x38>
 8009a9c:	f04f 34ff 	mov.w	r4, #4294967295
 8009aa0:	4620      	mov	r0, r4
 8009aa2:	bd70      	pop	{r4, r5, r6, pc}
 8009aa4:	20000464 	.word	0x20000464

08009aa8 <_malloc_r>:
 8009aa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009aac:	1ccd      	adds	r5, r1, #3
 8009aae:	f025 0503 	bic.w	r5, r5, #3
 8009ab2:	3508      	adds	r5, #8
 8009ab4:	2d0c      	cmp	r5, #12
 8009ab6:	bf38      	it	cc
 8009ab8:	250c      	movcc	r5, #12
 8009aba:	2d00      	cmp	r5, #0
 8009abc:	4607      	mov	r7, r0
 8009abe:	db01      	blt.n	8009ac4 <_malloc_r+0x1c>
 8009ac0:	42a9      	cmp	r1, r5
 8009ac2:	d905      	bls.n	8009ad0 <_malloc_r+0x28>
 8009ac4:	230c      	movs	r3, #12
 8009ac6:	603b      	str	r3, [r7, #0]
 8009ac8:	2600      	movs	r6, #0
 8009aca:	4630      	mov	r0, r6
 8009acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ad0:	4e2e      	ldr	r6, [pc, #184]	; (8009b8c <_malloc_r+0xe4>)
 8009ad2:	f000 ff47 	bl	800a964 <__malloc_lock>
 8009ad6:	6833      	ldr	r3, [r6, #0]
 8009ad8:	461c      	mov	r4, r3
 8009ada:	bb34      	cbnz	r4, 8009b2a <_malloc_r+0x82>
 8009adc:	4629      	mov	r1, r5
 8009ade:	4638      	mov	r0, r7
 8009ae0:	f7ff ffc2 	bl	8009a68 <sbrk_aligned>
 8009ae4:	1c43      	adds	r3, r0, #1
 8009ae6:	4604      	mov	r4, r0
 8009ae8:	d14d      	bne.n	8009b86 <_malloc_r+0xde>
 8009aea:	6834      	ldr	r4, [r6, #0]
 8009aec:	4626      	mov	r6, r4
 8009aee:	2e00      	cmp	r6, #0
 8009af0:	d140      	bne.n	8009b74 <_malloc_r+0xcc>
 8009af2:	6823      	ldr	r3, [r4, #0]
 8009af4:	4631      	mov	r1, r6
 8009af6:	4638      	mov	r0, r7
 8009af8:	eb04 0803 	add.w	r8, r4, r3
 8009afc:	f000 fc92 	bl	800a424 <_sbrk_r>
 8009b00:	4580      	cmp	r8, r0
 8009b02:	d13a      	bne.n	8009b7a <_malloc_r+0xd2>
 8009b04:	6821      	ldr	r1, [r4, #0]
 8009b06:	3503      	adds	r5, #3
 8009b08:	1a6d      	subs	r5, r5, r1
 8009b0a:	f025 0503 	bic.w	r5, r5, #3
 8009b0e:	3508      	adds	r5, #8
 8009b10:	2d0c      	cmp	r5, #12
 8009b12:	bf38      	it	cc
 8009b14:	250c      	movcc	r5, #12
 8009b16:	4629      	mov	r1, r5
 8009b18:	4638      	mov	r0, r7
 8009b1a:	f7ff ffa5 	bl	8009a68 <sbrk_aligned>
 8009b1e:	3001      	adds	r0, #1
 8009b20:	d02b      	beq.n	8009b7a <_malloc_r+0xd2>
 8009b22:	6823      	ldr	r3, [r4, #0]
 8009b24:	442b      	add	r3, r5
 8009b26:	6023      	str	r3, [r4, #0]
 8009b28:	e00e      	b.n	8009b48 <_malloc_r+0xa0>
 8009b2a:	6822      	ldr	r2, [r4, #0]
 8009b2c:	1b52      	subs	r2, r2, r5
 8009b2e:	d41e      	bmi.n	8009b6e <_malloc_r+0xc6>
 8009b30:	2a0b      	cmp	r2, #11
 8009b32:	d916      	bls.n	8009b62 <_malloc_r+0xba>
 8009b34:	1961      	adds	r1, r4, r5
 8009b36:	42a3      	cmp	r3, r4
 8009b38:	6025      	str	r5, [r4, #0]
 8009b3a:	bf18      	it	ne
 8009b3c:	6059      	strne	r1, [r3, #4]
 8009b3e:	6863      	ldr	r3, [r4, #4]
 8009b40:	bf08      	it	eq
 8009b42:	6031      	streq	r1, [r6, #0]
 8009b44:	5162      	str	r2, [r4, r5]
 8009b46:	604b      	str	r3, [r1, #4]
 8009b48:	4638      	mov	r0, r7
 8009b4a:	f104 060b 	add.w	r6, r4, #11
 8009b4e:	f000 ff0f 	bl	800a970 <__malloc_unlock>
 8009b52:	f026 0607 	bic.w	r6, r6, #7
 8009b56:	1d23      	adds	r3, r4, #4
 8009b58:	1af2      	subs	r2, r6, r3
 8009b5a:	d0b6      	beq.n	8009aca <_malloc_r+0x22>
 8009b5c:	1b9b      	subs	r3, r3, r6
 8009b5e:	50a3      	str	r3, [r4, r2]
 8009b60:	e7b3      	b.n	8009aca <_malloc_r+0x22>
 8009b62:	6862      	ldr	r2, [r4, #4]
 8009b64:	42a3      	cmp	r3, r4
 8009b66:	bf0c      	ite	eq
 8009b68:	6032      	streq	r2, [r6, #0]
 8009b6a:	605a      	strne	r2, [r3, #4]
 8009b6c:	e7ec      	b.n	8009b48 <_malloc_r+0xa0>
 8009b6e:	4623      	mov	r3, r4
 8009b70:	6864      	ldr	r4, [r4, #4]
 8009b72:	e7b2      	b.n	8009ada <_malloc_r+0x32>
 8009b74:	4634      	mov	r4, r6
 8009b76:	6876      	ldr	r6, [r6, #4]
 8009b78:	e7b9      	b.n	8009aee <_malloc_r+0x46>
 8009b7a:	230c      	movs	r3, #12
 8009b7c:	603b      	str	r3, [r7, #0]
 8009b7e:	4638      	mov	r0, r7
 8009b80:	f000 fef6 	bl	800a970 <__malloc_unlock>
 8009b84:	e7a1      	b.n	8009aca <_malloc_r+0x22>
 8009b86:	6025      	str	r5, [r4, #0]
 8009b88:	e7de      	b.n	8009b48 <_malloc_r+0xa0>
 8009b8a:	bf00      	nop
 8009b8c:	20000460 	.word	0x20000460

08009b90 <__ssputs_r>:
 8009b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b94:	688e      	ldr	r6, [r1, #8]
 8009b96:	429e      	cmp	r6, r3
 8009b98:	4682      	mov	sl, r0
 8009b9a:	460c      	mov	r4, r1
 8009b9c:	4690      	mov	r8, r2
 8009b9e:	461f      	mov	r7, r3
 8009ba0:	d838      	bhi.n	8009c14 <__ssputs_r+0x84>
 8009ba2:	898a      	ldrh	r2, [r1, #12]
 8009ba4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009ba8:	d032      	beq.n	8009c10 <__ssputs_r+0x80>
 8009baa:	6825      	ldr	r5, [r4, #0]
 8009bac:	6909      	ldr	r1, [r1, #16]
 8009bae:	eba5 0901 	sub.w	r9, r5, r1
 8009bb2:	6965      	ldr	r5, [r4, #20]
 8009bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009bbc:	3301      	adds	r3, #1
 8009bbe:	444b      	add	r3, r9
 8009bc0:	106d      	asrs	r5, r5, #1
 8009bc2:	429d      	cmp	r5, r3
 8009bc4:	bf38      	it	cc
 8009bc6:	461d      	movcc	r5, r3
 8009bc8:	0553      	lsls	r3, r2, #21
 8009bca:	d531      	bpl.n	8009c30 <__ssputs_r+0xa0>
 8009bcc:	4629      	mov	r1, r5
 8009bce:	f7ff ff6b 	bl	8009aa8 <_malloc_r>
 8009bd2:	4606      	mov	r6, r0
 8009bd4:	b950      	cbnz	r0, 8009bec <__ssputs_r+0x5c>
 8009bd6:	230c      	movs	r3, #12
 8009bd8:	f8ca 3000 	str.w	r3, [sl]
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	f04f 30ff 	mov.w	r0, #4294967295
 8009be8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bec:	6921      	ldr	r1, [r4, #16]
 8009bee:	464a      	mov	r2, r9
 8009bf0:	f000 fe90 	bl	800a914 <memcpy>
 8009bf4:	89a3      	ldrh	r3, [r4, #12]
 8009bf6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009bfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bfe:	81a3      	strh	r3, [r4, #12]
 8009c00:	6126      	str	r6, [r4, #16]
 8009c02:	6165      	str	r5, [r4, #20]
 8009c04:	444e      	add	r6, r9
 8009c06:	eba5 0509 	sub.w	r5, r5, r9
 8009c0a:	6026      	str	r6, [r4, #0]
 8009c0c:	60a5      	str	r5, [r4, #8]
 8009c0e:	463e      	mov	r6, r7
 8009c10:	42be      	cmp	r6, r7
 8009c12:	d900      	bls.n	8009c16 <__ssputs_r+0x86>
 8009c14:	463e      	mov	r6, r7
 8009c16:	6820      	ldr	r0, [r4, #0]
 8009c18:	4632      	mov	r2, r6
 8009c1a:	4641      	mov	r1, r8
 8009c1c:	f000 fe88 	bl	800a930 <memmove>
 8009c20:	68a3      	ldr	r3, [r4, #8]
 8009c22:	1b9b      	subs	r3, r3, r6
 8009c24:	60a3      	str	r3, [r4, #8]
 8009c26:	6823      	ldr	r3, [r4, #0]
 8009c28:	4433      	add	r3, r6
 8009c2a:	6023      	str	r3, [r4, #0]
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	e7db      	b.n	8009be8 <__ssputs_r+0x58>
 8009c30:	462a      	mov	r2, r5
 8009c32:	f000 fea3 	bl	800a97c <_realloc_r>
 8009c36:	4606      	mov	r6, r0
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d1e1      	bne.n	8009c00 <__ssputs_r+0x70>
 8009c3c:	6921      	ldr	r1, [r4, #16]
 8009c3e:	4650      	mov	r0, sl
 8009c40:	f7ff fec6 	bl	80099d0 <_free_r>
 8009c44:	e7c7      	b.n	8009bd6 <__ssputs_r+0x46>
	...

08009c48 <_svfiprintf_r>:
 8009c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c4c:	4698      	mov	r8, r3
 8009c4e:	898b      	ldrh	r3, [r1, #12]
 8009c50:	061b      	lsls	r3, r3, #24
 8009c52:	b09d      	sub	sp, #116	; 0x74
 8009c54:	4607      	mov	r7, r0
 8009c56:	460d      	mov	r5, r1
 8009c58:	4614      	mov	r4, r2
 8009c5a:	d50e      	bpl.n	8009c7a <_svfiprintf_r+0x32>
 8009c5c:	690b      	ldr	r3, [r1, #16]
 8009c5e:	b963      	cbnz	r3, 8009c7a <_svfiprintf_r+0x32>
 8009c60:	2140      	movs	r1, #64	; 0x40
 8009c62:	f7ff ff21 	bl	8009aa8 <_malloc_r>
 8009c66:	6028      	str	r0, [r5, #0]
 8009c68:	6128      	str	r0, [r5, #16]
 8009c6a:	b920      	cbnz	r0, 8009c76 <_svfiprintf_r+0x2e>
 8009c6c:	230c      	movs	r3, #12
 8009c6e:	603b      	str	r3, [r7, #0]
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295
 8009c74:	e0d1      	b.n	8009e1a <_svfiprintf_r+0x1d2>
 8009c76:	2340      	movs	r3, #64	; 0x40
 8009c78:	616b      	str	r3, [r5, #20]
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8009c7e:	2320      	movs	r3, #32
 8009c80:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c84:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c88:	2330      	movs	r3, #48	; 0x30
 8009c8a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009e34 <_svfiprintf_r+0x1ec>
 8009c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c92:	f04f 0901 	mov.w	r9, #1
 8009c96:	4623      	mov	r3, r4
 8009c98:	469a      	mov	sl, r3
 8009c9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c9e:	b10a      	cbz	r2, 8009ca4 <_svfiprintf_r+0x5c>
 8009ca0:	2a25      	cmp	r2, #37	; 0x25
 8009ca2:	d1f9      	bne.n	8009c98 <_svfiprintf_r+0x50>
 8009ca4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ca8:	d00b      	beq.n	8009cc2 <_svfiprintf_r+0x7a>
 8009caa:	465b      	mov	r3, fp
 8009cac:	4622      	mov	r2, r4
 8009cae:	4629      	mov	r1, r5
 8009cb0:	4638      	mov	r0, r7
 8009cb2:	f7ff ff6d 	bl	8009b90 <__ssputs_r>
 8009cb6:	3001      	adds	r0, #1
 8009cb8:	f000 80aa 	beq.w	8009e10 <_svfiprintf_r+0x1c8>
 8009cbc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009cbe:	445a      	add	r2, fp
 8009cc0:	9209      	str	r2, [sp, #36]	; 0x24
 8009cc2:	f89a 3000 	ldrb.w	r3, [sl]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	f000 80a2 	beq.w	8009e10 <_svfiprintf_r+0x1c8>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	f04f 32ff 	mov.w	r2, #4294967295
 8009cd2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009cd6:	f10a 0a01 	add.w	sl, sl, #1
 8009cda:	9304      	str	r3, [sp, #16]
 8009cdc:	9307      	str	r3, [sp, #28]
 8009cde:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ce2:	931a      	str	r3, [sp, #104]	; 0x68
 8009ce4:	4654      	mov	r4, sl
 8009ce6:	2205      	movs	r2, #5
 8009ce8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cec:	4851      	ldr	r0, [pc, #324]	; (8009e34 <_svfiprintf_r+0x1ec>)
 8009cee:	f7f6 faa7 	bl	8000240 <memchr>
 8009cf2:	9a04      	ldr	r2, [sp, #16]
 8009cf4:	b9d8      	cbnz	r0, 8009d2e <_svfiprintf_r+0xe6>
 8009cf6:	06d0      	lsls	r0, r2, #27
 8009cf8:	bf44      	itt	mi
 8009cfa:	2320      	movmi	r3, #32
 8009cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d00:	0711      	lsls	r1, r2, #28
 8009d02:	bf44      	itt	mi
 8009d04:	232b      	movmi	r3, #43	; 0x2b
 8009d06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0e:	2b2a      	cmp	r3, #42	; 0x2a
 8009d10:	d015      	beq.n	8009d3e <_svfiprintf_r+0xf6>
 8009d12:	9a07      	ldr	r2, [sp, #28]
 8009d14:	4654      	mov	r4, sl
 8009d16:	2000      	movs	r0, #0
 8009d18:	f04f 0c0a 	mov.w	ip, #10
 8009d1c:	4621      	mov	r1, r4
 8009d1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d22:	3b30      	subs	r3, #48	; 0x30
 8009d24:	2b09      	cmp	r3, #9
 8009d26:	d94e      	bls.n	8009dc6 <_svfiprintf_r+0x17e>
 8009d28:	b1b0      	cbz	r0, 8009d58 <_svfiprintf_r+0x110>
 8009d2a:	9207      	str	r2, [sp, #28]
 8009d2c:	e014      	b.n	8009d58 <_svfiprintf_r+0x110>
 8009d2e:	eba0 0308 	sub.w	r3, r0, r8
 8009d32:	fa09 f303 	lsl.w	r3, r9, r3
 8009d36:	4313      	orrs	r3, r2
 8009d38:	9304      	str	r3, [sp, #16]
 8009d3a:	46a2      	mov	sl, r4
 8009d3c:	e7d2      	b.n	8009ce4 <_svfiprintf_r+0x9c>
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	1d19      	adds	r1, r3, #4
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	9103      	str	r1, [sp, #12]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	bfbb      	ittet	lt
 8009d4a:	425b      	neglt	r3, r3
 8009d4c:	f042 0202 	orrlt.w	r2, r2, #2
 8009d50:	9307      	strge	r3, [sp, #28]
 8009d52:	9307      	strlt	r3, [sp, #28]
 8009d54:	bfb8      	it	lt
 8009d56:	9204      	strlt	r2, [sp, #16]
 8009d58:	7823      	ldrb	r3, [r4, #0]
 8009d5a:	2b2e      	cmp	r3, #46	; 0x2e
 8009d5c:	d10c      	bne.n	8009d78 <_svfiprintf_r+0x130>
 8009d5e:	7863      	ldrb	r3, [r4, #1]
 8009d60:	2b2a      	cmp	r3, #42	; 0x2a
 8009d62:	d135      	bne.n	8009dd0 <_svfiprintf_r+0x188>
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	1d1a      	adds	r2, r3, #4
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	9203      	str	r2, [sp, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	bfb8      	it	lt
 8009d70:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d74:	3402      	adds	r4, #2
 8009d76:	9305      	str	r3, [sp, #20]
 8009d78:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009e44 <_svfiprintf_r+0x1fc>
 8009d7c:	7821      	ldrb	r1, [r4, #0]
 8009d7e:	2203      	movs	r2, #3
 8009d80:	4650      	mov	r0, sl
 8009d82:	f7f6 fa5d 	bl	8000240 <memchr>
 8009d86:	b140      	cbz	r0, 8009d9a <_svfiprintf_r+0x152>
 8009d88:	2340      	movs	r3, #64	; 0x40
 8009d8a:	eba0 000a 	sub.w	r0, r0, sl
 8009d8e:	fa03 f000 	lsl.w	r0, r3, r0
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	4303      	orrs	r3, r0
 8009d96:	3401      	adds	r4, #1
 8009d98:	9304      	str	r3, [sp, #16]
 8009d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d9e:	4826      	ldr	r0, [pc, #152]	; (8009e38 <_svfiprintf_r+0x1f0>)
 8009da0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009da4:	2206      	movs	r2, #6
 8009da6:	f7f6 fa4b 	bl	8000240 <memchr>
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d038      	beq.n	8009e20 <_svfiprintf_r+0x1d8>
 8009dae:	4b23      	ldr	r3, [pc, #140]	; (8009e3c <_svfiprintf_r+0x1f4>)
 8009db0:	bb1b      	cbnz	r3, 8009dfa <_svfiprintf_r+0x1b2>
 8009db2:	9b03      	ldr	r3, [sp, #12]
 8009db4:	3307      	adds	r3, #7
 8009db6:	f023 0307 	bic.w	r3, r3, #7
 8009dba:	3308      	adds	r3, #8
 8009dbc:	9303      	str	r3, [sp, #12]
 8009dbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc0:	4433      	add	r3, r6
 8009dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8009dc4:	e767      	b.n	8009c96 <_svfiprintf_r+0x4e>
 8009dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dca:	460c      	mov	r4, r1
 8009dcc:	2001      	movs	r0, #1
 8009dce:	e7a5      	b.n	8009d1c <_svfiprintf_r+0xd4>
 8009dd0:	2300      	movs	r3, #0
 8009dd2:	3401      	adds	r4, #1
 8009dd4:	9305      	str	r3, [sp, #20]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	f04f 0c0a 	mov.w	ip, #10
 8009ddc:	4620      	mov	r0, r4
 8009dde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009de2:	3a30      	subs	r2, #48	; 0x30
 8009de4:	2a09      	cmp	r2, #9
 8009de6:	d903      	bls.n	8009df0 <_svfiprintf_r+0x1a8>
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d0c5      	beq.n	8009d78 <_svfiprintf_r+0x130>
 8009dec:	9105      	str	r1, [sp, #20]
 8009dee:	e7c3      	b.n	8009d78 <_svfiprintf_r+0x130>
 8009df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8009df4:	4604      	mov	r4, r0
 8009df6:	2301      	movs	r3, #1
 8009df8:	e7f0      	b.n	8009ddc <_svfiprintf_r+0x194>
 8009dfa:	ab03      	add	r3, sp, #12
 8009dfc:	9300      	str	r3, [sp, #0]
 8009dfe:	462a      	mov	r2, r5
 8009e00:	4b0f      	ldr	r3, [pc, #60]	; (8009e40 <_svfiprintf_r+0x1f8>)
 8009e02:	a904      	add	r1, sp, #16
 8009e04:	4638      	mov	r0, r7
 8009e06:	f3af 8000 	nop.w
 8009e0a:	1c42      	adds	r2, r0, #1
 8009e0c:	4606      	mov	r6, r0
 8009e0e:	d1d6      	bne.n	8009dbe <_svfiprintf_r+0x176>
 8009e10:	89ab      	ldrh	r3, [r5, #12]
 8009e12:	065b      	lsls	r3, r3, #25
 8009e14:	f53f af2c 	bmi.w	8009c70 <_svfiprintf_r+0x28>
 8009e18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009e1a:	b01d      	add	sp, #116	; 0x74
 8009e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e20:	ab03      	add	r3, sp, #12
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	462a      	mov	r2, r5
 8009e26:	4b06      	ldr	r3, [pc, #24]	; (8009e40 <_svfiprintf_r+0x1f8>)
 8009e28:	a904      	add	r1, sp, #16
 8009e2a:	4638      	mov	r0, r7
 8009e2c:	f000 f9d4 	bl	800a1d8 <_printf_i>
 8009e30:	e7eb      	b.n	8009e0a <_svfiprintf_r+0x1c2>
 8009e32:	bf00      	nop
 8009e34:	0800b0ec 	.word	0x0800b0ec
 8009e38:	0800b0f6 	.word	0x0800b0f6
 8009e3c:	00000000 	.word	0x00000000
 8009e40:	08009b91 	.word	0x08009b91
 8009e44:	0800b0f2 	.word	0x0800b0f2

08009e48 <__sfputc_r>:
 8009e48:	6893      	ldr	r3, [r2, #8]
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	b410      	push	{r4}
 8009e50:	6093      	str	r3, [r2, #8]
 8009e52:	da08      	bge.n	8009e66 <__sfputc_r+0x1e>
 8009e54:	6994      	ldr	r4, [r2, #24]
 8009e56:	42a3      	cmp	r3, r4
 8009e58:	db01      	blt.n	8009e5e <__sfputc_r+0x16>
 8009e5a:	290a      	cmp	r1, #10
 8009e5c:	d103      	bne.n	8009e66 <__sfputc_r+0x1e>
 8009e5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e62:	f000 bb33 	b.w	800a4cc <__swbuf_r>
 8009e66:	6813      	ldr	r3, [r2, #0]
 8009e68:	1c58      	adds	r0, r3, #1
 8009e6a:	6010      	str	r0, [r2, #0]
 8009e6c:	7019      	strb	r1, [r3, #0]
 8009e6e:	4608      	mov	r0, r1
 8009e70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e74:	4770      	bx	lr

08009e76 <__sfputs_r>:
 8009e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e78:	4606      	mov	r6, r0
 8009e7a:	460f      	mov	r7, r1
 8009e7c:	4614      	mov	r4, r2
 8009e7e:	18d5      	adds	r5, r2, r3
 8009e80:	42ac      	cmp	r4, r5
 8009e82:	d101      	bne.n	8009e88 <__sfputs_r+0x12>
 8009e84:	2000      	movs	r0, #0
 8009e86:	e007      	b.n	8009e98 <__sfputs_r+0x22>
 8009e88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e8c:	463a      	mov	r2, r7
 8009e8e:	4630      	mov	r0, r6
 8009e90:	f7ff ffda 	bl	8009e48 <__sfputc_r>
 8009e94:	1c43      	adds	r3, r0, #1
 8009e96:	d1f3      	bne.n	8009e80 <__sfputs_r+0xa>
 8009e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009e9c <_vfiprintf_r>:
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	460d      	mov	r5, r1
 8009ea2:	b09d      	sub	sp, #116	; 0x74
 8009ea4:	4614      	mov	r4, r2
 8009ea6:	4698      	mov	r8, r3
 8009ea8:	4606      	mov	r6, r0
 8009eaa:	b118      	cbz	r0, 8009eb4 <_vfiprintf_r+0x18>
 8009eac:	6983      	ldr	r3, [r0, #24]
 8009eae:	b90b      	cbnz	r3, 8009eb4 <_vfiprintf_r+0x18>
 8009eb0:	f7ff fcd4 	bl	800985c <__sinit>
 8009eb4:	4b89      	ldr	r3, [pc, #548]	; (800a0dc <_vfiprintf_r+0x240>)
 8009eb6:	429d      	cmp	r5, r3
 8009eb8:	d11b      	bne.n	8009ef2 <_vfiprintf_r+0x56>
 8009eba:	6875      	ldr	r5, [r6, #4]
 8009ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ebe:	07d9      	lsls	r1, r3, #31
 8009ec0:	d405      	bmi.n	8009ece <_vfiprintf_r+0x32>
 8009ec2:	89ab      	ldrh	r3, [r5, #12]
 8009ec4:	059a      	lsls	r2, r3, #22
 8009ec6:	d402      	bmi.n	8009ece <_vfiprintf_r+0x32>
 8009ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009eca:	f7ff fd77 	bl	80099bc <__retarget_lock_acquire_recursive>
 8009ece:	89ab      	ldrh	r3, [r5, #12]
 8009ed0:	071b      	lsls	r3, r3, #28
 8009ed2:	d501      	bpl.n	8009ed8 <_vfiprintf_r+0x3c>
 8009ed4:	692b      	ldr	r3, [r5, #16]
 8009ed6:	b9eb      	cbnz	r3, 8009f14 <_vfiprintf_r+0x78>
 8009ed8:	4629      	mov	r1, r5
 8009eda:	4630      	mov	r0, r6
 8009edc:	f000 fb5a 	bl	800a594 <__swsetup_r>
 8009ee0:	b1c0      	cbz	r0, 8009f14 <_vfiprintf_r+0x78>
 8009ee2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ee4:	07dc      	lsls	r4, r3, #31
 8009ee6:	d50e      	bpl.n	8009f06 <_vfiprintf_r+0x6a>
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eec:	b01d      	add	sp, #116	; 0x74
 8009eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef2:	4b7b      	ldr	r3, [pc, #492]	; (800a0e0 <_vfiprintf_r+0x244>)
 8009ef4:	429d      	cmp	r5, r3
 8009ef6:	d101      	bne.n	8009efc <_vfiprintf_r+0x60>
 8009ef8:	68b5      	ldr	r5, [r6, #8]
 8009efa:	e7df      	b.n	8009ebc <_vfiprintf_r+0x20>
 8009efc:	4b79      	ldr	r3, [pc, #484]	; (800a0e4 <_vfiprintf_r+0x248>)
 8009efe:	429d      	cmp	r5, r3
 8009f00:	bf08      	it	eq
 8009f02:	68f5      	ldreq	r5, [r6, #12]
 8009f04:	e7da      	b.n	8009ebc <_vfiprintf_r+0x20>
 8009f06:	89ab      	ldrh	r3, [r5, #12]
 8009f08:	0598      	lsls	r0, r3, #22
 8009f0a:	d4ed      	bmi.n	8009ee8 <_vfiprintf_r+0x4c>
 8009f0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f0e:	f7ff fd56 	bl	80099be <__retarget_lock_release_recursive>
 8009f12:	e7e9      	b.n	8009ee8 <_vfiprintf_r+0x4c>
 8009f14:	2300      	movs	r3, #0
 8009f16:	9309      	str	r3, [sp, #36]	; 0x24
 8009f18:	2320      	movs	r3, #32
 8009f1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f22:	2330      	movs	r3, #48	; 0x30
 8009f24:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a0e8 <_vfiprintf_r+0x24c>
 8009f28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f2c:	f04f 0901 	mov.w	r9, #1
 8009f30:	4623      	mov	r3, r4
 8009f32:	469a      	mov	sl, r3
 8009f34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f38:	b10a      	cbz	r2, 8009f3e <_vfiprintf_r+0xa2>
 8009f3a:	2a25      	cmp	r2, #37	; 0x25
 8009f3c:	d1f9      	bne.n	8009f32 <_vfiprintf_r+0x96>
 8009f3e:	ebba 0b04 	subs.w	fp, sl, r4
 8009f42:	d00b      	beq.n	8009f5c <_vfiprintf_r+0xc0>
 8009f44:	465b      	mov	r3, fp
 8009f46:	4622      	mov	r2, r4
 8009f48:	4629      	mov	r1, r5
 8009f4a:	4630      	mov	r0, r6
 8009f4c:	f7ff ff93 	bl	8009e76 <__sfputs_r>
 8009f50:	3001      	adds	r0, #1
 8009f52:	f000 80aa 	beq.w	800a0aa <_vfiprintf_r+0x20e>
 8009f56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f58:	445a      	add	r2, fp
 8009f5a:	9209      	str	r2, [sp, #36]	; 0x24
 8009f5c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f000 80a2 	beq.w	800a0aa <_vfiprintf_r+0x20e>
 8009f66:	2300      	movs	r3, #0
 8009f68:	f04f 32ff 	mov.w	r2, #4294967295
 8009f6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f70:	f10a 0a01 	add.w	sl, sl, #1
 8009f74:	9304      	str	r3, [sp, #16]
 8009f76:	9307      	str	r3, [sp, #28]
 8009f78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f7c:	931a      	str	r3, [sp, #104]	; 0x68
 8009f7e:	4654      	mov	r4, sl
 8009f80:	2205      	movs	r2, #5
 8009f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f86:	4858      	ldr	r0, [pc, #352]	; (800a0e8 <_vfiprintf_r+0x24c>)
 8009f88:	f7f6 f95a 	bl	8000240 <memchr>
 8009f8c:	9a04      	ldr	r2, [sp, #16]
 8009f8e:	b9d8      	cbnz	r0, 8009fc8 <_vfiprintf_r+0x12c>
 8009f90:	06d1      	lsls	r1, r2, #27
 8009f92:	bf44      	itt	mi
 8009f94:	2320      	movmi	r3, #32
 8009f96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f9a:	0713      	lsls	r3, r2, #28
 8009f9c:	bf44      	itt	mi
 8009f9e:	232b      	movmi	r3, #43	; 0x2b
 8009fa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fa4:	f89a 3000 	ldrb.w	r3, [sl]
 8009fa8:	2b2a      	cmp	r3, #42	; 0x2a
 8009faa:	d015      	beq.n	8009fd8 <_vfiprintf_r+0x13c>
 8009fac:	9a07      	ldr	r2, [sp, #28]
 8009fae:	4654      	mov	r4, sl
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	f04f 0c0a 	mov.w	ip, #10
 8009fb6:	4621      	mov	r1, r4
 8009fb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fbc:	3b30      	subs	r3, #48	; 0x30
 8009fbe:	2b09      	cmp	r3, #9
 8009fc0:	d94e      	bls.n	800a060 <_vfiprintf_r+0x1c4>
 8009fc2:	b1b0      	cbz	r0, 8009ff2 <_vfiprintf_r+0x156>
 8009fc4:	9207      	str	r2, [sp, #28]
 8009fc6:	e014      	b.n	8009ff2 <_vfiprintf_r+0x156>
 8009fc8:	eba0 0308 	sub.w	r3, r0, r8
 8009fcc:	fa09 f303 	lsl.w	r3, r9, r3
 8009fd0:	4313      	orrs	r3, r2
 8009fd2:	9304      	str	r3, [sp, #16]
 8009fd4:	46a2      	mov	sl, r4
 8009fd6:	e7d2      	b.n	8009f7e <_vfiprintf_r+0xe2>
 8009fd8:	9b03      	ldr	r3, [sp, #12]
 8009fda:	1d19      	adds	r1, r3, #4
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	9103      	str	r1, [sp, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	bfbb      	ittet	lt
 8009fe4:	425b      	neglt	r3, r3
 8009fe6:	f042 0202 	orrlt.w	r2, r2, #2
 8009fea:	9307      	strge	r3, [sp, #28]
 8009fec:	9307      	strlt	r3, [sp, #28]
 8009fee:	bfb8      	it	lt
 8009ff0:	9204      	strlt	r2, [sp, #16]
 8009ff2:	7823      	ldrb	r3, [r4, #0]
 8009ff4:	2b2e      	cmp	r3, #46	; 0x2e
 8009ff6:	d10c      	bne.n	800a012 <_vfiprintf_r+0x176>
 8009ff8:	7863      	ldrb	r3, [r4, #1]
 8009ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8009ffc:	d135      	bne.n	800a06a <_vfiprintf_r+0x1ce>
 8009ffe:	9b03      	ldr	r3, [sp, #12]
 800a000:	1d1a      	adds	r2, r3, #4
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	9203      	str	r2, [sp, #12]
 800a006:	2b00      	cmp	r3, #0
 800a008:	bfb8      	it	lt
 800a00a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a00e:	3402      	adds	r4, #2
 800a010:	9305      	str	r3, [sp, #20]
 800a012:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a0f8 <_vfiprintf_r+0x25c>
 800a016:	7821      	ldrb	r1, [r4, #0]
 800a018:	2203      	movs	r2, #3
 800a01a:	4650      	mov	r0, sl
 800a01c:	f7f6 f910 	bl	8000240 <memchr>
 800a020:	b140      	cbz	r0, 800a034 <_vfiprintf_r+0x198>
 800a022:	2340      	movs	r3, #64	; 0x40
 800a024:	eba0 000a 	sub.w	r0, r0, sl
 800a028:	fa03 f000 	lsl.w	r0, r3, r0
 800a02c:	9b04      	ldr	r3, [sp, #16]
 800a02e:	4303      	orrs	r3, r0
 800a030:	3401      	adds	r4, #1
 800a032:	9304      	str	r3, [sp, #16]
 800a034:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a038:	482c      	ldr	r0, [pc, #176]	; (800a0ec <_vfiprintf_r+0x250>)
 800a03a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a03e:	2206      	movs	r2, #6
 800a040:	f7f6 f8fe 	bl	8000240 <memchr>
 800a044:	2800      	cmp	r0, #0
 800a046:	d03f      	beq.n	800a0c8 <_vfiprintf_r+0x22c>
 800a048:	4b29      	ldr	r3, [pc, #164]	; (800a0f0 <_vfiprintf_r+0x254>)
 800a04a:	bb1b      	cbnz	r3, 800a094 <_vfiprintf_r+0x1f8>
 800a04c:	9b03      	ldr	r3, [sp, #12]
 800a04e:	3307      	adds	r3, #7
 800a050:	f023 0307 	bic.w	r3, r3, #7
 800a054:	3308      	adds	r3, #8
 800a056:	9303      	str	r3, [sp, #12]
 800a058:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a05a:	443b      	add	r3, r7
 800a05c:	9309      	str	r3, [sp, #36]	; 0x24
 800a05e:	e767      	b.n	8009f30 <_vfiprintf_r+0x94>
 800a060:	fb0c 3202 	mla	r2, ip, r2, r3
 800a064:	460c      	mov	r4, r1
 800a066:	2001      	movs	r0, #1
 800a068:	e7a5      	b.n	8009fb6 <_vfiprintf_r+0x11a>
 800a06a:	2300      	movs	r3, #0
 800a06c:	3401      	adds	r4, #1
 800a06e:	9305      	str	r3, [sp, #20]
 800a070:	4619      	mov	r1, r3
 800a072:	f04f 0c0a 	mov.w	ip, #10
 800a076:	4620      	mov	r0, r4
 800a078:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a07c:	3a30      	subs	r2, #48	; 0x30
 800a07e:	2a09      	cmp	r2, #9
 800a080:	d903      	bls.n	800a08a <_vfiprintf_r+0x1ee>
 800a082:	2b00      	cmp	r3, #0
 800a084:	d0c5      	beq.n	800a012 <_vfiprintf_r+0x176>
 800a086:	9105      	str	r1, [sp, #20]
 800a088:	e7c3      	b.n	800a012 <_vfiprintf_r+0x176>
 800a08a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a08e:	4604      	mov	r4, r0
 800a090:	2301      	movs	r3, #1
 800a092:	e7f0      	b.n	800a076 <_vfiprintf_r+0x1da>
 800a094:	ab03      	add	r3, sp, #12
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	462a      	mov	r2, r5
 800a09a:	4b16      	ldr	r3, [pc, #88]	; (800a0f4 <_vfiprintf_r+0x258>)
 800a09c:	a904      	add	r1, sp, #16
 800a09e:	4630      	mov	r0, r6
 800a0a0:	f3af 8000 	nop.w
 800a0a4:	4607      	mov	r7, r0
 800a0a6:	1c78      	adds	r0, r7, #1
 800a0a8:	d1d6      	bne.n	800a058 <_vfiprintf_r+0x1bc>
 800a0aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0ac:	07d9      	lsls	r1, r3, #31
 800a0ae:	d405      	bmi.n	800a0bc <_vfiprintf_r+0x220>
 800a0b0:	89ab      	ldrh	r3, [r5, #12]
 800a0b2:	059a      	lsls	r2, r3, #22
 800a0b4:	d402      	bmi.n	800a0bc <_vfiprintf_r+0x220>
 800a0b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0b8:	f7ff fc81 	bl	80099be <__retarget_lock_release_recursive>
 800a0bc:	89ab      	ldrh	r3, [r5, #12]
 800a0be:	065b      	lsls	r3, r3, #25
 800a0c0:	f53f af12 	bmi.w	8009ee8 <_vfiprintf_r+0x4c>
 800a0c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a0c6:	e711      	b.n	8009eec <_vfiprintf_r+0x50>
 800a0c8:	ab03      	add	r3, sp, #12
 800a0ca:	9300      	str	r3, [sp, #0]
 800a0cc:	462a      	mov	r2, r5
 800a0ce:	4b09      	ldr	r3, [pc, #36]	; (800a0f4 <_vfiprintf_r+0x258>)
 800a0d0:	a904      	add	r1, sp, #16
 800a0d2:	4630      	mov	r0, r6
 800a0d4:	f000 f880 	bl	800a1d8 <_printf_i>
 800a0d8:	e7e4      	b.n	800a0a4 <_vfiprintf_r+0x208>
 800a0da:	bf00      	nop
 800a0dc:	0800b0ac 	.word	0x0800b0ac
 800a0e0:	0800b0cc 	.word	0x0800b0cc
 800a0e4:	0800b08c 	.word	0x0800b08c
 800a0e8:	0800b0ec 	.word	0x0800b0ec
 800a0ec:	0800b0f6 	.word	0x0800b0f6
 800a0f0:	00000000 	.word	0x00000000
 800a0f4:	08009e77 	.word	0x08009e77
 800a0f8:	0800b0f2 	.word	0x0800b0f2

0800a0fc <_printf_common>:
 800a0fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a100:	4616      	mov	r6, r2
 800a102:	4699      	mov	r9, r3
 800a104:	688a      	ldr	r2, [r1, #8]
 800a106:	690b      	ldr	r3, [r1, #16]
 800a108:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a10c:	4293      	cmp	r3, r2
 800a10e:	bfb8      	it	lt
 800a110:	4613      	movlt	r3, r2
 800a112:	6033      	str	r3, [r6, #0]
 800a114:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a118:	4607      	mov	r7, r0
 800a11a:	460c      	mov	r4, r1
 800a11c:	b10a      	cbz	r2, 800a122 <_printf_common+0x26>
 800a11e:	3301      	adds	r3, #1
 800a120:	6033      	str	r3, [r6, #0]
 800a122:	6823      	ldr	r3, [r4, #0]
 800a124:	0699      	lsls	r1, r3, #26
 800a126:	bf42      	ittt	mi
 800a128:	6833      	ldrmi	r3, [r6, #0]
 800a12a:	3302      	addmi	r3, #2
 800a12c:	6033      	strmi	r3, [r6, #0]
 800a12e:	6825      	ldr	r5, [r4, #0]
 800a130:	f015 0506 	ands.w	r5, r5, #6
 800a134:	d106      	bne.n	800a144 <_printf_common+0x48>
 800a136:	f104 0a19 	add.w	sl, r4, #25
 800a13a:	68e3      	ldr	r3, [r4, #12]
 800a13c:	6832      	ldr	r2, [r6, #0]
 800a13e:	1a9b      	subs	r3, r3, r2
 800a140:	42ab      	cmp	r3, r5
 800a142:	dc26      	bgt.n	800a192 <_printf_common+0x96>
 800a144:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a148:	1e13      	subs	r3, r2, #0
 800a14a:	6822      	ldr	r2, [r4, #0]
 800a14c:	bf18      	it	ne
 800a14e:	2301      	movne	r3, #1
 800a150:	0692      	lsls	r2, r2, #26
 800a152:	d42b      	bmi.n	800a1ac <_printf_common+0xb0>
 800a154:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a158:	4649      	mov	r1, r9
 800a15a:	4638      	mov	r0, r7
 800a15c:	47c0      	blx	r8
 800a15e:	3001      	adds	r0, #1
 800a160:	d01e      	beq.n	800a1a0 <_printf_common+0xa4>
 800a162:	6823      	ldr	r3, [r4, #0]
 800a164:	68e5      	ldr	r5, [r4, #12]
 800a166:	6832      	ldr	r2, [r6, #0]
 800a168:	f003 0306 	and.w	r3, r3, #6
 800a16c:	2b04      	cmp	r3, #4
 800a16e:	bf08      	it	eq
 800a170:	1aad      	subeq	r5, r5, r2
 800a172:	68a3      	ldr	r3, [r4, #8]
 800a174:	6922      	ldr	r2, [r4, #16]
 800a176:	bf0c      	ite	eq
 800a178:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a17c:	2500      	movne	r5, #0
 800a17e:	4293      	cmp	r3, r2
 800a180:	bfc4      	itt	gt
 800a182:	1a9b      	subgt	r3, r3, r2
 800a184:	18ed      	addgt	r5, r5, r3
 800a186:	2600      	movs	r6, #0
 800a188:	341a      	adds	r4, #26
 800a18a:	42b5      	cmp	r5, r6
 800a18c:	d11a      	bne.n	800a1c4 <_printf_common+0xc8>
 800a18e:	2000      	movs	r0, #0
 800a190:	e008      	b.n	800a1a4 <_printf_common+0xa8>
 800a192:	2301      	movs	r3, #1
 800a194:	4652      	mov	r2, sl
 800a196:	4649      	mov	r1, r9
 800a198:	4638      	mov	r0, r7
 800a19a:	47c0      	blx	r8
 800a19c:	3001      	adds	r0, #1
 800a19e:	d103      	bne.n	800a1a8 <_printf_common+0xac>
 800a1a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a1a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1a8:	3501      	adds	r5, #1
 800a1aa:	e7c6      	b.n	800a13a <_printf_common+0x3e>
 800a1ac:	18e1      	adds	r1, r4, r3
 800a1ae:	1c5a      	adds	r2, r3, #1
 800a1b0:	2030      	movs	r0, #48	; 0x30
 800a1b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1b6:	4422      	add	r2, r4
 800a1b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1c0:	3302      	adds	r3, #2
 800a1c2:	e7c7      	b.n	800a154 <_printf_common+0x58>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	4622      	mov	r2, r4
 800a1c8:	4649      	mov	r1, r9
 800a1ca:	4638      	mov	r0, r7
 800a1cc:	47c0      	blx	r8
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d0e6      	beq.n	800a1a0 <_printf_common+0xa4>
 800a1d2:	3601      	adds	r6, #1
 800a1d4:	e7d9      	b.n	800a18a <_printf_common+0x8e>
	...

0800a1d8 <_printf_i>:
 800a1d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a1dc:	7e0f      	ldrb	r7, [r1, #24]
 800a1de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a1e0:	2f78      	cmp	r7, #120	; 0x78
 800a1e2:	4691      	mov	r9, r2
 800a1e4:	4680      	mov	r8, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	469a      	mov	sl, r3
 800a1ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a1ee:	d807      	bhi.n	800a200 <_printf_i+0x28>
 800a1f0:	2f62      	cmp	r7, #98	; 0x62
 800a1f2:	d80a      	bhi.n	800a20a <_printf_i+0x32>
 800a1f4:	2f00      	cmp	r7, #0
 800a1f6:	f000 80d8 	beq.w	800a3aa <_printf_i+0x1d2>
 800a1fa:	2f58      	cmp	r7, #88	; 0x58
 800a1fc:	f000 80a3 	beq.w	800a346 <_printf_i+0x16e>
 800a200:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a204:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a208:	e03a      	b.n	800a280 <_printf_i+0xa8>
 800a20a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a20e:	2b15      	cmp	r3, #21
 800a210:	d8f6      	bhi.n	800a200 <_printf_i+0x28>
 800a212:	a101      	add	r1, pc, #4	; (adr r1, 800a218 <_printf_i+0x40>)
 800a214:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a218:	0800a271 	.word	0x0800a271
 800a21c:	0800a285 	.word	0x0800a285
 800a220:	0800a201 	.word	0x0800a201
 800a224:	0800a201 	.word	0x0800a201
 800a228:	0800a201 	.word	0x0800a201
 800a22c:	0800a201 	.word	0x0800a201
 800a230:	0800a285 	.word	0x0800a285
 800a234:	0800a201 	.word	0x0800a201
 800a238:	0800a201 	.word	0x0800a201
 800a23c:	0800a201 	.word	0x0800a201
 800a240:	0800a201 	.word	0x0800a201
 800a244:	0800a391 	.word	0x0800a391
 800a248:	0800a2b5 	.word	0x0800a2b5
 800a24c:	0800a373 	.word	0x0800a373
 800a250:	0800a201 	.word	0x0800a201
 800a254:	0800a201 	.word	0x0800a201
 800a258:	0800a3b3 	.word	0x0800a3b3
 800a25c:	0800a201 	.word	0x0800a201
 800a260:	0800a2b5 	.word	0x0800a2b5
 800a264:	0800a201 	.word	0x0800a201
 800a268:	0800a201 	.word	0x0800a201
 800a26c:	0800a37b 	.word	0x0800a37b
 800a270:	682b      	ldr	r3, [r5, #0]
 800a272:	1d1a      	adds	r2, r3, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	602a      	str	r2, [r5, #0]
 800a278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a27c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a280:	2301      	movs	r3, #1
 800a282:	e0a3      	b.n	800a3cc <_printf_i+0x1f4>
 800a284:	6820      	ldr	r0, [r4, #0]
 800a286:	6829      	ldr	r1, [r5, #0]
 800a288:	0606      	lsls	r6, r0, #24
 800a28a:	f101 0304 	add.w	r3, r1, #4
 800a28e:	d50a      	bpl.n	800a2a6 <_printf_i+0xce>
 800a290:	680e      	ldr	r6, [r1, #0]
 800a292:	602b      	str	r3, [r5, #0]
 800a294:	2e00      	cmp	r6, #0
 800a296:	da03      	bge.n	800a2a0 <_printf_i+0xc8>
 800a298:	232d      	movs	r3, #45	; 0x2d
 800a29a:	4276      	negs	r6, r6
 800a29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2a0:	485e      	ldr	r0, [pc, #376]	; (800a41c <_printf_i+0x244>)
 800a2a2:	230a      	movs	r3, #10
 800a2a4:	e019      	b.n	800a2da <_printf_i+0x102>
 800a2a6:	680e      	ldr	r6, [r1, #0]
 800a2a8:	602b      	str	r3, [r5, #0]
 800a2aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2ae:	bf18      	it	ne
 800a2b0:	b236      	sxthne	r6, r6
 800a2b2:	e7ef      	b.n	800a294 <_printf_i+0xbc>
 800a2b4:	682b      	ldr	r3, [r5, #0]
 800a2b6:	6820      	ldr	r0, [r4, #0]
 800a2b8:	1d19      	adds	r1, r3, #4
 800a2ba:	6029      	str	r1, [r5, #0]
 800a2bc:	0601      	lsls	r1, r0, #24
 800a2be:	d501      	bpl.n	800a2c4 <_printf_i+0xec>
 800a2c0:	681e      	ldr	r6, [r3, #0]
 800a2c2:	e002      	b.n	800a2ca <_printf_i+0xf2>
 800a2c4:	0646      	lsls	r6, r0, #25
 800a2c6:	d5fb      	bpl.n	800a2c0 <_printf_i+0xe8>
 800a2c8:	881e      	ldrh	r6, [r3, #0]
 800a2ca:	4854      	ldr	r0, [pc, #336]	; (800a41c <_printf_i+0x244>)
 800a2cc:	2f6f      	cmp	r7, #111	; 0x6f
 800a2ce:	bf0c      	ite	eq
 800a2d0:	2308      	moveq	r3, #8
 800a2d2:	230a      	movne	r3, #10
 800a2d4:	2100      	movs	r1, #0
 800a2d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a2da:	6865      	ldr	r5, [r4, #4]
 800a2dc:	60a5      	str	r5, [r4, #8]
 800a2de:	2d00      	cmp	r5, #0
 800a2e0:	bfa2      	ittt	ge
 800a2e2:	6821      	ldrge	r1, [r4, #0]
 800a2e4:	f021 0104 	bicge.w	r1, r1, #4
 800a2e8:	6021      	strge	r1, [r4, #0]
 800a2ea:	b90e      	cbnz	r6, 800a2f0 <_printf_i+0x118>
 800a2ec:	2d00      	cmp	r5, #0
 800a2ee:	d04d      	beq.n	800a38c <_printf_i+0x1b4>
 800a2f0:	4615      	mov	r5, r2
 800a2f2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a2f6:	fb03 6711 	mls	r7, r3, r1, r6
 800a2fa:	5dc7      	ldrb	r7, [r0, r7]
 800a2fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a300:	4637      	mov	r7, r6
 800a302:	42bb      	cmp	r3, r7
 800a304:	460e      	mov	r6, r1
 800a306:	d9f4      	bls.n	800a2f2 <_printf_i+0x11a>
 800a308:	2b08      	cmp	r3, #8
 800a30a:	d10b      	bne.n	800a324 <_printf_i+0x14c>
 800a30c:	6823      	ldr	r3, [r4, #0]
 800a30e:	07de      	lsls	r6, r3, #31
 800a310:	d508      	bpl.n	800a324 <_printf_i+0x14c>
 800a312:	6923      	ldr	r3, [r4, #16]
 800a314:	6861      	ldr	r1, [r4, #4]
 800a316:	4299      	cmp	r1, r3
 800a318:	bfde      	ittt	le
 800a31a:	2330      	movle	r3, #48	; 0x30
 800a31c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a320:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a324:	1b52      	subs	r2, r2, r5
 800a326:	6122      	str	r2, [r4, #16]
 800a328:	f8cd a000 	str.w	sl, [sp]
 800a32c:	464b      	mov	r3, r9
 800a32e:	aa03      	add	r2, sp, #12
 800a330:	4621      	mov	r1, r4
 800a332:	4640      	mov	r0, r8
 800a334:	f7ff fee2 	bl	800a0fc <_printf_common>
 800a338:	3001      	adds	r0, #1
 800a33a:	d14c      	bne.n	800a3d6 <_printf_i+0x1fe>
 800a33c:	f04f 30ff 	mov.w	r0, #4294967295
 800a340:	b004      	add	sp, #16
 800a342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a346:	4835      	ldr	r0, [pc, #212]	; (800a41c <_printf_i+0x244>)
 800a348:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a34c:	6829      	ldr	r1, [r5, #0]
 800a34e:	6823      	ldr	r3, [r4, #0]
 800a350:	f851 6b04 	ldr.w	r6, [r1], #4
 800a354:	6029      	str	r1, [r5, #0]
 800a356:	061d      	lsls	r5, r3, #24
 800a358:	d514      	bpl.n	800a384 <_printf_i+0x1ac>
 800a35a:	07df      	lsls	r7, r3, #31
 800a35c:	bf44      	itt	mi
 800a35e:	f043 0320 	orrmi.w	r3, r3, #32
 800a362:	6023      	strmi	r3, [r4, #0]
 800a364:	b91e      	cbnz	r6, 800a36e <_printf_i+0x196>
 800a366:	6823      	ldr	r3, [r4, #0]
 800a368:	f023 0320 	bic.w	r3, r3, #32
 800a36c:	6023      	str	r3, [r4, #0]
 800a36e:	2310      	movs	r3, #16
 800a370:	e7b0      	b.n	800a2d4 <_printf_i+0xfc>
 800a372:	6823      	ldr	r3, [r4, #0]
 800a374:	f043 0320 	orr.w	r3, r3, #32
 800a378:	6023      	str	r3, [r4, #0]
 800a37a:	2378      	movs	r3, #120	; 0x78
 800a37c:	4828      	ldr	r0, [pc, #160]	; (800a420 <_printf_i+0x248>)
 800a37e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a382:	e7e3      	b.n	800a34c <_printf_i+0x174>
 800a384:	0659      	lsls	r1, r3, #25
 800a386:	bf48      	it	mi
 800a388:	b2b6      	uxthmi	r6, r6
 800a38a:	e7e6      	b.n	800a35a <_printf_i+0x182>
 800a38c:	4615      	mov	r5, r2
 800a38e:	e7bb      	b.n	800a308 <_printf_i+0x130>
 800a390:	682b      	ldr	r3, [r5, #0]
 800a392:	6826      	ldr	r6, [r4, #0]
 800a394:	6961      	ldr	r1, [r4, #20]
 800a396:	1d18      	adds	r0, r3, #4
 800a398:	6028      	str	r0, [r5, #0]
 800a39a:	0635      	lsls	r5, r6, #24
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	d501      	bpl.n	800a3a4 <_printf_i+0x1cc>
 800a3a0:	6019      	str	r1, [r3, #0]
 800a3a2:	e002      	b.n	800a3aa <_printf_i+0x1d2>
 800a3a4:	0670      	lsls	r0, r6, #25
 800a3a6:	d5fb      	bpl.n	800a3a0 <_printf_i+0x1c8>
 800a3a8:	8019      	strh	r1, [r3, #0]
 800a3aa:	2300      	movs	r3, #0
 800a3ac:	6123      	str	r3, [r4, #16]
 800a3ae:	4615      	mov	r5, r2
 800a3b0:	e7ba      	b.n	800a328 <_printf_i+0x150>
 800a3b2:	682b      	ldr	r3, [r5, #0]
 800a3b4:	1d1a      	adds	r2, r3, #4
 800a3b6:	602a      	str	r2, [r5, #0]
 800a3b8:	681d      	ldr	r5, [r3, #0]
 800a3ba:	6862      	ldr	r2, [r4, #4]
 800a3bc:	2100      	movs	r1, #0
 800a3be:	4628      	mov	r0, r5
 800a3c0:	f7f5 ff3e 	bl	8000240 <memchr>
 800a3c4:	b108      	cbz	r0, 800a3ca <_printf_i+0x1f2>
 800a3c6:	1b40      	subs	r0, r0, r5
 800a3c8:	6060      	str	r0, [r4, #4]
 800a3ca:	6863      	ldr	r3, [r4, #4]
 800a3cc:	6123      	str	r3, [r4, #16]
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3d4:	e7a8      	b.n	800a328 <_printf_i+0x150>
 800a3d6:	6923      	ldr	r3, [r4, #16]
 800a3d8:	462a      	mov	r2, r5
 800a3da:	4649      	mov	r1, r9
 800a3dc:	4640      	mov	r0, r8
 800a3de:	47d0      	blx	sl
 800a3e0:	3001      	adds	r0, #1
 800a3e2:	d0ab      	beq.n	800a33c <_printf_i+0x164>
 800a3e4:	6823      	ldr	r3, [r4, #0]
 800a3e6:	079b      	lsls	r3, r3, #30
 800a3e8:	d413      	bmi.n	800a412 <_printf_i+0x23a>
 800a3ea:	68e0      	ldr	r0, [r4, #12]
 800a3ec:	9b03      	ldr	r3, [sp, #12]
 800a3ee:	4298      	cmp	r0, r3
 800a3f0:	bfb8      	it	lt
 800a3f2:	4618      	movlt	r0, r3
 800a3f4:	e7a4      	b.n	800a340 <_printf_i+0x168>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4632      	mov	r2, r6
 800a3fa:	4649      	mov	r1, r9
 800a3fc:	4640      	mov	r0, r8
 800a3fe:	47d0      	blx	sl
 800a400:	3001      	adds	r0, #1
 800a402:	d09b      	beq.n	800a33c <_printf_i+0x164>
 800a404:	3501      	adds	r5, #1
 800a406:	68e3      	ldr	r3, [r4, #12]
 800a408:	9903      	ldr	r1, [sp, #12]
 800a40a:	1a5b      	subs	r3, r3, r1
 800a40c:	42ab      	cmp	r3, r5
 800a40e:	dcf2      	bgt.n	800a3f6 <_printf_i+0x21e>
 800a410:	e7eb      	b.n	800a3ea <_printf_i+0x212>
 800a412:	2500      	movs	r5, #0
 800a414:	f104 0619 	add.w	r6, r4, #25
 800a418:	e7f5      	b.n	800a406 <_printf_i+0x22e>
 800a41a:	bf00      	nop
 800a41c:	0800b0fd 	.word	0x0800b0fd
 800a420:	0800b10e 	.word	0x0800b10e

0800a424 <_sbrk_r>:
 800a424:	b538      	push	{r3, r4, r5, lr}
 800a426:	4d06      	ldr	r5, [pc, #24]	; (800a440 <_sbrk_r+0x1c>)
 800a428:	2300      	movs	r3, #0
 800a42a:	4604      	mov	r4, r0
 800a42c:	4608      	mov	r0, r1
 800a42e:	602b      	str	r3, [r5, #0]
 800a430:	f7f7 fba4 	bl	8001b7c <_sbrk>
 800a434:	1c43      	adds	r3, r0, #1
 800a436:	d102      	bne.n	800a43e <_sbrk_r+0x1a>
 800a438:	682b      	ldr	r3, [r5, #0]
 800a43a:	b103      	cbz	r3, 800a43e <_sbrk_r+0x1a>
 800a43c:	6023      	str	r3, [r4, #0]
 800a43e:	bd38      	pop	{r3, r4, r5, pc}
 800a440:	20000468 	.word	0x20000468

0800a444 <__sread>:
 800a444:	b510      	push	{r4, lr}
 800a446:	460c      	mov	r4, r1
 800a448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a44c:	f000 fac6 	bl	800a9dc <_read_r>
 800a450:	2800      	cmp	r0, #0
 800a452:	bfab      	itete	ge
 800a454:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a456:	89a3      	ldrhlt	r3, [r4, #12]
 800a458:	181b      	addge	r3, r3, r0
 800a45a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a45e:	bfac      	ite	ge
 800a460:	6563      	strge	r3, [r4, #84]	; 0x54
 800a462:	81a3      	strhlt	r3, [r4, #12]
 800a464:	bd10      	pop	{r4, pc}

0800a466 <__swrite>:
 800a466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a46a:	461f      	mov	r7, r3
 800a46c:	898b      	ldrh	r3, [r1, #12]
 800a46e:	05db      	lsls	r3, r3, #23
 800a470:	4605      	mov	r5, r0
 800a472:	460c      	mov	r4, r1
 800a474:	4616      	mov	r6, r2
 800a476:	d505      	bpl.n	800a484 <__swrite+0x1e>
 800a478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a47c:	2302      	movs	r3, #2
 800a47e:	2200      	movs	r2, #0
 800a480:	f000 f9d0 	bl	800a824 <_lseek_r>
 800a484:	89a3      	ldrh	r3, [r4, #12]
 800a486:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a48a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a48e:	81a3      	strh	r3, [r4, #12]
 800a490:	4632      	mov	r2, r6
 800a492:	463b      	mov	r3, r7
 800a494:	4628      	mov	r0, r5
 800a496:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a49a:	f000 b869 	b.w	800a570 <_write_r>

0800a49e <__sseek>:
 800a49e:	b510      	push	{r4, lr}
 800a4a0:	460c      	mov	r4, r1
 800a4a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a6:	f000 f9bd 	bl	800a824 <_lseek_r>
 800a4aa:	1c43      	adds	r3, r0, #1
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	bf15      	itete	ne
 800a4b0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a4b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a4b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a4ba:	81a3      	strheq	r3, [r4, #12]
 800a4bc:	bf18      	it	ne
 800a4be:	81a3      	strhne	r3, [r4, #12]
 800a4c0:	bd10      	pop	{r4, pc}

0800a4c2 <__sclose>:
 800a4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4c6:	f000 b8db 	b.w	800a680 <_close_r>
	...

0800a4cc <__swbuf_r>:
 800a4cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4ce:	460e      	mov	r6, r1
 800a4d0:	4614      	mov	r4, r2
 800a4d2:	4605      	mov	r5, r0
 800a4d4:	b118      	cbz	r0, 800a4de <__swbuf_r+0x12>
 800a4d6:	6983      	ldr	r3, [r0, #24]
 800a4d8:	b90b      	cbnz	r3, 800a4de <__swbuf_r+0x12>
 800a4da:	f7ff f9bf 	bl	800985c <__sinit>
 800a4de:	4b21      	ldr	r3, [pc, #132]	; (800a564 <__swbuf_r+0x98>)
 800a4e0:	429c      	cmp	r4, r3
 800a4e2:	d12b      	bne.n	800a53c <__swbuf_r+0x70>
 800a4e4:	686c      	ldr	r4, [r5, #4]
 800a4e6:	69a3      	ldr	r3, [r4, #24]
 800a4e8:	60a3      	str	r3, [r4, #8]
 800a4ea:	89a3      	ldrh	r3, [r4, #12]
 800a4ec:	071a      	lsls	r2, r3, #28
 800a4ee:	d52f      	bpl.n	800a550 <__swbuf_r+0x84>
 800a4f0:	6923      	ldr	r3, [r4, #16]
 800a4f2:	b36b      	cbz	r3, 800a550 <__swbuf_r+0x84>
 800a4f4:	6923      	ldr	r3, [r4, #16]
 800a4f6:	6820      	ldr	r0, [r4, #0]
 800a4f8:	1ac0      	subs	r0, r0, r3
 800a4fa:	6963      	ldr	r3, [r4, #20]
 800a4fc:	b2f6      	uxtb	r6, r6
 800a4fe:	4283      	cmp	r3, r0
 800a500:	4637      	mov	r7, r6
 800a502:	dc04      	bgt.n	800a50e <__swbuf_r+0x42>
 800a504:	4621      	mov	r1, r4
 800a506:	4628      	mov	r0, r5
 800a508:	f000 f950 	bl	800a7ac <_fflush_r>
 800a50c:	bb30      	cbnz	r0, 800a55c <__swbuf_r+0x90>
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	3b01      	subs	r3, #1
 800a512:	60a3      	str	r3, [r4, #8]
 800a514:	6823      	ldr	r3, [r4, #0]
 800a516:	1c5a      	adds	r2, r3, #1
 800a518:	6022      	str	r2, [r4, #0]
 800a51a:	701e      	strb	r6, [r3, #0]
 800a51c:	6963      	ldr	r3, [r4, #20]
 800a51e:	3001      	adds	r0, #1
 800a520:	4283      	cmp	r3, r0
 800a522:	d004      	beq.n	800a52e <__swbuf_r+0x62>
 800a524:	89a3      	ldrh	r3, [r4, #12]
 800a526:	07db      	lsls	r3, r3, #31
 800a528:	d506      	bpl.n	800a538 <__swbuf_r+0x6c>
 800a52a:	2e0a      	cmp	r6, #10
 800a52c:	d104      	bne.n	800a538 <__swbuf_r+0x6c>
 800a52e:	4621      	mov	r1, r4
 800a530:	4628      	mov	r0, r5
 800a532:	f000 f93b 	bl	800a7ac <_fflush_r>
 800a536:	b988      	cbnz	r0, 800a55c <__swbuf_r+0x90>
 800a538:	4638      	mov	r0, r7
 800a53a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a53c:	4b0a      	ldr	r3, [pc, #40]	; (800a568 <__swbuf_r+0x9c>)
 800a53e:	429c      	cmp	r4, r3
 800a540:	d101      	bne.n	800a546 <__swbuf_r+0x7a>
 800a542:	68ac      	ldr	r4, [r5, #8]
 800a544:	e7cf      	b.n	800a4e6 <__swbuf_r+0x1a>
 800a546:	4b09      	ldr	r3, [pc, #36]	; (800a56c <__swbuf_r+0xa0>)
 800a548:	429c      	cmp	r4, r3
 800a54a:	bf08      	it	eq
 800a54c:	68ec      	ldreq	r4, [r5, #12]
 800a54e:	e7ca      	b.n	800a4e6 <__swbuf_r+0x1a>
 800a550:	4621      	mov	r1, r4
 800a552:	4628      	mov	r0, r5
 800a554:	f000 f81e 	bl	800a594 <__swsetup_r>
 800a558:	2800      	cmp	r0, #0
 800a55a:	d0cb      	beq.n	800a4f4 <__swbuf_r+0x28>
 800a55c:	f04f 37ff 	mov.w	r7, #4294967295
 800a560:	e7ea      	b.n	800a538 <__swbuf_r+0x6c>
 800a562:	bf00      	nop
 800a564:	0800b0ac 	.word	0x0800b0ac
 800a568:	0800b0cc 	.word	0x0800b0cc
 800a56c:	0800b08c 	.word	0x0800b08c

0800a570 <_write_r>:
 800a570:	b538      	push	{r3, r4, r5, lr}
 800a572:	4d07      	ldr	r5, [pc, #28]	; (800a590 <_write_r+0x20>)
 800a574:	4604      	mov	r4, r0
 800a576:	4608      	mov	r0, r1
 800a578:	4611      	mov	r1, r2
 800a57a:	2200      	movs	r2, #0
 800a57c:	602a      	str	r2, [r5, #0]
 800a57e:	461a      	mov	r2, r3
 800a580:	f7f7 faab 	bl	8001ada <_write>
 800a584:	1c43      	adds	r3, r0, #1
 800a586:	d102      	bne.n	800a58e <_write_r+0x1e>
 800a588:	682b      	ldr	r3, [r5, #0]
 800a58a:	b103      	cbz	r3, 800a58e <_write_r+0x1e>
 800a58c:	6023      	str	r3, [r4, #0]
 800a58e:	bd38      	pop	{r3, r4, r5, pc}
 800a590:	20000468 	.word	0x20000468

0800a594 <__swsetup_r>:
 800a594:	4b32      	ldr	r3, [pc, #200]	; (800a660 <__swsetup_r+0xcc>)
 800a596:	b570      	push	{r4, r5, r6, lr}
 800a598:	681d      	ldr	r5, [r3, #0]
 800a59a:	4606      	mov	r6, r0
 800a59c:	460c      	mov	r4, r1
 800a59e:	b125      	cbz	r5, 800a5aa <__swsetup_r+0x16>
 800a5a0:	69ab      	ldr	r3, [r5, #24]
 800a5a2:	b913      	cbnz	r3, 800a5aa <__swsetup_r+0x16>
 800a5a4:	4628      	mov	r0, r5
 800a5a6:	f7ff f959 	bl	800985c <__sinit>
 800a5aa:	4b2e      	ldr	r3, [pc, #184]	; (800a664 <__swsetup_r+0xd0>)
 800a5ac:	429c      	cmp	r4, r3
 800a5ae:	d10f      	bne.n	800a5d0 <__swsetup_r+0x3c>
 800a5b0:	686c      	ldr	r4, [r5, #4]
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a5b8:	0719      	lsls	r1, r3, #28
 800a5ba:	d42c      	bmi.n	800a616 <__swsetup_r+0x82>
 800a5bc:	06dd      	lsls	r5, r3, #27
 800a5be:	d411      	bmi.n	800a5e4 <__swsetup_r+0x50>
 800a5c0:	2309      	movs	r3, #9
 800a5c2:	6033      	str	r3, [r6, #0]
 800a5c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a5c8:	81a3      	strh	r3, [r4, #12]
 800a5ca:	f04f 30ff 	mov.w	r0, #4294967295
 800a5ce:	e03e      	b.n	800a64e <__swsetup_r+0xba>
 800a5d0:	4b25      	ldr	r3, [pc, #148]	; (800a668 <__swsetup_r+0xd4>)
 800a5d2:	429c      	cmp	r4, r3
 800a5d4:	d101      	bne.n	800a5da <__swsetup_r+0x46>
 800a5d6:	68ac      	ldr	r4, [r5, #8]
 800a5d8:	e7eb      	b.n	800a5b2 <__swsetup_r+0x1e>
 800a5da:	4b24      	ldr	r3, [pc, #144]	; (800a66c <__swsetup_r+0xd8>)
 800a5dc:	429c      	cmp	r4, r3
 800a5de:	bf08      	it	eq
 800a5e0:	68ec      	ldreq	r4, [r5, #12]
 800a5e2:	e7e6      	b.n	800a5b2 <__swsetup_r+0x1e>
 800a5e4:	0758      	lsls	r0, r3, #29
 800a5e6:	d512      	bpl.n	800a60e <__swsetup_r+0x7a>
 800a5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5ea:	b141      	cbz	r1, 800a5fe <__swsetup_r+0x6a>
 800a5ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5f0:	4299      	cmp	r1, r3
 800a5f2:	d002      	beq.n	800a5fa <__swsetup_r+0x66>
 800a5f4:	4630      	mov	r0, r6
 800a5f6:	f7ff f9eb 	bl	80099d0 <_free_r>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	6363      	str	r3, [r4, #52]	; 0x34
 800a5fe:	89a3      	ldrh	r3, [r4, #12]
 800a600:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a604:	81a3      	strh	r3, [r4, #12]
 800a606:	2300      	movs	r3, #0
 800a608:	6063      	str	r3, [r4, #4]
 800a60a:	6923      	ldr	r3, [r4, #16]
 800a60c:	6023      	str	r3, [r4, #0]
 800a60e:	89a3      	ldrh	r3, [r4, #12]
 800a610:	f043 0308 	orr.w	r3, r3, #8
 800a614:	81a3      	strh	r3, [r4, #12]
 800a616:	6923      	ldr	r3, [r4, #16]
 800a618:	b94b      	cbnz	r3, 800a62e <__swsetup_r+0x9a>
 800a61a:	89a3      	ldrh	r3, [r4, #12]
 800a61c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a624:	d003      	beq.n	800a62e <__swsetup_r+0x9a>
 800a626:	4621      	mov	r1, r4
 800a628:	4630      	mov	r0, r6
 800a62a:	f000 f933 	bl	800a894 <__smakebuf_r>
 800a62e:	89a0      	ldrh	r0, [r4, #12]
 800a630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a634:	f010 0301 	ands.w	r3, r0, #1
 800a638:	d00a      	beq.n	800a650 <__swsetup_r+0xbc>
 800a63a:	2300      	movs	r3, #0
 800a63c:	60a3      	str	r3, [r4, #8]
 800a63e:	6963      	ldr	r3, [r4, #20]
 800a640:	425b      	negs	r3, r3
 800a642:	61a3      	str	r3, [r4, #24]
 800a644:	6923      	ldr	r3, [r4, #16]
 800a646:	b943      	cbnz	r3, 800a65a <__swsetup_r+0xc6>
 800a648:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a64c:	d1ba      	bne.n	800a5c4 <__swsetup_r+0x30>
 800a64e:	bd70      	pop	{r4, r5, r6, pc}
 800a650:	0781      	lsls	r1, r0, #30
 800a652:	bf58      	it	pl
 800a654:	6963      	ldrpl	r3, [r4, #20]
 800a656:	60a3      	str	r3, [r4, #8]
 800a658:	e7f4      	b.n	800a644 <__swsetup_r+0xb0>
 800a65a:	2000      	movs	r0, #0
 800a65c:	e7f7      	b.n	800a64e <__swsetup_r+0xba>
 800a65e:	bf00      	nop
 800a660:	2000000c 	.word	0x2000000c
 800a664:	0800b0ac 	.word	0x0800b0ac
 800a668:	0800b0cc 	.word	0x0800b0cc
 800a66c:	0800b08c 	.word	0x0800b08c

0800a670 <abort>:
 800a670:	b508      	push	{r3, lr}
 800a672:	2006      	movs	r0, #6
 800a674:	f000 f9ec 	bl	800aa50 <raise>
 800a678:	2001      	movs	r0, #1
 800a67a:	f7f7 fa07 	bl	8001a8c <_exit>
	...

0800a680 <_close_r>:
 800a680:	b538      	push	{r3, r4, r5, lr}
 800a682:	4d06      	ldr	r5, [pc, #24]	; (800a69c <_close_r+0x1c>)
 800a684:	2300      	movs	r3, #0
 800a686:	4604      	mov	r4, r0
 800a688:	4608      	mov	r0, r1
 800a68a:	602b      	str	r3, [r5, #0]
 800a68c:	f7f7 fa41 	bl	8001b12 <_close>
 800a690:	1c43      	adds	r3, r0, #1
 800a692:	d102      	bne.n	800a69a <_close_r+0x1a>
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	b103      	cbz	r3, 800a69a <_close_r+0x1a>
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	bd38      	pop	{r3, r4, r5, pc}
 800a69c:	20000468 	.word	0x20000468

0800a6a0 <__sflush_r>:
 800a6a0:	898a      	ldrh	r2, [r1, #12]
 800a6a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a6:	4605      	mov	r5, r0
 800a6a8:	0710      	lsls	r0, r2, #28
 800a6aa:	460c      	mov	r4, r1
 800a6ac:	d458      	bmi.n	800a760 <__sflush_r+0xc0>
 800a6ae:	684b      	ldr	r3, [r1, #4]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	dc05      	bgt.n	800a6c0 <__sflush_r+0x20>
 800a6b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	dc02      	bgt.n	800a6c0 <__sflush_r+0x20>
 800a6ba:	2000      	movs	r0, #0
 800a6bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6c2:	2e00      	cmp	r6, #0
 800a6c4:	d0f9      	beq.n	800a6ba <__sflush_r+0x1a>
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a6cc:	682f      	ldr	r7, [r5, #0]
 800a6ce:	602b      	str	r3, [r5, #0]
 800a6d0:	d032      	beq.n	800a738 <__sflush_r+0x98>
 800a6d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a6d4:	89a3      	ldrh	r3, [r4, #12]
 800a6d6:	075a      	lsls	r2, r3, #29
 800a6d8:	d505      	bpl.n	800a6e6 <__sflush_r+0x46>
 800a6da:	6863      	ldr	r3, [r4, #4]
 800a6dc:	1ac0      	subs	r0, r0, r3
 800a6de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a6e0:	b10b      	cbz	r3, 800a6e6 <__sflush_r+0x46>
 800a6e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a6e4:	1ac0      	subs	r0, r0, r3
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	4602      	mov	r2, r0
 800a6ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a6ec:	6a21      	ldr	r1, [r4, #32]
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	47b0      	blx	r6
 800a6f2:	1c43      	adds	r3, r0, #1
 800a6f4:	89a3      	ldrh	r3, [r4, #12]
 800a6f6:	d106      	bne.n	800a706 <__sflush_r+0x66>
 800a6f8:	6829      	ldr	r1, [r5, #0]
 800a6fa:	291d      	cmp	r1, #29
 800a6fc:	d82c      	bhi.n	800a758 <__sflush_r+0xb8>
 800a6fe:	4a2a      	ldr	r2, [pc, #168]	; (800a7a8 <__sflush_r+0x108>)
 800a700:	40ca      	lsrs	r2, r1
 800a702:	07d6      	lsls	r6, r2, #31
 800a704:	d528      	bpl.n	800a758 <__sflush_r+0xb8>
 800a706:	2200      	movs	r2, #0
 800a708:	6062      	str	r2, [r4, #4]
 800a70a:	04d9      	lsls	r1, r3, #19
 800a70c:	6922      	ldr	r2, [r4, #16]
 800a70e:	6022      	str	r2, [r4, #0]
 800a710:	d504      	bpl.n	800a71c <__sflush_r+0x7c>
 800a712:	1c42      	adds	r2, r0, #1
 800a714:	d101      	bne.n	800a71a <__sflush_r+0x7a>
 800a716:	682b      	ldr	r3, [r5, #0]
 800a718:	b903      	cbnz	r3, 800a71c <__sflush_r+0x7c>
 800a71a:	6560      	str	r0, [r4, #84]	; 0x54
 800a71c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a71e:	602f      	str	r7, [r5, #0]
 800a720:	2900      	cmp	r1, #0
 800a722:	d0ca      	beq.n	800a6ba <__sflush_r+0x1a>
 800a724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a728:	4299      	cmp	r1, r3
 800a72a:	d002      	beq.n	800a732 <__sflush_r+0x92>
 800a72c:	4628      	mov	r0, r5
 800a72e:	f7ff f94f 	bl	80099d0 <_free_r>
 800a732:	2000      	movs	r0, #0
 800a734:	6360      	str	r0, [r4, #52]	; 0x34
 800a736:	e7c1      	b.n	800a6bc <__sflush_r+0x1c>
 800a738:	6a21      	ldr	r1, [r4, #32]
 800a73a:	2301      	movs	r3, #1
 800a73c:	4628      	mov	r0, r5
 800a73e:	47b0      	blx	r6
 800a740:	1c41      	adds	r1, r0, #1
 800a742:	d1c7      	bne.n	800a6d4 <__sflush_r+0x34>
 800a744:	682b      	ldr	r3, [r5, #0]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d0c4      	beq.n	800a6d4 <__sflush_r+0x34>
 800a74a:	2b1d      	cmp	r3, #29
 800a74c:	d001      	beq.n	800a752 <__sflush_r+0xb2>
 800a74e:	2b16      	cmp	r3, #22
 800a750:	d101      	bne.n	800a756 <__sflush_r+0xb6>
 800a752:	602f      	str	r7, [r5, #0]
 800a754:	e7b1      	b.n	800a6ba <__sflush_r+0x1a>
 800a756:	89a3      	ldrh	r3, [r4, #12]
 800a758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a75c:	81a3      	strh	r3, [r4, #12]
 800a75e:	e7ad      	b.n	800a6bc <__sflush_r+0x1c>
 800a760:	690f      	ldr	r7, [r1, #16]
 800a762:	2f00      	cmp	r7, #0
 800a764:	d0a9      	beq.n	800a6ba <__sflush_r+0x1a>
 800a766:	0793      	lsls	r3, r2, #30
 800a768:	680e      	ldr	r6, [r1, #0]
 800a76a:	bf08      	it	eq
 800a76c:	694b      	ldreq	r3, [r1, #20]
 800a76e:	600f      	str	r7, [r1, #0]
 800a770:	bf18      	it	ne
 800a772:	2300      	movne	r3, #0
 800a774:	eba6 0807 	sub.w	r8, r6, r7
 800a778:	608b      	str	r3, [r1, #8]
 800a77a:	f1b8 0f00 	cmp.w	r8, #0
 800a77e:	dd9c      	ble.n	800a6ba <__sflush_r+0x1a>
 800a780:	6a21      	ldr	r1, [r4, #32]
 800a782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a784:	4643      	mov	r3, r8
 800a786:	463a      	mov	r2, r7
 800a788:	4628      	mov	r0, r5
 800a78a:	47b0      	blx	r6
 800a78c:	2800      	cmp	r0, #0
 800a78e:	dc06      	bgt.n	800a79e <__sflush_r+0xfe>
 800a790:	89a3      	ldrh	r3, [r4, #12]
 800a792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a796:	81a3      	strh	r3, [r4, #12]
 800a798:	f04f 30ff 	mov.w	r0, #4294967295
 800a79c:	e78e      	b.n	800a6bc <__sflush_r+0x1c>
 800a79e:	4407      	add	r7, r0
 800a7a0:	eba8 0800 	sub.w	r8, r8, r0
 800a7a4:	e7e9      	b.n	800a77a <__sflush_r+0xda>
 800a7a6:	bf00      	nop
 800a7a8:	20400001 	.word	0x20400001

0800a7ac <_fflush_r>:
 800a7ac:	b538      	push	{r3, r4, r5, lr}
 800a7ae:	690b      	ldr	r3, [r1, #16]
 800a7b0:	4605      	mov	r5, r0
 800a7b2:	460c      	mov	r4, r1
 800a7b4:	b913      	cbnz	r3, 800a7bc <_fflush_r+0x10>
 800a7b6:	2500      	movs	r5, #0
 800a7b8:	4628      	mov	r0, r5
 800a7ba:	bd38      	pop	{r3, r4, r5, pc}
 800a7bc:	b118      	cbz	r0, 800a7c6 <_fflush_r+0x1a>
 800a7be:	6983      	ldr	r3, [r0, #24]
 800a7c0:	b90b      	cbnz	r3, 800a7c6 <_fflush_r+0x1a>
 800a7c2:	f7ff f84b 	bl	800985c <__sinit>
 800a7c6:	4b14      	ldr	r3, [pc, #80]	; (800a818 <_fflush_r+0x6c>)
 800a7c8:	429c      	cmp	r4, r3
 800a7ca:	d11b      	bne.n	800a804 <_fflush_r+0x58>
 800a7cc:	686c      	ldr	r4, [r5, #4]
 800a7ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d0ef      	beq.n	800a7b6 <_fflush_r+0xa>
 800a7d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a7d8:	07d0      	lsls	r0, r2, #31
 800a7da:	d404      	bmi.n	800a7e6 <_fflush_r+0x3a>
 800a7dc:	0599      	lsls	r1, r3, #22
 800a7de:	d402      	bmi.n	800a7e6 <_fflush_r+0x3a>
 800a7e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7e2:	f7ff f8eb 	bl	80099bc <__retarget_lock_acquire_recursive>
 800a7e6:	4628      	mov	r0, r5
 800a7e8:	4621      	mov	r1, r4
 800a7ea:	f7ff ff59 	bl	800a6a0 <__sflush_r>
 800a7ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a7f0:	07da      	lsls	r2, r3, #31
 800a7f2:	4605      	mov	r5, r0
 800a7f4:	d4e0      	bmi.n	800a7b8 <_fflush_r+0xc>
 800a7f6:	89a3      	ldrh	r3, [r4, #12]
 800a7f8:	059b      	lsls	r3, r3, #22
 800a7fa:	d4dd      	bmi.n	800a7b8 <_fflush_r+0xc>
 800a7fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a7fe:	f7ff f8de 	bl	80099be <__retarget_lock_release_recursive>
 800a802:	e7d9      	b.n	800a7b8 <_fflush_r+0xc>
 800a804:	4b05      	ldr	r3, [pc, #20]	; (800a81c <_fflush_r+0x70>)
 800a806:	429c      	cmp	r4, r3
 800a808:	d101      	bne.n	800a80e <_fflush_r+0x62>
 800a80a:	68ac      	ldr	r4, [r5, #8]
 800a80c:	e7df      	b.n	800a7ce <_fflush_r+0x22>
 800a80e:	4b04      	ldr	r3, [pc, #16]	; (800a820 <_fflush_r+0x74>)
 800a810:	429c      	cmp	r4, r3
 800a812:	bf08      	it	eq
 800a814:	68ec      	ldreq	r4, [r5, #12]
 800a816:	e7da      	b.n	800a7ce <_fflush_r+0x22>
 800a818:	0800b0ac 	.word	0x0800b0ac
 800a81c:	0800b0cc 	.word	0x0800b0cc
 800a820:	0800b08c 	.word	0x0800b08c

0800a824 <_lseek_r>:
 800a824:	b538      	push	{r3, r4, r5, lr}
 800a826:	4d07      	ldr	r5, [pc, #28]	; (800a844 <_lseek_r+0x20>)
 800a828:	4604      	mov	r4, r0
 800a82a:	4608      	mov	r0, r1
 800a82c:	4611      	mov	r1, r2
 800a82e:	2200      	movs	r2, #0
 800a830:	602a      	str	r2, [r5, #0]
 800a832:	461a      	mov	r2, r3
 800a834:	f7f7 f994 	bl	8001b60 <_lseek>
 800a838:	1c43      	adds	r3, r0, #1
 800a83a:	d102      	bne.n	800a842 <_lseek_r+0x1e>
 800a83c:	682b      	ldr	r3, [r5, #0]
 800a83e:	b103      	cbz	r3, 800a842 <_lseek_r+0x1e>
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	bd38      	pop	{r3, r4, r5, pc}
 800a844:	20000468 	.word	0x20000468

0800a848 <__swhatbuf_r>:
 800a848:	b570      	push	{r4, r5, r6, lr}
 800a84a:	460e      	mov	r6, r1
 800a84c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a850:	2900      	cmp	r1, #0
 800a852:	b096      	sub	sp, #88	; 0x58
 800a854:	4614      	mov	r4, r2
 800a856:	461d      	mov	r5, r3
 800a858:	da08      	bge.n	800a86c <__swhatbuf_r+0x24>
 800a85a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a85e:	2200      	movs	r2, #0
 800a860:	602a      	str	r2, [r5, #0]
 800a862:	061a      	lsls	r2, r3, #24
 800a864:	d410      	bmi.n	800a888 <__swhatbuf_r+0x40>
 800a866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a86a:	e00e      	b.n	800a88a <__swhatbuf_r+0x42>
 800a86c:	466a      	mov	r2, sp
 800a86e:	f000 f90b 	bl	800aa88 <_fstat_r>
 800a872:	2800      	cmp	r0, #0
 800a874:	dbf1      	blt.n	800a85a <__swhatbuf_r+0x12>
 800a876:	9a01      	ldr	r2, [sp, #4]
 800a878:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a87c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a880:	425a      	negs	r2, r3
 800a882:	415a      	adcs	r2, r3
 800a884:	602a      	str	r2, [r5, #0]
 800a886:	e7ee      	b.n	800a866 <__swhatbuf_r+0x1e>
 800a888:	2340      	movs	r3, #64	; 0x40
 800a88a:	2000      	movs	r0, #0
 800a88c:	6023      	str	r3, [r4, #0]
 800a88e:	b016      	add	sp, #88	; 0x58
 800a890:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a894 <__smakebuf_r>:
 800a894:	898b      	ldrh	r3, [r1, #12]
 800a896:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a898:	079d      	lsls	r5, r3, #30
 800a89a:	4606      	mov	r6, r0
 800a89c:	460c      	mov	r4, r1
 800a89e:	d507      	bpl.n	800a8b0 <__smakebuf_r+0x1c>
 800a8a0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a8a4:	6023      	str	r3, [r4, #0]
 800a8a6:	6123      	str	r3, [r4, #16]
 800a8a8:	2301      	movs	r3, #1
 800a8aa:	6163      	str	r3, [r4, #20]
 800a8ac:	b002      	add	sp, #8
 800a8ae:	bd70      	pop	{r4, r5, r6, pc}
 800a8b0:	ab01      	add	r3, sp, #4
 800a8b2:	466a      	mov	r2, sp
 800a8b4:	f7ff ffc8 	bl	800a848 <__swhatbuf_r>
 800a8b8:	9900      	ldr	r1, [sp, #0]
 800a8ba:	4605      	mov	r5, r0
 800a8bc:	4630      	mov	r0, r6
 800a8be:	f7ff f8f3 	bl	8009aa8 <_malloc_r>
 800a8c2:	b948      	cbnz	r0, 800a8d8 <__smakebuf_r+0x44>
 800a8c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8c8:	059a      	lsls	r2, r3, #22
 800a8ca:	d4ef      	bmi.n	800a8ac <__smakebuf_r+0x18>
 800a8cc:	f023 0303 	bic.w	r3, r3, #3
 800a8d0:	f043 0302 	orr.w	r3, r3, #2
 800a8d4:	81a3      	strh	r3, [r4, #12]
 800a8d6:	e7e3      	b.n	800a8a0 <__smakebuf_r+0xc>
 800a8d8:	4b0d      	ldr	r3, [pc, #52]	; (800a910 <__smakebuf_r+0x7c>)
 800a8da:	62b3      	str	r3, [r6, #40]	; 0x28
 800a8dc:	89a3      	ldrh	r3, [r4, #12]
 800a8de:	6020      	str	r0, [r4, #0]
 800a8e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e4:	81a3      	strh	r3, [r4, #12]
 800a8e6:	9b00      	ldr	r3, [sp, #0]
 800a8e8:	6163      	str	r3, [r4, #20]
 800a8ea:	9b01      	ldr	r3, [sp, #4]
 800a8ec:	6120      	str	r0, [r4, #16]
 800a8ee:	b15b      	cbz	r3, 800a908 <__smakebuf_r+0x74>
 800a8f0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8f4:	4630      	mov	r0, r6
 800a8f6:	f000 f8d9 	bl	800aaac <_isatty_r>
 800a8fa:	b128      	cbz	r0, 800a908 <__smakebuf_r+0x74>
 800a8fc:	89a3      	ldrh	r3, [r4, #12]
 800a8fe:	f023 0303 	bic.w	r3, r3, #3
 800a902:	f043 0301 	orr.w	r3, r3, #1
 800a906:	81a3      	strh	r3, [r4, #12]
 800a908:	89a0      	ldrh	r0, [r4, #12]
 800a90a:	4305      	orrs	r5, r0
 800a90c:	81a5      	strh	r5, [r4, #12]
 800a90e:	e7cd      	b.n	800a8ac <__smakebuf_r+0x18>
 800a910:	080097f5 	.word	0x080097f5

0800a914 <memcpy>:
 800a914:	440a      	add	r2, r1
 800a916:	4291      	cmp	r1, r2
 800a918:	f100 33ff 	add.w	r3, r0, #4294967295
 800a91c:	d100      	bne.n	800a920 <memcpy+0xc>
 800a91e:	4770      	bx	lr
 800a920:	b510      	push	{r4, lr}
 800a922:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a926:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a92a:	4291      	cmp	r1, r2
 800a92c:	d1f9      	bne.n	800a922 <memcpy+0xe>
 800a92e:	bd10      	pop	{r4, pc}

0800a930 <memmove>:
 800a930:	4288      	cmp	r0, r1
 800a932:	b510      	push	{r4, lr}
 800a934:	eb01 0402 	add.w	r4, r1, r2
 800a938:	d902      	bls.n	800a940 <memmove+0x10>
 800a93a:	4284      	cmp	r4, r0
 800a93c:	4623      	mov	r3, r4
 800a93e:	d807      	bhi.n	800a950 <memmove+0x20>
 800a940:	1e43      	subs	r3, r0, #1
 800a942:	42a1      	cmp	r1, r4
 800a944:	d008      	beq.n	800a958 <memmove+0x28>
 800a946:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a94a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a94e:	e7f8      	b.n	800a942 <memmove+0x12>
 800a950:	4402      	add	r2, r0
 800a952:	4601      	mov	r1, r0
 800a954:	428a      	cmp	r2, r1
 800a956:	d100      	bne.n	800a95a <memmove+0x2a>
 800a958:	bd10      	pop	{r4, pc}
 800a95a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a95e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a962:	e7f7      	b.n	800a954 <memmove+0x24>

0800a964 <__malloc_lock>:
 800a964:	4801      	ldr	r0, [pc, #4]	; (800a96c <__malloc_lock+0x8>)
 800a966:	f7ff b829 	b.w	80099bc <__retarget_lock_acquire_recursive>
 800a96a:	bf00      	nop
 800a96c:	2000045c 	.word	0x2000045c

0800a970 <__malloc_unlock>:
 800a970:	4801      	ldr	r0, [pc, #4]	; (800a978 <__malloc_unlock+0x8>)
 800a972:	f7ff b824 	b.w	80099be <__retarget_lock_release_recursive>
 800a976:	bf00      	nop
 800a978:	2000045c 	.word	0x2000045c

0800a97c <_realloc_r>:
 800a97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a980:	4680      	mov	r8, r0
 800a982:	4614      	mov	r4, r2
 800a984:	460e      	mov	r6, r1
 800a986:	b921      	cbnz	r1, 800a992 <_realloc_r+0x16>
 800a988:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98c:	4611      	mov	r1, r2
 800a98e:	f7ff b88b 	b.w	8009aa8 <_malloc_r>
 800a992:	b92a      	cbnz	r2, 800a9a0 <_realloc_r+0x24>
 800a994:	f7ff f81c 	bl	80099d0 <_free_r>
 800a998:	4625      	mov	r5, r4
 800a99a:	4628      	mov	r0, r5
 800a99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9a0:	f000 f894 	bl	800aacc <_malloc_usable_size_r>
 800a9a4:	4284      	cmp	r4, r0
 800a9a6:	4607      	mov	r7, r0
 800a9a8:	d802      	bhi.n	800a9b0 <_realloc_r+0x34>
 800a9aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a9ae:	d812      	bhi.n	800a9d6 <_realloc_r+0x5a>
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	f7ff f878 	bl	8009aa8 <_malloc_r>
 800a9b8:	4605      	mov	r5, r0
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	d0ed      	beq.n	800a99a <_realloc_r+0x1e>
 800a9be:	42bc      	cmp	r4, r7
 800a9c0:	4622      	mov	r2, r4
 800a9c2:	4631      	mov	r1, r6
 800a9c4:	bf28      	it	cs
 800a9c6:	463a      	movcs	r2, r7
 800a9c8:	f7ff ffa4 	bl	800a914 <memcpy>
 800a9cc:	4631      	mov	r1, r6
 800a9ce:	4640      	mov	r0, r8
 800a9d0:	f7fe fffe 	bl	80099d0 <_free_r>
 800a9d4:	e7e1      	b.n	800a99a <_realloc_r+0x1e>
 800a9d6:	4635      	mov	r5, r6
 800a9d8:	e7df      	b.n	800a99a <_realloc_r+0x1e>
	...

0800a9dc <_read_r>:
 800a9dc:	b538      	push	{r3, r4, r5, lr}
 800a9de:	4d07      	ldr	r5, [pc, #28]	; (800a9fc <_read_r+0x20>)
 800a9e0:	4604      	mov	r4, r0
 800a9e2:	4608      	mov	r0, r1
 800a9e4:	4611      	mov	r1, r2
 800a9e6:	2200      	movs	r2, #0
 800a9e8:	602a      	str	r2, [r5, #0]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f7f7 f858 	bl	8001aa0 <_read>
 800a9f0:	1c43      	adds	r3, r0, #1
 800a9f2:	d102      	bne.n	800a9fa <_read_r+0x1e>
 800a9f4:	682b      	ldr	r3, [r5, #0]
 800a9f6:	b103      	cbz	r3, 800a9fa <_read_r+0x1e>
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	bd38      	pop	{r3, r4, r5, pc}
 800a9fc:	20000468 	.word	0x20000468

0800aa00 <_raise_r>:
 800aa00:	291f      	cmp	r1, #31
 800aa02:	b538      	push	{r3, r4, r5, lr}
 800aa04:	4604      	mov	r4, r0
 800aa06:	460d      	mov	r5, r1
 800aa08:	d904      	bls.n	800aa14 <_raise_r+0x14>
 800aa0a:	2316      	movs	r3, #22
 800aa0c:	6003      	str	r3, [r0, #0]
 800aa0e:	f04f 30ff 	mov.w	r0, #4294967295
 800aa12:	bd38      	pop	{r3, r4, r5, pc}
 800aa14:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa16:	b112      	cbz	r2, 800aa1e <_raise_r+0x1e>
 800aa18:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa1c:	b94b      	cbnz	r3, 800aa32 <_raise_r+0x32>
 800aa1e:	4620      	mov	r0, r4
 800aa20:	f000 f830 	bl	800aa84 <_getpid_r>
 800aa24:	462a      	mov	r2, r5
 800aa26:	4601      	mov	r1, r0
 800aa28:	4620      	mov	r0, r4
 800aa2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa2e:	f000 b817 	b.w	800aa60 <_kill_r>
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d00a      	beq.n	800aa4c <_raise_r+0x4c>
 800aa36:	1c59      	adds	r1, r3, #1
 800aa38:	d103      	bne.n	800aa42 <_raise_r+0x42>
 800aa3a:	2316      	movs	r3, #22
 800aa3c:	6003      	str	r3, [r0, #0]
 800aa3e:	2001      	movs	r0, #1
 800aa40:	e7e7      	b.n	800aa12 <_raise_r+0x12>
 800aa42:	2400      	movs	r4, #0
 800aa44:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa48:	4628      	mov	r0, r5
 800aa4a:	4798      	blx	r3
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	e7e0      	b.n	800aa12 <_raise_r+0x12>

0800aa50 <raise>:
 800aa50:	4b02      	ldr	r3, [pc, #8]	; (800aa5c <raise+0xc>)
 800aa52:	4601      	mov	r1, r0
 800aa54:	6818      	ldr	r0, [r3, #0]
 800aa56:	f7ff bfd3 	b.w	800aa00 <_raise_r>
 800aa5a:	bf00      	nop
 800aa5c:	2000000c 	.word	0x2000000c

0800aa60 <_kill_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4d07      	ldr	r5, [pc, #28]	; (800aa80 <_kill_r+0x20>)
 800aa64:	2300      	movs	r3, #0
 800aa66:	4604      	mov	r4, r0
 800aa68:	4608      	mov	r0, r1
 800aa6a:	4611      	mov	r1, r2
 800aa6c:	602b      	str	r3, [r5, #0]
 800aa6e:	f7f6 fffd 	bl	8001a6c <_kill>
 800aa72:	1c43      	adds	r3, r0, #1
 800aa74:	d102      	bne.n	800aa7c <_kill_r+0x1c>
 800aa76:	682b      	ldr	r3, [r5, #0]
 800aa78:	b103      	cbz	r3, 800aa7c <_kill_r+0x1c>
 800aa7a:	6023      	str	r3, [r4, #0]
 800aa7c:	bd38      	pop	{r3, r4, r5, pc}
 800aa7e:	bf00      	nop
 800aa80:	20000468 	.word	0x20000468

0800aa84 <_getpid_r>:
 800aa84:	f7f6 bfea 	b.w	8001a5c <_getpid>

0800aa88 <_fstat_r>:
 800aa88:	b538      	push	{r3, r4, r5, lr}
 800aa8a:	4d07      	ldr	r5, [pc, #28]	; (800aaa8 <_fstat_r+0x20>)
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	4604      	mov	r4, r0
 800aa90:	4608      	mov	r0, r1
 800aa92:	4611      	mov	r1, r2
 800aa94:	602b      	str	r3, [r5, #0]
 800aa96:	f7f7 f848 	bl	8001b2a <_fstat>
 800aa9a:	1c43      	adds	r3, r0, #1
 800aa9c:	d102      	bne.n	800aaa4 <_fstat_r+0x1c>
 800aa9e:	682b      	ldr	r3, [r5, #0]
 800aaa0:	b103      	cbz	r3, 800aaa4 <_fstat_r+0x1c>
 800aaa2:	6023      	str	r3, [r4, #0]
 800aaa4:	bd38      	pop	{r3, r4, r5, pc}
 800aaa6:	bf00      	nop
 800aaa8:	20000468 	.word	0x20000468

0800aaac <_isatty_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d06      	ldr	r5, [pc, #24]	; (800aac8 <_isatty_r+0x1c>)
 800aab0:	2300      	movs	r3, #0
 800aab2:	4604      	mov	r4, r0
 800aab4:	4608      	mov	r0, r1
 800aab6:	602b      	str	r3, [r5, #0]
 800aab8:	f7f7 f847 	bl	8001b4a <_isatty>
 800aabc:	1c43      	adds	r3, r0, #1
 800aabe:	d102      	bne.n	800aac6 <_isatty_r+0x1a>
 800aac0:	682b      	ldr	r3, [r5, #0]
 800aac2:	b103      	cbz	r3, 800aac6 <_isatty_r+0x1a>
 800aac4:	6023      	str	r3, [r4, #0]
 800aac6:	bd38      	pop	{r3, r4, r5, pc}
 800aac8:	20000468 	.word	0x20000468

0800aacc <_malloc_usable_size_r>:
 800aacc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aad0:	1f18      	subs	r0, r3, #4
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	bfbc      	itt	lt
 800aad6:	580b      	ldrlt	r3, [r1, r0]
 800aad8:	18c0      	addlt	r0, r0, r3
 800aada:	4770      	bx	lr

0800aadc <_init>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	bf00      	nop
 800aae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae2:	bc08      	pop	{r3}
 800aae4:	469e      	mov	lr, r3
 800aae6:	4770      	bx	lr

0800aae8 <_fini>:
 800aae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaea:	bf00      	nop
 800aaec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaee:	bc08      	pop	{r3}
 800aaf0:	469e      	mov	lr, r3
 800aaf2:	4770      	bx	lr
